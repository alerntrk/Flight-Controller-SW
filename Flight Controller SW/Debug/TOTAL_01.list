
TOTAL_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c74  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08007e00  08007e00  00017e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ff8  08007ff8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007ff8  08007ff8  00017ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008000  08008000  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008004  08008004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000002c4  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000334  20000334  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee7f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002111  00000000  00000000  0002ef1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00031030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ca8  00000000  00000000  00031dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021691  00000000  00000000  00032a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010702  00000000  00000000  00054101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb74f  00000000  00000000  00064803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ff52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ea4  00000000  00000000  0012ffa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007de4 	.word	0x08007de4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08007de4 	.word	0x08007de4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <Motor_Init>:
#include "types.h"
extern TIM_HandleTypeDef htim1;
extern  MotorPowers motorPowers;


void Motor_Init(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

 HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4808      	ldr	r0, [pc, #32]	; (8000efc <Motor_Init+0x28>)
 8000edc:	f004 f85e 	bl	8004f9c <HAL_TIM_PWM_Start>
 HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <Motor_Init+0x28>)
 8000ee4:	f004 f85a 	bl	8004f9c <HAL_TIM_PWM_Start>
 HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000ee8:	2108      	movs	r1, #8
 8000eea:	4804      	ldr	r0, [pc, #16]	; (8000efc <Motor_Init+0x28>)
 8000eec:	f004 f856 	bl	8004f9c <HAL_TIM_PWM_Start>
 HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000ef0:	210c      	movs	r1, #12
 8000ef2:	4802      	ldr	r0, [pc, #8]	; (8000efc <Motor_Init+0x28>)
 8000ef4:	f004 f852 	bl	8004f9c <HAL_TIM_PWM_Start>


}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000e0 	.word	0x200000e0

08000f00 <Spin_Motor>:
void Spin_Motor(){
 8000f00:	b598      	push	{r3, r4, r7, lr}
 8000f02:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,motorPowers.frontLeftMotorPower);
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <Spin_Motor+0x60>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	4916      	ldr	r1, [pc, #88]	; (8000f64 <Spin_Motor+0x64>)
 8000f0c:	680c      	ldr	r4, [r1, #0]
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fded 	bl	8000af0 <__aeabi_d2uiz>
 8000f16:	4603      	mov	r3, r0
 8000f18:	6423      	str	r3, [r4, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,motorPowers.frontRightMotorPower);
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <Spin_Motor+0x60>)
 8000f1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f20:	4910      	ldr	r1, [pc, #64]	; (8000f64 <Spin_Motor+0x64>)
 8000f22:	680c      	ldr	r4, [r1, #0]
 8000f24:	4610      	mov	r0, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	f7ff fde2 	bl	8000af0 <__aeabi_d2uiz>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,motorPowers.rearLeftMotorPower);
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <Spin_Motor+0x60>)
 8000f32:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f36:	490b      	ldr	r1, [pc, #44]	; (8000f64 <Spin_Motor+0x64>)
 8000f38:	680c      	ldr	r4, [r1, #0]
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f7ff fdd7 	bl	8000af0 <__aeabi_d2uiz>
 8000f42:	4603      	mov	r3, r0
 8000f44:	63e3      	str	r3, [r4, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,motorPowers.rearRightMotorPower);
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <Spin_Motor+0x60>)
 8000f48:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000f4c:	4905      	ldr	r1, [pc, #20]	; (8000f64 <Spin_Motor+0x64>)
 8000f4e:	680c      	ldr	r4, [r1, #0]
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fdcc 	bl	8000af0 <__aeabi_d2uiz>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	63a3      	str	r3, [r4, #56]	; 0x38

}
 8000f5c:	bf00      	nop
 8000f5e:	bd98      	pop	{r3, r4, r7, pc}
 8000f60:	20000250 	.word	0x20000250
 8000f64:	200000e0 	.word	0x200000e0

08000f68 <Stop_Motor>:
void Stop_Motor(){
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <Stop_Motor+0x30>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2200      	movs	r2, #0
 8000f72:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <Stop_Motor+0x30>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <Stop_Motor+0x30>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2200      	movs	r2, #0
 8000f82:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <Stop_Motor+0x30>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	641a      	str	r2, [r3, #64]	; 0x40

}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	200000e0 	.word	0x200000e0

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b5b0      	push	{r4, r5, r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <main+0x88>)
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	4a1f      	ldr	r2, [pc, #124]	; (8001024 <main+0x88>)
 8000fa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fac:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <main+0x8c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <main+0x8c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <main+0x8c>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc0:	f001 ffa2 	bl	8002f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc4:	f000 f836 	bl	8001034 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(1000);
 8000fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fcc:	f002 f80e 	bl	8002fec <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f000 fa12 	bl	80013f8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000fd4:	f000 f8c6 	bl	8001164 <MX_TIM1_Init>
  MX_I2C3_Init();
 8000fd8:	f000 f896 	bl	8001108 <MX_I2C3_Init>
  MX_TIM2_Init();
 8000fdc:	f000 f986 	bl	80012ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Receiver_Init();
 8000fe0:	f001 fde0 	bl	8002ba4 <Receiver_Init>
  Motor_Init();
 8000fe4:	f7ff ff76 	bl	8000ed4 <Motor_Init>
  MPU6050_initialize(&pSensor,FS_500,AFS_8G);
 8000fe8:	2202      	movs	r2, #2
 8000fea:	2101      	movs	r1, #1
 8000fec:	480f      	ldr	r0, [pc, #60]	; (800102c <main+0x90>)
 8000fee:	f000 fb66 	bl	80016be <MPU6050_initialize>

    /* USER CODE BEGIN 3 */
	  /* do something */


	  	  mpu_Update(&pSensor);
 8000ff2:	480e      	ldr	r0, [pc, #56]	; (800102c <main+0x90>)
 8000ff4:	f000 fd70 	bl	8001ad8 <mpu_Update>
		 if(_ReceiverCommands.Throttle<30) {
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <main+0x94>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b1d      	cmp	r3, #29
 8000ffe:	dc03      	bgt.n	8001008 <main+0x6c>
			  Stop_Motor();
 8001000:	f7ff ffb2 	bl	8000f68 <Stop_Motor>
			  resetPidVariables();
 8001004:	f001 fbd6 	bl	80027b4 <resetPidVariables>
		  }
		  calculateMotorPowers(_ReceiverCommands);
 8001008:	4c09      	ldr	r4, [pc, #36]	; (8001030 <main+0x94>)
 800100a:	466d      	mov	r5, sp
 800100c:	f104 0310 	add.w	r3, r4, #16
 8001010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001012:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001016:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800101a:	f001 f8cd 	bl	80021b8 <calculateMotorPowers>
		  Spin_Motor();
 800101e:	f7ff ff6f 	bl	8000f00 <Spin_Motor>
  {
 8001022:	e7e6      	b.n	8000ff2 <main+0x56>
 8001024:	e000edf0 	.word	0xe000edf0
 8001028:	e0001000 	.word	0xe0001000
 800102c:	20000198 	.word	0x20000198
 8001030:	20000170 	.word	0x20000170

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2230      	movs	r2, #48	; 0x30
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f005 fb04 	bl	8006650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a27      	ldr	r2, [pc, #156]	; (8001100 <SystemClock_Config+0xcc>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <SystemClock_Config+0xd0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a21      	ldr	r2, [pc, #132]	; (8001104 <SystemClock_Config+0xd0>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001098:	2310      	movs	r3, #16
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109c:	2302      	movs	r3, #2
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a4:	2308      	movs	r3, #8
 80010a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010a8:	23a8      	movs	r3, #168	; 0xa8
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b0:	2307      	movs	r3, #7
 80010b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 fa43 	bl	8004544 <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010c4:	f000 faf6 	bl	80016b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010cc:	2302      	movs	r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2105      	movs	r1, #5
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fca4 	bl	8004a34 <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010f2:	f000 fadf 	bl	80016b4 <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3750      	adds	r7, #80	; 0x50
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_I2C3_Init+0x50>)
 800110e:	4a13      	ldr	r2, [pc, #76]	; (800115c <MX_I2C3_Init+0x54>)
 8001110:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_I2C3_Init+0x50>)
 8001114:	4a12      	ldr	r2, [pc, #72]	; (8001160 <MX_I2C3_Init+0x58>)
 8001116:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_I2C3_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_I2C3_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_I2C3_Init+0x50>)
 8001126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800112a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_I2C3_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_I2C3_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <MX_I2C3_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_I2C3_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_I2C3_Init+0x50>)
 8001146:	f002 fa3d 	bl	80035c4 <HAL_I2C_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001150:	f000 fab0 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000008c 	.word	0x2000008c
 800115c:	40005c00 	.word	0x40005c00
 8001160:	000186a0 	.word	0x000186a0

08001164 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b096      	sub	sp, #88	; 0x58
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
 8001192:	615a      	str	r2, [r3, #20]
 8001194:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2220      	movs	r2, #32
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f005 fa57 	bl	8006650 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a2:	4b50      	ldr	r3, [pc, #320]	; (80012e4 <MX_TIM1_Init+0x180>)
 80011a4:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <MX_TIM1_Init+0x184>)
 80011a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 80011a8:	4b4e      	ldr	r3, [pc, #312]	; (80012e4 <MX_TIM1_Init+0x180>)
 80011aa:	22a7      	movs	r2, #167	; 0xa7
 80011ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <MX_TIM1_Init+0x180>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80011b4:	4b4b      	ldr	r3, [pc, #300]	; (80012e4 <MX_TIM1_Init+0x180>)
 80011b6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80011ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <MX_TIM1_Init+0x180>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c2:	4b48      	ldr	r3, [pc, #288]	; (80012e4 <MX_TIM1_Init+0x180>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <MX_TIM1_Init+0x180>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ce:	4845      	ldr	r0, [pc, #276]	; (80012e4 <MX_TIM1_Init+0x180>)
 80011d0:	f003 fe3c 	bl	8004e4c <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011da:	f000 fa6b 	bl	80016b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011e8:	4619      	mov	r1, r3
 80011ea:	483e      	ldr	r0, [pc, #248]	; (80012e4 <MX_TIM1_Init+0x180>)
 80011ec:	f004 fb86 	bl	80058fc <HAL_TIM_ConfigClockSource>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011f6:	f000 fa5d 	bl	80016b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011fa:	483a      	ldr	r0, [pc, #232]	; (80012e4 <MX_TIM1_Init+0x180>)
 80011fc:	f003 fe75 	bl	8004eea <HAL_TIM_PWM_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001206:	f000 fa55 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001212:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001216:	4619      	mov	r1, r3
 8001218:	4832      	ldr	r0, [pc, #200]	; (80012e4 <MX_TIM1_Init+0x180>)
 800121a:	f005 f899 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001224:	f000 fa46 	bl	80016b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001228:	2360      	movs	r3, #96	; 0x60
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001234:	2300      	movs	r3, #0
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	2200      	movs	r2, #0
 800124a:	4619      	mov	r1, r3
 800124c:	4825      	ldr	r0, [pc, #148]	; (80012e4 <MX_TIM1_Init+0x180>)
 800124e:	f004 fa93 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001258:	f000 fa2c 	bl	80016b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800125c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001260:	2204      	movs	r2, #4
 8001262:	4619      	mov	r1, r3
 8001264:	481f      	ldr	r0, [pc, #124]	; (80012e4 <MX_TIM1_Init+0x180>)
 8001266:	f004 fa87 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001270:	f000 fa20 	bl	80016b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001278:	2208      	movs	r2, #8
 800127a:	4619      	mov	r1, r3
 800127c:	4819      	ldr	r0, [pc, #100]	; (80012e4 <MX_TIM1_Init+0x180>)
 800127e:	f004 fa7b 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001288:	f000 fa14 	bl	80016b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	220c      	movs	r2, #12
 8001292:	4619      	mov	r1, r3
 8001294:	4813      	ldr	r0, [pc, #76]	; (80012e4 <MX_TIM1_Init+0x180>)
 8001296:	f004 fa6f 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80012a0:	f000 fa08 	bl	80016b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4619      	mov	r1, r3
 80012c6:	4807      	ldr	r0, [pc, #28]	; (80012e4 <MX_TIM1_Init+0x180>)
 80012c8:	f005 f8be 	bl	8006448 <HAL_TIMEx_ConfigBreakDeadTime>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80012d2:	f000 f9ef 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012d6:	4803      	ldr	r0, [pc, #12]	; (80012e4 <MX_TIM1_Init+0x180>)
 80012d8:	f001 fd6c 	bl	8002db4 <HAL_TIM_MspPostInit>

}
 80012dc:	bf00      	nop
 80012de:	3758      	adds	r7, #88	; 0x58
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000e0 	.word	0x200000e0
 80012e8:	40010000 	.word	0x40010000

080012ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001316:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <MX_TIM2_Init+0x108>)
 8001318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800131e:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <MX_TIM2_Init+0x108>)
 8001320:	2253      	movs	r2, #83	; 0x53
 8001322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <MX_TIM2_Init+0x108>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800132a:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <MX_TIM2_Init+0x108>)
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <MX_TIM2_Init+0x108>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <MX_TIM2_Init+0x108>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800133e:	482d      	ldr	r0, [pc, #180]	; (80013f4 <MX_TIM2_Init+0x108>)
 8001340:	f003 fd84 	bl	8004e4c <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800134a:	f000 f9b3 	bl	80016b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	4619      	mov	r1, r3
 800135a:	4826      	ldr	r0, [pc, #152]	; (80013f4 <MX_TIM2_Init+0x108>)
 800135c:	f004 face 	bl	80058fc <HAL_TIM_ConfigClockSource>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001366:	f000 f9a5 	bl	80016b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800136a:	4822      	ldr	r0, [pc, #136]	; (80013f4 <MX_TIM2_Init+0x108>)
 800136c:	f003 fede 	bl	800512c <HAL_TIM_IC_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001376:	f000 f99d 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	481a      	ldr	r0, [pc, #104]	; (80013f4 <MX_TIM2_Init+0x108>)
 800138a:	f004 ffe1 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001394:	f000 f98e 	bl	80016b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001398:	2300      	movs	r3, #0
 800139a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800139c:	2301      	movs	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	4811      	ldr	r0, [pc, #68]	; (80013f4 <MX_TIM2_Init+0x108>)
 80013b0:	f004 f946 	bl	8005640 <HAL_TIM_IC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80013ba:	f000 f97b 	bl	80016b4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	2204      	movs	r2, #4
 80013c2:	4619      	mov	r1, r3
 80013c4:	480b      	ldr	r0, [pc, #44]	; (80013f4 <MX_TIM2_Init+0x108>)
 80013c6:	f004 f93b 	bl	8005640 <HAL_TIM_IC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80013d0:	f000 f970 	bl	80016b4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	2208      	movs	r2, #8
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_TIM2_Init+0x108>)
 80013dc:	f004 f930 	bl	8005640 <HAL_TIM_IC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 80013e6:	f000 f965 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000128 	.word	0x20000128

080013f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	4ba2      	ldr	r3, [pc, #648]	; (800169c <MX_GPIO_Init+0x2a4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4aa1      	ldr	r2, [pc, #644]	; (800169c <MX_GPIO_Init+0x2a4>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b9f      	ldr	r3, [pc, #636]	; (800169c <MX_GPIO_Init+0x2a4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	61bb      	str	r3, [r7, #24]
 8001428:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	4b9b      	ldr	r3, [pc, #620]	; (800169c <MX_GPIO_Init+0x2a4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a9a      	ldr	r2, [pc, #616]	; (800169c <MX_GPIO_Init+0x2a4>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b98      	ldr	r3, [pc, #608]	; (800169c <MX_GPIO_Init+0x2a4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b94      	ldr	r3, [pc, #592]	; (800169c <MX_GPIO_Init+0x2a4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a93      	ldr	r2, [pc, #588]	; (800169c <MX_GPIO_Init+0x2a4>)
 8001450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b91      	ldr	r3, [pc, #580]	; (800169c <MX_GPIO_Init+0x2a4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b8d      	ldr	r3, [pc, #564]	; (800169c <MX_GPIO_Init+0x2a4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a8c      	ldr	r2, [pc, #560]	; (800169c <MX_GPIO_Init+0x2a4>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b8a      	ldr	r3, [pc, #552]	; (800169c <MX_GPIO_Init+0x2a4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b86      	ldr	r3, [pc, #536]	; (800169c <MX_GPIO_Init+0x2a4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a85      	ldr	r2, [pc, #532]	; (800169c <MX_GPIO_Init+0x2a4>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b83      	ldr	r3, [pc, #524]	; (800169c <MX_GPIO_Init+0x2a4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b7f      	ldr	r3, [pc, #508]	; (800169c <MX_GPIO_Init+0x2a4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a7e      	ldr	r2, [pc, #504]	; (800169c <MX_GPIO_Init+0x2a4>)
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b7c      	ldr	r3, [pc, #496]	; (800169c <MX_GPIO_Init+0x2a4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2108      	movs	r1, #8
 80014ba:	4879      	ldr	r0, [pc, #484]	; (80016a0 <MX_GPIO_Init+0x2a8>)
 80014bc:	f002 f868 	bl	8003590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2101      	movs	r1, #1
 80014c4:	4877      	ldr	r0, [pc, #476]	; (80016a4 <MX_GPIO_Init+0x2ac>)
 80014c6:	f002 f863 	bl	8003590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014ca:	2200      	movs	r2, #0
 80014cc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80014d0:	4875      	ldr	r0, [pc, #468]	; (80016a8 <MX_GPIO_Init+0x2b0>)
 80014d2:	f002 f85d 	bl	8003590 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80014d6:	2308      	movs	r3, #8
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	486c      	ldr	r0, [pc, #432]	; (80016a0 <MX_GPIO_Init+0x2a8>)
 80014ee:	f001 feb3 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	4866      	ldr	r0, [pc, #408]	; (80016a4 <MX_GPIO_Init+0x2ac>)
 800150a:	f001 fea5 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800150e:	2308      	movs	r3, #8
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800151e:	2305      	movs	r3, #5
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	485e      	ldr	r0, [pc, #376]	; (80016a4 <MX_GPIO_Init+0x2ac>)
 800152a:	f001 fe95 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800152e:	2301      	movs	r3, #1
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001532:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001536:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	485a      	ldr	r0, [pc, #360]	; (80016ac <MX_GPIO_Init+0x2b4>)
 8001544:	f001 fe88 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001548:	2310      	movs	r3, #16
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001558:	2306      	movs	r3, #6
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	4852      	ldr	r0, [pc, #328]	; (80016ac <MX_GPIO_Init+0x2b4>)
 8001564:	f001 fe78 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001568:	23e0      	movs	r3, #224	; 0xe0
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001578:	2305      	movs	r3, #5
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	484a      	ldr	r0, [pc, #296]	; (80016ac <MX_GPIO_Init+0x2b4>)
 8001584:	f001 fe68 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001588:	2304      	movs	r3, #4
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	4845      	ldr	r0, [pc, #276]	; (80016b0 <MX_GPIO_Init+0x2b8>)
 800159c:	f001 fe5c 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015b2:	2305      	movs	r3, #5
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	483c      	ldr	r0, [pc, #240]	; (80016b0 <MX_GPIO_Init+0x2b8>)
 80015be:	f001 fe4b 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015c2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80015c6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	4833      	ldr	r0, [pc, #204]	; (80016a8 <MX_GPIO_Init+0x2b0>)
 80015dc:	f001 fe3c 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80015e0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015f2:	2306      	movs	r3, #6
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4829      	ldr	r0, [pc, #164]	; (80016a4 <MX_GPIO_Init+0x2ac>)
 80015fe:	f001 fe2b 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	4825      	ldr	r0, [pc, #148]	; (80016ac <MX_GPIO_Init+0x2b4>)
 8001618:	f001 fe1e 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800161c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800162e:	230a      	movs	r3, #10
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	481c      	ldr	r0, [pc, #112]	; (80016ac <MX_GPIO_Init+0x2b4>)
 800163a:	f001 fe0d 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800163e:	2320      	movs	r3, #32
 8001640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	4619      	mov	r1, r3
 8001650:	4815      	ldr	r0, [pc, #84]	; (80016a8 <MX_GPIO_Init+0x2b0>)
 8001652:	f001 fe01 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001656:	f44f 7310 	mov.w	r3, #576	; 0x240
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165c:	2312      	movs	r3, #18
 800165e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001668:	2304      	movs	r3, #4
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	480f      	ldr	r0, [pc, #60]	; (80016b0 <MX_GPIO_Init+0x2b8>)
 8001674:	f001 fdf0 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001678:	2302      	movs	r3, #2
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800167c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <MX_GPIO_Init+0x2a8>)
 800168e:	f001 fde3 	bl	8003258 <HAL_GPIO_Init>

}
 8001692:	bf00      	nop
 8001694:	3730      	adds	r7, #48	; 0x30
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016bc:	e7fe      	b.n	80016bc <Error_Handler+0x8>

080016be <MPU6050_initialize>:

static sensor_status_e MPU6050_set_acc_range(SensorData_t *pSensor, afs_sel_e accRange);
static sensor_status_e MPU6050_set_gyro_range(SensorData_t *pSensor, fs_sel_e gyroRange);

sensor_status_e MPU6050_initialize( SensorData_t *pSensor, fs_sel_e gyroConfig, afs_sel_e acc_config )
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	70fb      	strb	r3, [r7, #3]
 80016ca:	4613      	mov	r3, r2
 80016cc:	70bb      	strb	r3, [r7, #2]
    sensor_status_e retVal;

    retVal = MPU6050_set_gyro_range( pSensor, gyroConfig );
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	4619      	mov	r1, r3
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f81c 	bl	8001710 <MPU6050_set_gyro_range>
 80016d8:	4603      	mov	r3, r0
 80016da:	73fb      	strb	r3, [r7, #15]

    if (retVal == SENSOR_OK) {
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10e      	bne.n	8001700 <MPU6050_initialize+0x42>
        retVal = MPU6050_set_acc_range( pSensor, acc_config );
 80016e2:	78bb      	ldrb	r3, [r7, #2]
 80016e4:	4619      	mov	r1, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f86e 	bl	80017c8 <MPU6050_set_acc_range>
 80016ec:	4603      	mov	r3, r0
 80016ee:	73fb      	strb	r3, [r7, #15]

        if (retVal == SENSOR_OK) {
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d104      	bne.n	8001700 <MPU6050_initialize+0x42>
            retVal = MPU6050_set_sleep_mode( SLEEPMODE_OFF );
 80016f6:	2000      	movs	r0, #0
 80016f8:	f000 f8ba 	bl	8001870 <MPU6050_set_sleep_mode>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
        }
    }


    return retVal;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	0000      	movs	r0, r0
 800170c:	0000      	movs	r0, r0
	...

08001710 <MPU6050_set_gyro_range>:

sensor_status_e MPU6050_set_gyro_range(SensorData_t *pSensor, fs_sel_e gyroRange)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
	sensor_status_e retVal;
	uint8_t configReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_GYRO_CONFIG );
 800171c:	211b      	movs	r1, #27
 800171e:	20d0      	movs	r0, #208	; 0xd0
 8001720:	f004 fef8 	bl	8006514 <sensor_read_register8>
 8001724:	4603      	mov	r3, r0
 8001726:	73bb      	strb	r3, [r7, #14]

	configReg |= ((uint32_t)gyroRange << MPU_REG_GYRO_CONFIG_GYRO_RANGE_BITS_POSITION );
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	b2da      	uxtb	r2, r3
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	4313      	orrs	r3, r2
 8001732:	73bb      	strb	r3, [r7, #14]

	retVal = sensor_write_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_GYRO_CONFIG, configReg);
 8001734:	7bbb      	ldrb	r3, [r7, #14]
 8001736:	461a      	mov	r2, r3
 8001738:	211b      	movs	r1, #27
 800173a:	20d0      	movs	r0, #208	; 0xd0
 800173c:	f004 ff10 	bl	8006560 <sensor_write_register8>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]

	switch (gyroRange)
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d826      	bhi.n	8001798 <MPU6050_set_gyro_range+0x88>
 800174a:	a201      	add	r2, pc, #4	; (adr r2, 8001750 <MPU6050_set_gyro_range+0x40>)
 800174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001750:	08001761 	.word	0x08001761
 8001754:	0800176f 	.word	0x0800176f
 8001758:	0800177d 	.word	0x0800177d
 800175c:	0800178b 	.word	0x0800178b
	{
	 case FS_250:  pSensor->gyro_co = 131.0; break;
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	a311      	add	r3, pc, #68	; (adr r3, 80017a8 <MPU6050_set_gyro_range+0x98>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 800176c:	e017      	b.n	800179e <MPU6050_set_gyro_range+0x8e>
	 case FS_500:  pSensor->gyro_co = 65.5; break;
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	a30f      	add	r3, pc, #60	; (adr r3, 80017b0 <MPU6050_set_gyro_range+0xa0>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 800177a:	e010      	b.n	800179e <MPU6050_set_gyro_range+0x8e>
	 case FS_1000: pSensor->gyro_co = 32.8; break;
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	a30e      	add	r3, pc, #56	; (adr r3, 80017b8 <MPU6050_set_gyro_range+0xa8>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8001788:	e009      	b.n	800179e <MPU6050_set_gyro_range+0x8e>
	 case FS_2000: pSensor->gyro_co = 16.4; break;
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	a30c      	add	r3, pc, #48	; (adr r3, 80017c0 <MPU6050_set_gyro_range+0xb0>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8001796:	e002      	b.n	800179e <MPU6050_set_gyro_range+0x8e>
	 default: retVal = SENSOR_ERROR; break;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	bf00      	nop
	}

	return retVal;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	00000000 	.word	0x00000000
 80017ac:	40606000 	.word	0x40606000
 80017b0:	00000000 	.word	0x00000000
 80017b4:	40506000 	.word	0x40506000
 80017b8:	66666666 	.word	0x66666666
 80017bc:	40406666 	.word	0x40406666
 80017c0:	66666666 	.word	0x66666666
 80017c4:	40306666 	.word	0x40306666

080017c8 <MPU6050_set_acc_range>:

sensor_status_e MPU6050_set_acc_range(SensorData_t *pSensor, afs_sel_e accRange)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70fb      	strb	r3, [r7, #3]
	sensor_status_e retVal;
	uint8_t configReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_ACCEL_CONFIG );
 80017d4:	211c      	movs	r1, #28
 80017d6:	20d0      	movs	r0, #208	; 0xd0
 80017d8:	f004 fe9c 	bl	8006514 <sensor_read_register8>
 80017dc:	4603      	mov	r3, r0
 80017de:	73bb      	strb	r3, [r7, #14]

	configReg |= ( (uint32_t) accRange << MPU_REG_ACC_CONFIG_ACC_RANGE_BITS_POSITION );
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	73bb      	strb	r3, [r7, #14]

	retVal = sensor_write_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_ACCEL_CONFIG, configReg);
 80017ec:	7bbb      	ldrb	r3, [r7, #14]
 80017ee:	461a      	mov	r2, r3
 80017f0:	211c      	movs	r1, #28
 80017f2:	20d0      	movs	r0, #208	; 0xd0
 80017f4:	f004 feb4 	bl	8006560 <sensor_write_register8>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]

	switch (accRange)
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d826      	bhi.n	8001850 <MPU6050_set_acc_range+0x88>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <MPU6050_set_acc_range+0x40>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001819 	.word	0x08001819
 800180c:	08001827 	.word	0x08001827
 8001810:	08001835 	.word	0x08001835
 8001814:	08001843 	.word	0x08001843
	{
	 case AFS_2G:  pSensor->acc_co = 16384; break;
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MPU6050_set_acc_range+0x98>)
 8001820:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8001824:	e017      	b.n	8001856 <MPU6050_set_acc_range+0x8e>
	 case AFS_4G:  pSensor->acc_co = 8192; break;
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <MPU6050_set_acc_range+0x9c>)
 800182e:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8001832:	e010      	b.n	8001856 <MPU6050_set_acc_range+0x8e>
	 case AFS_8G:  pSensor->acc_co = 4096; break;
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MPU6050_set_acc_range+0xa0>)
 800183c:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8001840:	e009      	b.n	8001856 <MPU6050_set_acc_range+0x8e>
	 case AFS_16G: pSensor->acc_co = 2048; break;
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <MPU6050_set_acc_range+0xa4>)
 800184a:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800184e:	e002      	b.n	8001856 <MPU6050_set_acc_range+0x8e>
	 default: retVal = SENSOR_ERROR; break;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	bf00      	nop
	}

	return retVal;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40d00000 	.word	0x40d00000
 8001864:	40c00000 	.word	0x40c00000
 8001868:	40b00000 	.word	0x40b00000
 800186c:	40a00000 	.word	0x40a00000

08001870 <MPU6050_set_sleep_mode>:
	id = sensor_read_register8(MPU6050_I2C_ADRESS_AD1,MPU_REG_WHO_AM_I );
	return id;
}

sensor_status_e MPU6050_set_sleep_mode(sleepmode_e sleepmode)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
	sensor_status_e retVal;
	uint8_t powerReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_PWR_MGMT_1 );
 800187a:	216b      	movs	r1, #107	; 0x6b
 800187c:	20d0      	movs	r0, #208	; 0xd0
 800187e:	f004 fe49 	bl	8006514 <sensor_read_register8>
 8001882:	4603      	mov	r3, r0
 8001884:	73fb      	strb	r3, [r7, #15]

	if(SLEEPMODE_ON == sleepmode) {
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d104      	bne.n	8001896 <MPU6050_set_sleep_mode+0x26>
		SET_BIT(powerReg,1<<MPU_BIT_PWR_MGMT_1_SLEEP_MODE);
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e003      	b.n	800189e <MPU6050_set_sleep_mode+0x2e>
	}
	else {
		CLEAR_BIT(powerReg,1<<MPU_BIT_PWR_MGMT_1_SLEEP_MODE);
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800189c:	73fb      	strb	r3, [r7, #15]
	}
	retVal = sensor_write_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_PWR_MGMT_1, powerReg);
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	461a      	mov	r2, r3
 80018a2:	216b      	movs	r1, #107	; 0x6b
 80018a4:	20d0      	movs	r0, #208	; 0xd0
 80018a6:	f004 fe5b 	bl	8006560 <sensor_write_register8>
 80018aa:	4603      	mov	r3, r0
 80018ac:	73bb      	strb	r3, [r7, #14]

	powerReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_PWR_MGMT_1 );
 80018ae:	216b      	movs	r1, #107	; 0x6b
 80018b0:	20d0      	movs	r0, #208	; 0xd0
 80018b2:	f004 fe2f 	bl	8006514 <sensor_read_register8>
 80018b6:	4603      	mov	r3, r0
 80018b8:	73fb      	strb	r3, [r7, #15]

	return retVal;
 80018ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <MPU6050_read_data>:


sensor_status_e MPU6050_read_data(SensorData_t *pSensorData)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	sensor_status_e retVal;
	uint8_t buffer[14];
	retVal =  sensor_read_bytes(MPU6050_I2C_ADRESS_AD1, MPU_REG_ACCEL_XOUT_H, buffer, 14);
 80018cc:	f107 0208 	add.w	r2, r7, #8
 80018d0:	230e      	movs	r3, #14
 80018d2:	213b      	movs	r1, #59	; 0x3b
 80018d4:	20d0      	movs	r0, #208	; 0xd0
 80018d6:	f004 fe69 	bl	80065ac <sensor_read_bytes>
 80018da:	4603      	mov	r3, r0
 80018dc:	75fb      	strb	r3, [r7, #23]

    if (retVal == SENSOR_OK) {
 80018de:	7dfb      	ldrb	r3, [r7, #23]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f040 80f2 	bne.w	8001aca <MPU6050_read_data+0x206>
        pSensorData->accRaw.X = (int16_t) ((buffer[0] << 8) | buffer[1]);
 80018e6:	7a3b      	ldrb	r3, [r7, #8]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	7a7b      	ldrb	r3, [r7, #9]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	801a      	strh	r2, [r3, #0]
        pSensorData->accRaw.Y = (int16_t) ((buffer[2] << 8) | buffer[3]);
 80018f8:	7abb      	ldrb	r3, [r7, #10]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	7afb      	ldrb	r3, [r7, #11]
 8001900:	b21b      	sxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b21a      	sxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	805a      	strh	r2, [r3, #2]
        pSensorData->accRaw.Z = (int16_t) ((buffer[4] << 8) | buffer[5]);
 800190a:	7b3b      	ldrb	r3, [r7, #12]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	b21a      	sxth	r2, r3
 8001910:	7b7b      	ldrb	r3, [r7, #13]
 8001912:	b21b      	sxth	r3, r3
 8001914:	4313      	orrs	r3, r2
 8001916:	b21a      	sxth	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	809a      	strh	r2, [r3, #4]

        pSensorData->gyroRaw.X = (int16_t) ((buffer[8] << 8) | buffer[9]);
 800191c:	7c3b      	ldrb	r3, [r7, #16]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	b21a      	sxth	r2, r3
 8001922:	7c7b      	ldrb	r3, [r7, #17]
 8001924:	b21b      	sxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	b21a      	sxth	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	80da      	strh	r2, [r3, #6]
        pSensorData->gyroRaw.Y = (int16_t) ((buffer[10] << 8) | buffer[11]);
 800192e:	7cbb      	ldrb	r3, [r7, #18]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b21a      	sxth	r2, r3
 8001934:	7cfb      	ldrb	r3, [r7, #19]
 8001936:	b21b      	sxth	r3, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	b21a      	sxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	811a      	strh	r2, [r3, #8]
        pSensorData->gyroRaw.Z = (int16_t) ((buffer[12] << 8) | buffer[13]);
 8001940:	7d3b      	ldrb	r3, [r7, #20]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	b21a      	sxth	r2, r3
 8001946:	7d7b      	ldrb	r3, [r7, #21]
 8001948:	b21b      	sxth	r3, r3
 800194a:	4313      	orrs	r3, r2
 800194c:	b21a      	sxth	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	815a      	strh	r2, [r3, #10]

        pSensorData->acc.X = (float)(pSensorData->accRaw.X - pSensorData->acc.xOffSet) / pSensorData->acc_co;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fd87 	bl	800046c <__aeabi_i2d>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001964:	f7fe fc34 	bl	80001d0 <__aeabi_dsub>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f8de 	bl	8000b30 <__aeabi_d2f>
 8001974:	4603      	mov	r3, r0
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fd8a 	bl	8000490 <__aeabi_f2d>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001982:	f7fe ff07 	bl	8000794 <__aeabi_ddiv>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        pSensorData->acc.Y = (float)(pSensorData->accRaw.Y - pSensorData->acc.yOffSet) / pSensorData->acc_co;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fd68 	bl	800046c <__aeabi_i2d>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80019a2:	f7fe fc15 	bl	80001d0 <__aeabi_dsub>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f7ff f8bf 	bl	8000b30 <__aeabi_d2f>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fd6b 	bl	8000490 <__aeabi_f2d>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80019c0:	f7fe fee8 	bl	8000794 <__aeabi_ddiv>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	e9c1 2306 	strd	r2, r3, [r1, #24]
        pSensorData->acc.Z = (float)(pSensorData->accRaw.Z - pSensorData->acc.zOffSet) / pSensorData->acc_co;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fd49 	bl	800046c <__aeabi_i2d>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80019e0:	f7fe fbf6 	bl	80001d0 <__aeabi_dsub>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f8a0 	bl	8000b30 <__aeabi_d2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fd4c 	bl	8000490 <__aeabi_f2d>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80019fe:	f7fe fec9 	bl	8000794 <__aeabi_ddiv>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	e9c1 2308 	strd	r2, r3, [r1, #32]

        pSensorData->gyro.X = (float)(pSensorData->gyroRaw.X - pSensorData->gyro.xOffSet) / pSensorData->gyro_co;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd2a 	bl	800046c <__aeabi_i2d>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8001a1e:	f7fe fbd7 	bl	80001d0 <__aeabi_dsub>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f7ff f881 	bl	8000b30 <__aeabi_d2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fd2d 	bl	8000490 <__aeabi_f2d>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001a3c:	f7fe feaa 	bl	8000794 <__aeabi_ddiv>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        pSensorData->gyro.Y = (float)(pSensorData->gyroRaw.Y - pSensorData->gyro.yOffSet) / pSensorData->gyro_co;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd0b 	bl	800046c <__aeabi_i2d>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8001a5c:	f7fe fbb8 	bl	80001d0 <__aeabi_dsub>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f862 	bl	8000b30 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd0e 	bl	8000490 <__aeabi_f2d>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001a7a:	f7fe fe8b 	bl	8000794 <__aeabi_ddiv>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        pSensorData->gyro.Z = (float)(pSensorData->gyroRaw.Z - pSensorData->gyro.zOffSet) / pSensorData->gyro_co;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fcec 	bl	800046c <__aeabi_i2d>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001a9a:	f7fe fb99 	bl	80001d0 <__aeabi_dsub>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f843 	bl	8000b30 <__aeabi_d2f>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fcef 	bl	8000490 <__aeabi_f2d>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001ab8:	f7fe fe6c 	bl	8000794 <__aeabi_ddiv>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

        return retVal;
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	e000      	b.n	8001acc <MPU6050_read_data+0x208>
    } else {
        return SENSOR_ERROR;
 8001aca:	2301      	movs	r3, #1
    }
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	0000      	movs	r0, r0
	...

08001ad8 <mpu_Update>:
    meanP=(float)sum2/(float)size;
    meanR=(float)sum3/(float)size;

}
*/
void mpu_Update(SensorData_t* pSensorData) {
 8001ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
	pSensorData->AnglePitch= pSensorData->AnglePitch*0.9 +pSensorData->acc.pitch*0.1;
	pSensorData->AngleRoll= pSensorData->AngleRoll*0.9 +pSensorData->acc.roll*0.1;
	while((HAL_GetTick() - prevtime)*1000 < 4000);
	prevtime = HAL_GetTick();*/

	t1 = DWT->CYCCNT;
 8001ae2:	4bbf      	ldr	r3, [pc, #764]	; (8001de0 <mpu_Update+0x308>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4abf      	ldr	r2, [pc, #764]	; (8001de4 <mpu_Update+0x30c>)
 8001ae8:	6013      	str	r3, [r2, #0]


	double acc_total_vec;


	MPU6050_read_data(pSensorData);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff feea 	bl	80018c4 <MPU6050_read_data>

	pSensorData->gyro.pitch += pSensorData->gyro.X*0.004;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001afc:	a3aa      	add	r3, pc, #680	; (adr r3, 8001da8 <mpu_Update+0x2d0>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fd1d 	bl	8000540 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fb61 	bl	80001d4 <__adddf3>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	pSensorData->gyro.roll += pSensorData->gyro.Y*0.004;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001b28:	a39f      	add	r3, pc, #636	; (adr r3, 8001da8 <mpu_Update+0x2d0>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fd07 	bl	8000540 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f7fe fb4b 	bl	80001d4 <__adddf3>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	pSensorData->gyro.pitch += pSensorData->gyro.roll * sin(pSensorData->gyro.Z*0.000001066);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001b5a:	a395      	add	r3, pc, #596	; (adr r3, 8001db0 <mpu_Update+0x2d8>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fcee 	bl	8000540 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	ec43 2b17 	vmov	d7, r2, r3
 8001b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b70:	eef0 0a67 	vmov.f32	s1, s15
 8001b74:	f004 fdbc 	bl	80066f0 <sin>
 8001b78:	ec53 2b10 	vmov	r2, r3, d0
 8001b7c:	4640      	mov	r0, r8
 8001b7e:	4649      	mov	r1, r9
 8001b80:	f7fe fcde 	bl	8000540 <__aeabi_dmul>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4620      	mov	r0, r4
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	f7fe fb22 	bl	80001d4 <__adddf3>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	pSensorData->gyro.roll += pSensorData->gyro.pitch * sin(pSensorData->gyro.Z*0.000001066);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	e9d3 891c 	ldrd	r8, r9, [r3, #112]	; 0x70
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001bac:	a380      	add	r3, pc, #512	; (adr r3, 8001db0 <mpu_Update+0x2d8>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	f7fe fcc5 	bl	8000540 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	ec43 2b17 	vmov	d7, r2, r3
 8001bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001bc2:	eef0 0a67 	vmov.f32	s1, s15
 8001bc6:	f004 fd93 	bl	80066f0 <sin>
 8001bca:	ec53 2b10 	vmov	r2, r3, d0
 8001bce:	4640      	mov	r0, r8
 8001bd0:	4649      	mov	r1, r9
 8001bd2:	f7fe fcb5 	bl	8000540 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe faf9 	bl	80001d4 <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	acc_total_vec=sqrt(pSensorData->acc.X*pSensorData->acc.X + pSensorData->acc.Y*pSensorData->acc.Y+pSensorData->acc.Z*pSensorData->acc.Z);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001bf8:	f7fe fca2 	bl	8000540 <__aeabi_dmul>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4614      	mov	r4, r2
 8001c02:	461d      	mov	r5, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c10:	f7fe fc96 	bl	8000540 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4620      	mov	r0, r4
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	f7fe fada 	bl	80001d4 <__adddf3>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4614      	mov	r4, r2
 8001c26:	461d      	mov	r5, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c34:	f7fe fc84 	bl	8000540 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	4629      	mov	r1, r5
 8001c40:	f7fe fac8 	bl	80001d4 <__adddf3>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	ec43 2b17 	vmov	d7, r2, r3
 8001c4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c50:	eef0 0a67 	vmov.f32	s1, s15
 8001c54:	f004 fdd8 	bl	8006808 <sqrt>
 8001c58:	ed87 0b04 	vstr	d0, [r7, #16]

	pSensorData->acc.pitch = asin(pSensorData->acc.Y/acc_total_vec)*57.296;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c66:	f7fe fd95 	bl	8000794 <__aeabi_ddiv>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	ec43 2b17 	vmov	d7, r2, r3
 8001c72:	eeb0 0a47 	vmov.f32	s0, s14
 8001c76:	eef0 0a67 	vmov.f32	s1, s15
 8001c7a:	f004 fd91 	bl	80067a0 <asin>
 8001c7e:	ec51 0b10 	vmov	r0, r1, d0
 8001c82:	a34d      	add	r3, pc, #308	; (adr r3, 8001db8 <mpu_Update+0x2e0>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fc5a 	bl	8000540 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	pSensorData->acc.roll = asin(pSensorData->acc.X/acc_total_vec)*57.296;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ca0:	f7fe fd78 	bl	8000794 <__aeabi_ddiv>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	ec43 2b17 	vmov	d7, r2, r3
 8001cac:	eeb0 0a47 	vmov.f32	s0, s14
 8001cb0:	eef0 0a67 	vmov.f32	s1, s15
 8001cb4:	f004 fd74 	bl	80067a0 <asin>
 8001cb8:	ec51 0b10 	vmov	r0, r1, d0
 8001cbc:	a33e      	add	r3, pc, #248	; (adr r3, 8001db8 <mpu_Update+0x2e0>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	f7fe fc3d 	bl	8000540 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	pSensorData->AnglePitch =pSensorData->gyro.pitch*0.0004 + pSensorData->acc.pitch*0.9996+1.8;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8001cd6:	a33a      	add	r3, pc, #232	; (adr r3, 8001dc0 <mpu_Update+0x2e8>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fc30 	bl	8000540 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001cee:	a336      	add	r3, pc, #216	; (adr r3, 8001dc8 <mpu_Update+0x2f0>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	f7fe fc24 	bl	8000540 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	4629      	mov	r1, r5
 8001d00:	f7fe fa68 	bl	80001d4 <__adddf3>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	a330      	add	r3, pc, #192	; (adr r3, 8001dd0 <mpu_Update+0x2f8>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fa5f 	bl	80001d4 <__adddf3>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	pSensorData->AngleRoll =pSensorData->gyro.roll*0.0004 + pSensorData->acc.roll*0.9996+0.3;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8001d26:	a326      	add	r3, pc, #152	; (adr r3, 8001dc0 <mpu_Update+0x2e8>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	f7fe fc08 	bl	8000540 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4614      	mov	r4, r2
 8001d36:	461d      	mov	r5, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001d3e:	a322      	add	r3, pc, #136	; (adr r3, 8001dc8 <mpu_Update+0x2f0>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe fbfc 	bl	8000540 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	4629      	mov	r1, r5
 8001d50:	f7fe fa40 	bl	80001d4 <__adddf3>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	a31e      	add	r3, pc, #120	; (adr r3, 8001dd8 <mpu_Update+0x300>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe fa37 	bl	80001d4 <__adddf3>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
	//sensorData->angleZ += sensorData->gyro.Z*dt;

	t2 = DWT->CYCCNT;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <mpu_Update+0x308>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <mpu_Update+0x310>)
 8001d76:	6013      	str	r3, [r2, #0]
	dt = (double)(t2 - t1);
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <mpu_Update+0x310>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <mpu_Update+0x30c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fb62 	bl	800044c <__aeabi_ui2d>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7fe fece 	bl	8000b30 <__aeabi_d2f>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4a15      	ldr	r2, [pc, #84]	; (8001dec <mpu_Update+0x314>)
 8001d98:	6013      	str	r3, [r2, #0]
	pSensorData->AngleYaw = (double)pSensorData->gyro.Z*dt/(double)1000000;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 8001da0:	e026      	b.n	8001df0 <mpu_Update+0x318>
 8001da2:	bf00      	nop
 8001da4:	f3af 8000 	nop.w
 8001da8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001dac:	3f70624d 	.word	0x3f70624d
 8001db0:	652c6e62 	.word	0x652c6e62
 8001db4:	3eb1e26f 	.word	0x3eb1e26f
 8001db8:	53f7ced9 	.word	0x53f7ced9
 8001dbc:	404ca5e3 	.word	0x404ca5e3
 8001dc0:	eb1c432d 	.word	0xeb1c432d
 8001dc4:	3f3a36e2 	.word	0x3f3a36e2
 8001dc8:	23a29c78 	.word	0x23a29c78
 8001dcc:	3feffcb9 	.word	0x3feffcb9
 8001dd0:	cccccccd 	.word	0xcccccccd
 8001dd4:	3ffccccc 	.word	0x3ffccccc
 8001dd8:	33333333 	.word	0x33333333
 8001ddc:	3fd33333 	.word	0x3fd33333
 8001de0:	e0001000 	.word	0xe0001000
 8001de4:	20000270 	.word	0x20000270
 8001de8:	20000274 	.word	0x20000274
 8001dec:	20000190 	.word	0x20000190
 8001df0:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <mpu_Update+0x478>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fb4b 	bl	8000490 <__aeabi_f2d>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4620      	mov	r0, r4
 8001e00:	4629      	mov	r1, r5
 8001e02:	f7fe fb9d 	bl	8000540 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	a34a      	add	r3, pc, #296	; (adr r3, 8001f38 <mpu_Update+0x460>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f7fe fcbe 	bl	8000794 <__aeabi_ddiv>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	while((HAL_GetTick() - prev_time)*1000 < 4000);
 8001e22:	bf00      	nop
 8001e24:	f001 f8d6 	bl	8002fd4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <mpu_Update+0x47c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e34:	fb02 f303 	mul.w	r3, r2, r3
 8001e38:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001e3c:	d3f2      	bcc.n	8001e24 <mpu_Update+0x34c>

	prev_time = HAL_GetTick();
 8001e3e:	f001 f8c9 	bl	8002fd4 <HAL_GetTick>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4a43      	ldr	r2, [pc, #268]	; (8001f54 <mpu_Update+0x47c>)
 8001e46:	6013      	str	r3, [r2, #0]


	int j=0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
	if(i<200){
 8001e4c:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <mpu_Update+0x480>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2bc7      	cmp	r3, #199	; 0xc7
 8001e52:	dc2a      	bgt.n	8001eaa <mpu_Update+0x3d2>
		sum+=pSensorData->AnglePitch;
 8001e54:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <mpu_Update+0x484>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb19 	bl	8000490 <__aeabi_f2d>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8001e64:	f7fe f9b6 	bl	80001d4 <__adddf3>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fe5e 	bl	8000b30 <__aeabi_d2f>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4a39      	ldr	r2, [pc, #228]	; (8001f5c <mpu_Update+0x484>)
 8001e78:	6013      	str	r3, [r2, #0]
		i++;
 8001e7a:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <mpu_Update+0x480>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	4a35      	ldr	r2, [pc, #212]	; (8001f58 <mpu_Update+0x480>)
 8001e82:	6013      	str	r3, [r2, #0]
		summ+=pSensorData->AngleRoll;
 8001e84:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <mpu_Update+0x488>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb01 	bl	8000490 <__aeabi_f2d>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8001e94:	f7fe f99e 	bl	80001d4 <__adddf3>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f7fe fe46 	bl	8000b30 <__aeabi_d2f>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4a2e      	ldr	r2, [pc, #184]	; (8001f60 <mpu_Update+0x488>)
 8001ea8:	6013      	str	r3, [r2, #0]

	}

	if(i>=200)
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <mpu_Update+0x480>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2bc7      	cmp	r3, #199	; 0xc7
 8001eb0:	dd3c      	ble.n	8001f2c <mpu_Update+0x454>
		{
		meanP=(float)sum/(float)200-0.35;
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <mpu_Update+0x484>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001f64 <mpu_Update+0x48c>
 8001ebc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ec0:	ee16 0a90 	vmov	r0, s13
 8001ec4:	f7fe fae4 	bl	8000490 <__aeabi_f2d>
 8001ec8:	a31d      	add	r3, pc, #116	; (adr r3, 8001f40 <mpu_Update+0x468>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe f97f 	bl	80001d0 <__aeabi_dsub>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f7fe fe29 	bl	8000b30 <__aeabi_d2f>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <mpu_Update+0x490>)
 8001ee2:	6013      	str	r3, [r2, #0]
		meanR=(float)summ/(float)200+4.7;
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <mpu_Update+0x488>)
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001f64 <mpu_Update+0x48c>
 8001eee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ef2:	ee16 0a90 	vmov	r0, s13
 8001ef6:	f7fe facb 	bl	8000490 <__aeabi_f2d>
 8001efa:	a313      	add	r3, pc, #76	; (adr r3, 8001f48 <mpu_Update+0x470>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe f968 	bl	80001d4 <__adddf3>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f7fe fe10 	bl	8000b30 <__aeabi_d2f>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4a16      	ldr	r2, [pc, #88]	; (8001f6c <mpu_Update+0x494>)
 8001f14:	6013      	str	r3, [r2, #0]
			i=0;
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <mpu_Update+0x480>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
			sum=0;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <mpu_Update+0x484>)
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
			summ=0;
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <mpu_Update+0x488>)
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

	//applyMovingAverageFilter(data_Pitch,data_Roll,50);



}
 8001f2c:	bf00      	nop
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f36:	bf00      	nop
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	412e8480 	.word	0x412e8480
 8001f40:	66666666 	.word	0x66666666
 8001f44:	3fd66666 	.word	0x3fd66666
 8001f48:	cccccccd 	.word	0xcccccccd
 8001f4c:	4012cccc 	.word	0x4012cccc
 8001f50:	20000190 	.word	0x20000190
 8001f54:	200002d8 	.word	0x200002d8
 8001f58:	200002e4 	.word	0x200002e4
 8001f5c:	200002dc 	.word	0x200002dc
 8001f60:	200002e0 	.word	0x200002e0
 8001f64:	43480000 	.word	0x43480000
 8001f68:	200002d4 	.word	0x200002d4
 8001f6c:	200002d0 	.word	0x200002d0

08001f70 <constrain>:
extern float meanP;
extern float meanR;



double constrain(double x,double y,double z){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	ed87 0b04 	vstr	d0, [r7, #16]
 8001f7a:	ed87 1b02 	vstr	d1, [r7, #8]
 8001f7e:	ed87 2b00 	vstr	d2, [r7]
	if(x< y) return y;
 8001f82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f8a:	f7fe fd4b 	bl	8000a24 <__aeabi_dcmplt>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <constrain+0x2a>
 8001f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f98:	e00d      	b.n	8001fb6 <constrain+0x46>
	else if(x>z) return z;
 8001f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fa2:	f7fe fd5d 	bl	8000a60 <__aeabi_dcmpgt>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <constrain+0x42>
 8001fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fb0:	e001      	b.n	8001fb6 <constrain+0x46>
	return x;
 8001fb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001fb6:	ec43 2b17 	vmov	d7, r2, r3
 8001fba:	eeb0 0a47 	vmov.f32	s0, s14
 8001fbe:	eef0 0a67 	vmov.f32	s1, s15
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <max>:

double max(double x,double y){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	ed87 0b02 	vstr	d0, [r7, #8]
 8001fd2:	ed87 1b00 	vstr	d1, [r7]

	if(x<y)return y;
 8001fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fde:	f7fe fd21 	bl	8000a24 <__aeabi_dcmplt>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <max+0x26>
 8001fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fec:	e001      	b.n	8001ff2 <max+0x2a>
	return x;
 8001fee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]

}
 8001ff2:	ec43 2b17 	vmov	d7, r2, r3
 8001ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8001ffa:	eef0 0a67 	vmov.f32	s1, s15
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	0000      	movs	r0, r0
	...

08002008 <getControlSignalRoll>:
#define KP_roll_pitch 0.3
#define KI_roll_pitch  0.1
#define KD_roll_pitch  0.1
 */

double getControlSignalRoll( double delta_time_in_seconds) {
 8002008:	b5b0      	push	{r4, r5, r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	ed87 0b00 	vstr	d0, [r7]
  double pid_p = rollError;
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <getControlSignalRoll+0xc8>)
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double pid_d = (rollError - roll_last_error) / delta_time_in_seconds;
 800201c:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <getControlSignalRoll+0xc8>)
 800201e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002022:	4b2c      	ldr	r3, [pc, #176]	; (80020d4 <getControlSignalRoll+0xcc>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	f7fe f8d2 	bl	80001d0 <__aeabi_dsub>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002038:	f7fe fbac 	bl	8000794 <__aeabi_ddiv>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	e9c7 2304 	strd	r2, r3, [r7, #16]
/*  if(error<3){
  roll_pid_i += error * delta_time_in_seconds;
  }*/
  double control_signal = (KP_roll_pitch * pid_p) + (KI_roll_pitch * roll_pid_i) + (KD_roll_pitch * pid_d);
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <getControlSignalRoll+0xd0>)
 800204a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800204e:	f7fe fa77 	bl	8000540 <__aeabi_dmul>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4614      	mov	r4, r2
 8002058:	461d      	mov	r5, r3
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <getControlSignalRoll+0xd4>)
 800205c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	f7fe fa6a 	bl	8000540 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4620      	mov	r0, r4
 8002072:	4629      	mov	r1, r5
 8002074:	f7fe f8ae 	bl	80001d4 <__adddf3>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4614      	mov	r4, r2
 800207e:	461d      	mov	r5, r3
 8002080:	a311      	add	r3, pc, #68	; (adr r3, 80020c8 <getControlSignalRoll+0xc0>)
 8002082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002086:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800208a:	f7fe fa59 	bl	8000540 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4620      	mov	r0, r4
 8002094:	4629      	mov	r1, r5
 8002096:	f7fe f89d 	bl	80001d4 <__adddf3>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  roll_last_error = rollError;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <getControlSignalRoll+0xc8>)
 80020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a8:	490a      	ldr	r1, [pc, #40]	; (80020d4 <getControlSignalRoll+0xcc>)
 80020aa:	e9c1 2300 	strd	r2, r3, [r1]
  return control_signal;
 80020ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80020b6:	eeb0 0a47 	vmov.f32	s0, s14
 80020ba:	eef0 0a67 	vmov.f32	s1, s15
 80020be:	3720      	adds	r7, #32
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bdb0      	pop	{r4, r5, r7, pc}
 80020c4:	f3af 8000 	nop.w
 80020c8:	9999999a 	.word	0x9999999a
 80020cc:	3fe99999 	.word	0x3fe99999
 80020d0:	200002c0 	.word	0x200002c0
 80020d4:	20000280 	.word	0x20000280
 80020d8:	40080000 	.word	0x40080000
 80020dc:	20000278 	.word	0x20000278

080020e0 <getControlSignalPitch>:

double getControlSignalPitch(double delta_time_in_seconds) {
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	ed87 0b00 	vstr	d0, [r7]
  double pid_p = pitchError;
 80020ea:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <getControlSignalPitch+0xc8>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double pid_d = (pitchError - pitch_last_error) / delta_time_in_seconds;
 80020f4:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <getControlSignalPitch+0xc8>)
 80020f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020fa:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <getControlSignalPitch+0xcc>)
 80020fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002100:	f7fe f866 	bl	80001d0 <__aeabi_dsub>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002110:	f7fe fb40 	bl	8000794 <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	e9c7 2304 	strd	r2, r3, [r7, #16]
  //pitch_pid_i += error * delta_time_in_seconds;

 /*if(error<3){
	  pitch_pid_i += error * delta_time_in_seconds;
   }*/
  double control_signal = (KP_roll_pitch * pid_p) + (KI_roll_pitch * pitch_pid_i) + (KD_roll_pitch * pid_d);
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <getControlSignalPitch+0xd0>)
 8002122:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002126:	f7fe fa0b 	bl	8000540 <__aeabi_dmul>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4614      	mov	r4, r2
 8002130:	461d      	mov	r5, r3
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <getControlSignalPitch+0xd4>)
 8002134:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	f7fe f9fe 	bl	8000540 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe f842 	bl	80001d4 <__adddf3>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4614      	mov	r4, r2
 8002156:	461d      	mov	r5, r3
 8002158:	a311      	add	r3, pc, #68	; (adr r3, 80021a0 <getControlSignalPitch+0xc0>)
 800215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002162:	f7fe f9ed 	bl	8000540 <__aeabi_dmul>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4620      	mov	r0, r4
 800216c:	4629      	mov	r1, r5
 800216e:	f7fe f831 	bl	80001d4 <__adddf3>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	e9c7 2302 	strd	r2, r3, [r7, #8]
  pitch_last_error = pitchError;
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <getControlSignalPitch+0xc8>)
 800217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002180:	490a      	ldr	r1, [pc, #40]	; (80021ac <getControlSignalPitch+0xcc>)
 8002182:	e9c1 2300 	strd	r2, r3, [r1]
  return control_signal;
 8002186:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800218a:	ec43 2b17 	vmov	d7, r2, r3
}
 800218e:	eeb0 0a47 	vmov.f32	s0, s14
 8002192:	eef0 0a67 	vmov.f32	s1, s15
 8002196:	3720      	adds	r7, #32
 8002198:	46bd      	mov	sp, r7
 800219a:	bdb0      	pop	{r4, r5, r7, pc}
 800219c:	f3af 8000 	nop.w
 80021a0:	9999999a 	.word	0x9999999a
 80021a4:	3fe99999 	.word	0x3fe99999
 80021a8:	200002c8 	.word	0x200002c8
 80021ac:	20000290 	.word	0x20000290
 80021b0:	40080000 	.word	0x40080000
 80021b4:	20000288 	.word	0x20000288

080021b8 <calculateMotorPowers>:

void  calculateMotorPowers(struct ReceiverCommands receiverCommands) {
 80021b8:	b084      	sub	sp, #16
 80021ba:	b5b0      	push	{r4, r5, r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80021c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // calculate orientation errors (error: difference between desired orientation and actual orientation)


	double rcs,pcs;
   rollError = receiverCommands.RollAngle - meanR;
 80021c8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80021cc:	4bc2      	ldr	r3, [pc, #776]	; (80024d8 <calculateMotorPowers+0x320>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f95d 	bl	8000490 <__aeabi_f2d>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4620      	mov	r0, r4
 80021dc:	4629      	mov	r1, r5
 80021de:	f7fd fff7 	bl	80001d0 <__aeabi_dsub>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	49bd      	ldr	r1, [pc, #756]	; (80024dc <calculateMotorPowers+0x324>)
 80021e8:	e9c1 2300 	strd	r2, r3, [r1]
   pitchError = receiverCommands.PitchAngle - meanP;
 80021ec:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80021f0:	4bbb      	ldr	r3, [pc, #748]	; (80024e0 <calculateMotorPowers+0x328>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f94b 	bl	8000490 <__aeabi_f2d>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	f7fd ffe5 	bl	80001d0 <__aeabi_dsub>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	49b6      	ldr	r1, [pc, #728]	; (80024e4 <calculateMotorPowers+0x32c>)
 800220c:	e9c1 2300 	strd	r2, r3, [r1]
 // double yawError = calculateYawError(receiverCommands, imu_values);
  double dtSec=(double)dt/168000000;
 8002210:	4bb5      	ldr	r3, [pc, #724]	; (80024e8 <calculateMotorPowers+0x330>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe f93b 	bl	8000490 <__aeabi_f2d>
 800221a:	a3a9      	add	r3, pc, #676	; (adr r3, 80024c0 <calculateMotorPowers+0x308>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	f7fe fab8 	bl	8000794 <__aeabi_ddiv>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	e9c7 2304 	strd	r2, r3, [r7, #16]

  // calculate control gains based on errors
  rcs = getControlSignalRoll(dtSec);
 800222c:	ed97 0b04 	vldr	d0, [r7, #16]
 8002230:	f7ff feea 	bl	8002008 <getControlSignalRoll>
 8002234:	ed87 0b02 	vstr	d0, [r7, #8]
  pcs= getControlSignalPitch(dtSec);
 8002238:	ed97 0b04 	vldr	d0, [r7, #16]
 800223c:	f7ff ff50 	bl	80020e0 <getControlSignalPitch>
 8002240:	ed87 0b00 	vstr	d0, [r7]

  // limit roll-pitch control signals
 /* roll_control_signal = constrain(rcs, -ROLL_PITCH_CONTROL_SIGNAL_LIMIT, ROLL_PITCH_CONTROL_SIGNAL_LIMIT);
  pitch_control_signal = constrain(pcs, -ROLL_PITCH_CONTROL_SIGNAL_LIMIT, ROLL_PITCH_CONTROL_SIGNAL_LIMIT);

  */if(k<50){
 8002244:	4ba9      	ldr	r3, [pc, #676]	; (80024ec <calculateMotorPowers+0x334>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b31      	cmp	r3, #49	; 0x31
 800224a:	dc28      	bgt.n	800229e <calculateMotorPowers+0xe6>
	  k++;
 800224c:	4ba7      	ldr	r3, [pc, #668]	; (80024ec <calculateMotorPowers+0x334>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	4aa6      	ldr	r2, [pc, #664]	; (80024ec <calculateMotorPowers+0x334>)
 8002254:	6013      	str	r3, [r2, #0]
	  toplam1+=pcs;
 8002256:	4ba6      	ldr	r3, [pc, #664]	; (80024f0 <calculateMotorPowers+0x338>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f918 	bl	8000490 <__aeabi_f2d>
 8002260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002264:	f7fd ffb6 	bl	80001d4 <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f7fe fc5e 	bl	8000b30 <__aeabi_d2f>
 8002274:	4603      	mov	r3, r0
 8002276:	4a9e      	ldr	r2, [pc, #632]	; (80024f0 <calculateMotorPowers+0x338>)
 8002278:	6013      	str	r3, [r2, #0]
	  toplam2+=rcs;
 800227a:	4b9e      	ldr	r3, [pc, #632]	; (80024f4 <calculateMotorPowers+0x33c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f906 	bl	8000490 <__aeabi_f2d>
 8002284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002288:	f7fd ffa4 	bl	80001d4 <__adddf3>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fc4c 	bl	8000b30 <__aeabi_d2f>
 8002298:	4603      	mov	r3, r0
 800229a:	4a96      	ldr	r2, [pc, #600]	; (80024f4 <calculateMotorPowers+0x33c>)
 800229c:	6013      	str	r3, [r2, #0]
  }
  if(k==50){
 800229e:	4b93      	ldr	r3, [pc, #588]	; (80024ec <calculateMotorPowers+0x334>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b32      	cmp	r3, #50	; 0x32
 80022a4:	d12a      	bne.n	80022fc <calculateMotorPowers+0x144>
	  pitch_control_signal=toplam1/50;
 80022a6:	4b92      	ldr	r3, [pc, #584]	; (80024f0 <calculateMotorPowers+0x338>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80024f8 <calculateMotorPowers+0x340>
 80022b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022b4:	ee16 0a90 	vmov	r0, s13
 80022b8:	f7fe f8ea 	bl	8000490 <__aeabi_f2d>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	498e      	ldr	r1, [pc, #568]	; (80024fc <calculateMotorPowers+0x344>)
 80022c2:	e9c1 2300 	strd	r2, r3, [r1]
	  roll_control_signal=toplam2/50;
 80022c6:	4b8b      	ldr	r3, [pc, #556]	; (80024f4 <calculateMotorPowers+0x33c>)
 80022c8:	edd3 7a00 	vldr	s15, [r3]
 80022cc:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80024f8 <calculateMotorPowers+0x340>
 80022d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022d4:	ee16 0a90 	vmov	r0, s13
 80022d8:	f7fe f8da 	bl	8000490 <__aeabi_f2d>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4987      	ldr	r1, [pc, #540]	; (8002500 <calculateMotorPowers+0x348>)
 80022e2:	e9c1 2300 	strd	r2, r3, [r1]
	  k=0;
 80022e6:	4b81      	ldr	r3, [pc, #516]	; (80024ec <calculateMotorPowers+0x334>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
	  toplam1=toplam2=0;
 80022ec:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <calculateMotorPowers+0x33c>)
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	4b7f      	ldr	r3, [pc, #508]	; (80024f4 <calculateMotorPowers+0x33c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a7d      	ldr	r2, [pc, #500]	; (80024f0 <calculateMotorPowers+0x338>)
 80022fa:	6013      	str	r3, [r2, #0]
  }
  roll_control_signal = constrain(roll_control_signal, -ROLL_PITCH_CONTROL_SIGNAL_LIMIT, ROLL_PITCH_CONTROL_SIGNAL_LIMIT);
 80022fc:	4b80      	ldr	r3, [pc, #512]	; (8002500 <calculateMotorPowers+0x348>)
 80022fe:	ed93 7b00 	vldr	d7, [r3]
 8002302:	ed9f 2b71 	vldr	d2, [pc, #452]	; 80024c8 <calculateMotorPowers+0x310>
 8002306:	ed9f 1b72 	vldr	d1, [pc, #456]	; 80024d0 <calculateMotorPowers+0x318>
 800230a:	eeb0 0a47 	vmov.f32	s0, s14
 800230e:	eef0 0a67 	vmov.f32	s1, s15
 8002312:	f7ff fe2d 	bl	8001f70 <constrain>
 8002316:	eeb0 7a40 	vmov.f32	s14, s0
 800231a:	eef0 7a60 	vmov.f32	s15, s1
 800231e:	4b78      	ldr	r3, [pc, #480]	; (8002500 <calculateMotorPowers+0x348>)
 8002320:	ed83 7b00 	vstr	d7, [r3]
  pitch_control_signal = constrain(pitch_control_signal, -ROLL_PITCH_CONTROL_SIGNAL_LIMIT, ROLL_PITCH_CONTROL_SIGNAL_LIMIT);
 8002324:	4b75      	ldr	r3, [pc, #468]	; (80024fc <calculateMotorPowers+0x344>)
 8002326:	ed93 7b00 	vldr	d7, [r3]
 800232a:	ed9f 2b67 	vldr	d2, [pc, #412]	; 80024c8 <calculateMotorPowers+0x310>
 800232e:	ed9f 1b68 	vldr	d1, [pc, #416]	; 80024d0 <calculateMotorPowers+0x318>
 8002332:	eeb0 0a47 	vmov.f32	s0, s14
 8002336:	eef0 0a67 	vmov.f32	s1, s15
 800233a:	f7ff fe19 	bl	8001f70 <constrain>
 800233e:	eeb0 7a40 	vmov.f32	s14, s0
 8002342:	eef0 7a60 	vmov.f32	s15, s1
 8002346:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <calculateMotorPowers+0x344>)
 8002348:	ed83 7b00 	vstr	d7, [r3]
  // calculate power for each motor
  if(receiverCommands.Throttle>1050){
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234e:	f240 421a 	movw	r2, #1050	; 0x41a
 8002352:	4293      	cmp	r3, r2
 8002354:	f340 80e5 	ble.w	8002522 <calculateMotorPowers+0x36a>

	   motorPowers.frontLeftMotorPower = round(receiverCommands.Throttle + roll_control_signal + pitch_control_signal - yaw_control_signal);
 8002358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe f886 	bl	800046c <__aeabi_i2d>
 8002360:	4b67      	ldr	r3, [pc, #412]	; (8002500 <calculateMotorPowers+0x348>)
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	f7fd ff35 	bl	80001d4 <__adddf3>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	4b62      	ldr	r3, [pc, #392]	; (80024fc <calculateMotorPowers+0x344>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	f7fd ff2c 	bl	80001d4 <__adddf3>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4610      	mov	r0, r2
 8002382:	4619      	mov	r1, r3
 8002384:	4b5f      	ldr	r3, [pc, #380]	; (8002504 <calculateMotorPowers+0x34c>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fd ff21 	bl	80001d0 <__aeabi_dsub>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	ec43 2b17 	vmov	d7, r2, r3
 8002396:	eeb0 0a47 	vmov.f32	s0, s14
 800239a:	eef0 0a67 	vmov.f32	s1, s15
 800239e:	f004 f95f 	bl	8006660 <round>
 80023a2:	eeb0 7a40 	vmov.f32	s14, s0
 80023a6:	eef0 7a60 	vmov.f32	s15, s1
 80023aa:	4b57      	ldr	r3, [pc, #348]	; (8002508 <calculateMotorPowers+0x350>)
 80023ac:	ed83 7b00 	vstr	d7, [r3]
	   motorPowers.frontRightMotorPower = round(receiverCommands.Throttle - roll_control_signal + pitch_control_signal + yaw_control_signal)-25;
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f85a 	bl	800046c <__aeabi_i2d>
 80023b8:	4b51      	ldr	r3, [pc, #324]	; (8002500 <calculateMotorPowers+0x348>)
 80023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023be:	f7fd ff07 	bl	80001d0 <__aeabi_dsub>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <calculateMotorPowers+0x344>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f7fd ff00 	bl	80001d4 <__adddf3>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	4b49      	ldr	r3, [pc, #292]	; (8002504 <calculateMotorPowers+0x34c>)
 80023de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e2:	f7fd fef7 	bl	80001d4 <__adddf3>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	ec43 2b17 	vmov	d7, r2, r3
 80023ee:	eeb0 0a47 	vmov.f32	s0, s14
 80023f2:	eef0 0a67 	vmov.f32	s1, s15
 80023f6:	f004 f933 	bl	8006660 <round>
 80023fa:	ec51 0b10 	vmov	r0, r1, d0
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	4b42      	ldr	r3, [pc, #264]	; (800250c <calculateMotorPowers+0x354>)
 8002404:	f7fd fee4 	bl	80001d0 <__aeabi_dsub>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	493e      	ldr	r1, [pc, #248]	; (8002508 <calculateMotorPowers+0x350>)
 800240e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	   motorPowers.rearLeftMotorPower = round(receiverCommands.Throttle + roll_control_signal - pitch_control_signal + yaw_control_signal);
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f829 	bl	800046c <__aeabi_i2d>
 800241a:	4b39      	ldr	r3, [pc, #228]	; (8002500 <calculateMotorPowers+0x348>)
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	f7fd fed8 	bl	80001d4 <__adddf3>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	4b33      	ldr	r3, [pc, #204]	; (80024fc <calculateMotorPowers+0x344>)
 800242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002432:	f7fd fecd 	bl	80001d0 <__aeabi_dsub>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <calculateMotorPowers+0x34c>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fd fec6 	bl	80001d4 <__adddf3>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	ec43 2b17 	vmov	d7, r2, r3
 8002450:	eeb0 0a47 	vmov.f32	s0, s14
 8002454:	eef0 0a67 	vmov.f32	s1, s15
 8002458:	f004 f902 	bl	8006660 <round>
 800245c:	eeb0 7a40 	vmov.f32	s14, s0
 8002460:	eef0 7a60 	vmov.f32	s15, s1
 8002464:	4b28      	ldr	r3, [pc, #160]	; (8002508 <calculateMotorPowers+0x350>)
 8002466:	ed83 7b04 	vstr	d7, [r3, #16]
	   motorPowers.rearRightMotorPower = round(receiverCommands.Throttle - roll_control_signal - pitch_control_signal - yaw_control_signal)-20;
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	4618      	mov	r0, r3
 800246e:	f7fd fffd 	bl	800046c <__aeabi_i2d>
 8002472:	4b23      	ldr	r3, [pc, #140]	; (8002500 <calculateMotorPowers+0x348>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fd feaa 	bl	80001d0 <__aeabi_dsub>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <calculateMotorPowers+0x344>)
 8002486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248a:	f7fd fea1 	bl	80001d0 <__aeabi_dsub>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4610      	mov	r0, r2
 8002494:	4619      	mov	r1, r3
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <calculateMotorPowers+0x34c>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fd fe98 	bl	80001d0 <__aeabi_dsub>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	ec43 2b17 	vmov	d7, r2, r3
 80024a8:	eeb0 0a47 	vmov.f32	s0, s14
 80024ac:	eef0 0a67 	vmov.f32	s1, s15
 80024b0:	f004 f8d6 	bl	8006660 <round>
 80024b4:	ec51 0b10 	vmov	r0, r1, d0
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	e028      	b.n	8002510 <calculateMotorPowers+0x358>
 80024be:	bf00      	nop
 80024c0:	00000000 	.word	0x00000000
 80024c4:	41a406f4 	.word	0x41a406f4
 80024c8:	00000000 	.word	0x00000000
 80024cc:	40790000 	.word	0x40790000
 80024d0:	00000000 	.word	0x00000000
 80024d4:	c0790000 	.word	0xc0790000
 80024d8:	200002d0 	.word	0x200002d0
 80024dc:	200002c0 	.word	0x200002c0
 80024e0:	200002d4 	.word	0x200002d4
 80024e4:	200002c8 	.word	0x200002c8
 80024e8:	20000190 	.word	0x20000190
 80024ec:	200002e8 	.word	0x200002e8
 80024f0:	200002ec 	.word	0x200002ec
 80024f4:	200002f0 	.word	0x200002f0
 80024f8:	42480000 	.word	0x42480000
 80024fc:	200002b0 	.word	0x200002b0
 8002500:	200002a8 	.word	0x200002a8
 8002504:	200002b8 	.word	0x200002b8
 8002508:	20000250 	.word	0x20000250
 800250c:	40390000 	.word	0x40390000
 8002510:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <calculateMotorPowers+0x3e8>)
 8002512:	f7fd fe5d 	bl	80001d0 <__aeabi_dsub>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4922      	ldr	r1, [pc, #136]	; (80025a4 <calculateMotorPowers+0x3ec>)
 800251c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8002520:	e01b      	b.n	800255a <calculateMotorPowers+0x3a2>

  }
  else{

	  motorPowers.frontLeftMotorPower = 0;
 8002522:	4920      	ldr	r1, [pc, #128]	; (80025a4 <calculateMotorPowers+0x3ec>)
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	e9c1 2300 	strd	r2, r3, [r1]

	  motorPowers.frontRightMotorPower = 0;
 8002530:	491c      	ldr	r1, [pc, #112]	; (80025a4 <calculateMotorPowers+0x3ec>)
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	e9c1 2302 	strd	r2, r3, [r1, #8]


	  motorPowers.rearLeftMotorPower = 0;
 800253e:	4919      	ldr	r1, [pc, #100]	; (80025a4 <calculateMotorPowers+0x3ec>)
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  motorPowers.rearRightMotorPower = 0;
 800254c:	4915      	ldr	r1, [pc, #84]	; (80025a4 <calculateMotorPowers+0x3ec>)
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	e9c1 2306 	strd	r2, r3, [r1, #24]
  }


 reduceMotorPowers(motorPowers);
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <calculateMotorPowers+0x3ec>)
 800255c:	ed93 4b00 	vldr	d4, [r3]
 8002560:	ed93 5b02 	vldr	d5, [r3, #8]
 8002564:	ed93 6b04 	vldr	d6, [r3, #16]
 8002568:	ed93 7b06 	vldr	d7, [r3, #24]
 800256c:	eeb0 0a44 	vmov.f32	s0, s8
 8002570:	eef0 0a64 	vmov.f32	s1, s9
 8002574:	eeb0 1a45 	vmov.f32	s2, s10
 8002578:	eef0 1a65 	vmov.f32	s3, s11
 800257c:	eeb0 2a46 	vmov.f32	s4, s12
 8002580:	eef0 2a66 	vmov.f32	s5, s13
 8002584:	eeb0 3a47 	vmov.f32	s6, s14
 8002588:	eef0 3a67 	vmov.f32	s7, s15
 800258c:	f000 f80c 	bl	80025a8 <reduceMotorPowers>

}
 8002590:	bf00      	nop
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800259a:	b004      	add	sp, #16
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40340000 	.word	0x40340000
 80025a4:	20000250 	.word	0x20000250

080025a8 <reduceMotorPowers>:



void reduceMotorPowers() { // to preserve balance if throttle limit exceeds the max value (180)
 80025a8:	b580      	push	{r7, lr}
 80025aa:	ed2d 8b02 	vpush	{d8}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
  int maxMotorPower = max(max(motorPowers.frontLeftMotorPower, motorPowers.frontRightMotorPower), max(motorPowers.rearLeftMotorPower, motorPowers.rearRightMotorPower));
 80025b2:	4b7e      	ldr	r3, [pc, #504]	; (80027ac <reduceMotorPowers+0x204>)
 80025b4:	ed93 7b00 	vldr	d7, [r3]
 80025b8:	4b7c      	ldr	r3, [pc, #496]	; (80027ac <reduceMotorPowers+0x204>)
 80025ba:	ed93 6b02 	vldr	d6, [r3, #8]
 80025be:	eeb0 1a46 	vmov.f32	s2, s12
 80025c2:	eef0 1a66 	vmov.f32	s3, s13
 80025c6:	eeb0 0a47 	vmov.f32	s0, s14
 80025ca:	eef0 0a67 	vmov.f32	s1, s15
 80025ce:	f7ff fcfb 	bl	8001fc8 <max>
 80025d2:	eeb0 8a40 	vmov.f32	s16, s0
 80025d6:	eef0 8a60 	vmov.f32	s17, s1
 80025da:	4b74      	ldr	r3, [pc, #464]	; (80027ac <reduceMotorPowers+0x204>)
 80025dc:	ed93 7b04 	vldr	d7, [r3, #16]
 80025e0:	4b72      	ldr	r3, [pc, #456]	; (80027ac <reduceMotorPowers+0x204>)
 80025e2:	ed93 6b06 	vldr	d6, [r3, #24]
 80025e6:	eeb0 1a46 	vmov.f32	s2, s12
 80025ea:	eef0 1a66 	vmov.f32	s3, s13
 80025ee:	eeb0 0a47 	vmov.f32	s0, s14
 80025f2:	eef0 0a67 	vmov.f32	s1, s15
 80025f6:	f7ff fce7 	bl	8001fc8 <max>
 80025fa:	eeb0 7a40 	vmov.f32	s14, s0
 80025fe:	eef0 7a60 	vmov.f32	s15, s1
 8002602:	eeb0 1a47 	vmov.f32	s2, s14
 8002606:	eef0 1a67 	vmov.f32	s3, s15
 800260a:	eeb0 0a48 	vmov.f32	s0, s16
 800260e:	eef0 0a68 	vmov.f32	s1, s17
 8002612:	f7ff fcd9 	bl	8001fc8 <max>
 8002616:	ec53 2b10 	vmov	r2, r3, d0
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	f7fe fa3f 	bl	8000aa0 <__aeabi_d2iz>
 8002622:	4603      	mov	r3, r0
 8002624:	60fb      	str	r3, [r7, #12]
  if (maxMotorPower > 2000) {
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800262c:	dd6b      	ble.n	8002706 <reduceMotorPowers+0x15e>
    double power_reduction_rate = (double)maxMotorPower / (double)2000;
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7fd ff1c 	bl	800046c <__aeabi_i2d>
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <reduceMotorPowers+0x208>)
 800263a:	f7fe f8ab 	bl	8000794 <__aeabi_ddiv>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	e9c7 2300 	strd	r2, r3, [r7]
    motorPowers.frontLeftMotorPower = round((double)motorPowers.frontLeftMotorPower / power_reduction_rate);
 8002646:	4b59      	ldr	r3, [pc, #356]	; (80027ac <reduceMotorPowers+0x204>)
 8002648:	e9d3 0100 	ldrd	r0, r1, [r3]
 800264c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002650:	f7fe f8a0 	bl	8000794 <__aeabi_ddiv>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	ec43 2b17 	vmov	d7, r2, r3
 800265c:	eeb0 0a47 	vmov.f32	s0, s14
 8002660:	eef0 0a67 	vmov.f32	s1, s15
 8002664:	f003 fffc 	bl	8006660 <round>
 8002668:	eeb0 7a40 	vmov.f32	s14, s0
 800266c:	eef0 7a60 	vmov.f32	s15, s1
 8002670:	4b4e      	ldr	r3, [pc, #312]	; (80027ac <reduceMotorPowers+0x204>)
 8002672:	ed83 7b00 	vstr	d7, [r3]
    motorPowers.frontRightMotorPower = round((double)motorPowers.frontRightMotorPower / power_reduction_rate);
 8002676:	4b4d      	ldr	r3, [pc, #308]	; (80027ac <reduceMotorPowers+0x204>)
 8002678:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800267c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002680:	f7fe f888 	bl	8000794 <__aeabi_ddiv>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	ec43 2b17 	vmov	d7, r2, r3
 800268c:	eeb0 0a47 	vmov.f32	s0, s14
 8002690:	eef0 0a67 	vmov.f32	s1, s15
 8002694:	f003 ffe4 	bl	8006660 <round>
 8002698:	eeb0 7a40 	vmov.f32	s14, s0
 800269c:	eef0 7a60 	vmov.f32	s15, s1
 80026a0:	4b42      	ldr	r3, [pc, #264]	; (80027ac <reduceMotorPowers+0x204>)
 80026a2:	ed83 7b02 	vstr	d7, [r3, #8]
    motorPowers.rearLeftMotorPower = round((double)motorPowers.rearLeftMotorPower / power_reduction_rate);
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <reduceMotorPowers+0x204>)
 80026a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80026ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026b0:	f7fe f870 	bl	8000794 <__aeabi_ddiv>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	ec43 2b17 	vmov	d7, r2, r3
 80026bc:	eeb0 0a47 	vmov.f32	s0, s14
 80026c0:	eef0 0a67 	vmov.f32	s1, s15
 80026c4:	f003 ffcc 	bl	8006660 <round>
 80026c8:	eeb0 7a40 	vmov.f32	s14, s0
 80026cc:	eef0 7a60 	vmov.f32	s15, s1
 80026d0:	4b36      	ldr	r3, [pc, #216]	; (80027ac <reduceMotorPowers+0x204>)
 80026d2:	ed83 7b04 	vstr	d7, [r3, #16]
    motorPowers.rearRightMotorPower = round((double)motorPowers.rearRightMotorPower / power_reduction_rate);
 80026d6:	4b35      	ldr	r3, [pc, #212]	; (80027ac <reduceMotorPowers+0x204>)
 80026d8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80026dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026e0:	f7fe f858 	bl	8000794 <__aeabi_ddiv>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	ec43 2b17 	vmov	d7, r2, r3
 80026ec:	eeb0 0a47 	vmov.f32	s0, s14
 80026f0:	eef0 0a67 	vmov.f32	s1, s15
 80026f4:	f003 ffb4 	bl	8006660 <round>
 80026f8:	eeb0 7a40 	vmov.f32	s14, s0
 80026fc:	eef0 7a60 	vmov.f32	s15, s1
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <reduceMotorPowers+0x204>)
 8002702:	ed83 7b06 	vstr	d7, [r3, #24]
  }



  if(motorPowers.frontLeftMotorPower==0 || motorPowers.frontRightMotorPower == 0 || motorPowers.rearLeftMotorPower==0 || motorPowers.rearRightMotorPower==0){
 8002706:	4b29      	ldr	r3, [pc, #164]	; (80027ac <reduceMotorPowers+0x204>)
 8002708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	f7fe f97c 	bl	8000a10 <__aeabi_dcmpeq>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d124      	bne.n	8002768 <reduceMotorPowers+0x1c0>
 800271e:	4b23      	ldr	r3, [pc, #140]	; (80027ac <reduceMotorPowers+0x204>)
 8002720:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	f7fe f970 	bl	8000a10 <__aeabi_dcmpeq>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d118      	bne.n	8002768 <reduceMotorPowers+0x1c0>
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <reduceMotorPowers+0x204>)
 8002738:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	f7fe f964 	bl	8000a10 <__aeabi_dcmpeq>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10c      	bne.n	8002768 <reduceMotorPowers+0x1c0>
 800274e:	4b17      	ldr	r3, [pc, #92]	; (80027ac <reduceMotorPowers+0x204>)
 8002750:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	f7fe f958 	bl	8000a10 <__aeabi_dcmpeq>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d100      	bne.n	8002768 <reduceMotorPowers+0x1c0>
	  motorPowers.frontRightMotorPower=0;
	  motorPowers.rearRightMotorPower=0;

  }

  return motorPowers;
 8002766:	e01c      	b.n	80027a2 <reduceMotorPowers+0x1fa>
	  motorPowers.frontLeftMotorPower=0;
 8002768:	4910      	ldr	r1, [pc, #64]	; (80027ac <reduceMotorPowers+0x204>)
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	e9c1 2300 	strd	r2, r3, [r1]
	  motorPowers.rearLeftMotorPower=0;
 8002776:	490d      	ldr	r1, [pc, #52]	; (80027ac <reduceMotorPowers+0x204>)
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  motorPowers.frontRightMotorPower=0;
 8002784:	4909      	ldr	r1, [pc, #36]	; (80027ac <reduceMotorPowers+0x204>)
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  motorPowers.rearRightMotorPower=0;
 8002792:	4906      	ldr	r1, [pc, #24]	; (80027ac <reduceMotorPowers+0x204>)
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9c1 2306 	strd	r2, r3, [r1, #24]
  return motorPowers;
 80027a0:	bf00      	nop
}
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	ecbd 8b02 	vpop	{d8}
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000250 	.word	0x20000250
 80027b0:	409f4000 	.word	0x409f4000

080027b4 <resetPidVariables>:

void resetPidVariables() {
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  roll_pid_i = 0;
 80027b8:	4917      	ldr	r1, [pc, #92]	; (8002818 <resetPidVariables+0x64>)
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9c1 2300 	strd	r2, r3, [r1]
  roll_last_error = 0;
 80027c6:	4915      	ldr	r1, [pc, #84]	; (800281c <resetPidVariables+0x68>)
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9c1 2300 	strd	r2, r3, [r1]
  pitch_pid_i = 0;
 80027d4:	4912      	ldr	r1, [pc, #72]	; (8002820 <resetPidVariables+0x6c>)
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9c1 2300 	strd	r2, r3, [r1]
  pitch_last_error = 0;
 80027e2:	4910      	ldr	r1, [pc, #64]	; (8002824 <resetPidVariables+0x70>)
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	e9c1 2300 	strd	r2, r3, [r1]
  yaw_pid_i = 0;
 80027f0:	490d      	ldr	r1, [pc, #52]	; (8002828 <resetPidVariables+0x74>)
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9c1 2300 	strd	r2, r3, [r1]
  yaw_last_error = 0;
 80027fe:	490b      	ldr	r1, [pc, #44]	; (800282c <resetPidVariables+0x78>)
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	e9c1 2300 	strd	r2, r3, [r1]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000278 	.word	0x20000278
 800281c:	20000280 	.word	0x20000280
 8002820:	20000288 	.word	0x20000288
 8002824:	20000290 	.word	0x20000290
 8002828:	20000298 	.word	0x20000298
 800282c:	200002a0 	.word	0x200002a0

08002830 <mapAngleP>:
volatile uint32_t pre_ch1 = 0, ch1 = 0, pre_ch2 = 0, ch2 = 0, pre_ch3 = 0, ch3 = 0, pre_ch4 = 0, ch4 = 0;
extern struct ReceiverCommands _ReceiverCommands;

float newch1,newch2,newch4;

void mapAngleP(){
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

	newch2=(float)(ch2-TX_MIN)*(MAX_TILT_ANGLE-MIN_TILT_ANGLE)/(TX_MAX-TX_MIN)+MIN_TILT_ANGLE;
 8002834:	4b0d      	ldr	r3, [pc, #52]	; (800286c <mapAngleP+0x3c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800283c:	ee07 3a90 	vmov	s15, r3
 8002840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002844:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002870 <mapAngleP+0x40>
 8002848:	ee27 7a87 	vmul.f32	s14, s15, s14
 800284c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002874 <mapAngleP+0x44>
 8002850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002854:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002858:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <mapAngleP+0x48>)
 800285e:	edc3 7a00 	vstr	s15, [r3]

}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	20000318 	.word	0x20000318
 8002870:	42200000 	.word	0x42200000
 8002874:	447a0000 	.word	0x447a0000
 8002878:	20000328 	.word	0x20000328

0800287c <mapAngleR>:
void mapAngleR(){
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0

	newch1=(float)(ch1-TX_MIN)*(MAX_TILT_ANGLE-MIN_TILT_ANGLE)/(TX_MAX-TX_MIN)+MIN_TILT_ANGLE;
 8002880:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <mapAngleR+0x3c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002890:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80028bc <mapAngleR+0x40>
 8002894:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002898:	eddf 6a09 	vldr	s13, [pc, #36]	; 80028c0 <mapAngleR+0x44>
 800289c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028a0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80028a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <mapAngleR+0x48>)
 80028aa:	edc3 7a00 	vstr	s15, [r3]

}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	20000310 	.word	0x20000310
 80028bc:	42200000 	.word	0x42200000
 80028c0:	447a0000 	.word	0x447a0000
 80028c4:	20000324 	.word	0x20000324

080028c8 <mapThrottle>:
void mapThrottle(){
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0

	newch4=(float)(ch3-TX_MIN)*(THROTTLE_MAX-1000)/(TX_MAX-TX_MIN)+1000;
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <mapThrottle+0x3c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80028d4:	ee07 3a90 	vmov	s15, r3
 80028d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028dc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002908 <mapThrottle+0x40>
 80028e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028e4:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002908 <mapThrottle+0x40>
 80028e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028ec:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002908 <mapThrottle+0x40>
 80028f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <mapThrottle+0x44>)
 80028f6:	edc3 7a00 	vstr	s15, [r3]

}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	20000320 	.word	0x20000320
 8002908:	447a0000 	.word	0x447a0000
 800290c:	2000032c 	.word	0x2000032c

08002910 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)  // interrupt TIM2 biriminden geliyorsa gir
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002920:	f040 80c0 	bne.w	8002aa4 <HAL_TIM_IC_CaptureCallback+0x194>
	{
		switch(htim->Channel) // aktif kanal hamgisiyse, o kanalın case'ine git
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7f1b      	ldrb	r3, [r3, #28]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d07f      	beq.n	8002a2c <HAL_TIM_IC_CaptureCallback+0x11c>
 800292c:	2b04      	cmp	r3, #4
 800292e:	f300 80bb 	bgt.w	8002aa8 <HAL_TIM_IC_CaptureCallback+0x198>
 8002932:	2b01      	cmp	r3, #1
 8002934:	d002      	beq.n	800293c <HAL_TIM_IC_CaptureCallback+0x2c>
 8002936:	2b02      	cmp	r3, #2
 8002938:	d03c      	beq.n	80029b4 <HAL_TIM_IC_CaptureCallback+0xa4>
				TIM2->CCER &= ~TIM_CCER_CC3P;
			}
			break;

		default:
			break;
 800293a:	e0b5      	b.n	8002aa8 <HAL_TIM_IC_CaptureCallback+0x198>
			if((TIM2->CCER & TIM_CCER_CC1P)==0)
 800293c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10d      	bne.n	8002966 <HAL_TIM_IC_CaptureCallback+0x56>
				ch1_rising = TIM2->CCR1;
 800294a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	4a83      	ldr	r2, [pc, #524]	; (8002b60 <HAL_TIM_IC_CaptureCallback+0x250>)
 8002952:	6013      	str	r3, [r2, #0]
				TIM2->CCER |= TIM_CCER_CC1P;
 8002954:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800295e:	f043 0302 	orr.w	r3, r3, #2
 8002962:	6213      	str	r3, [r2, #32]
			break;
 8002964:	e0a1      	b.n	8002aaa <HAL_TIM_IC_CaptureCallback+0x19a>
				ch1_falling = TIM2->CCR1;
 8002966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800296a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296c:	4a7d      	ldr	r2, [pc, #500]	; (8002b64 <HAL_TIM_IC_CaptureCallback+0x254>)
 800296e:	6013      	str	r3, [r2, #0]
				pre_ch1 = ch1_falling - ch1_rising;
 8002970:	4b7c      	ldr	r3, [pc, #496]	; (8002b64 <HAL_TIM_IC_CaptureCallback+0x254>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b7a      	ldr	r3, [pc, #488]	; (8002b60 <HAL_TIM_IC_CaptureCallback+0x250>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	4a7b      	ldr	r2, [pc, #492]	; (8002b68 <HAL_TIM_IC_CaptureCallback+0x258>)
 800297c:	6013      	str	r3, [r2, #0]
				if(pre_ch1 < 0)pre_ch1 += 0xFFFF;
 800297e:	4b7a      	ldr	r3, [pc, #488]	; (8002b68 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002980:	681b      	ldr	r3, [r3, #0]
				if(pre_ch1 < 2000 && pre_ch1 > 1000){
 8002982:	4b79      	ldr	r3, [pc, #484]	; (8002b68 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800298a:	d20a      	bcs.n	80029a2 <HAL_TIM_IC_CaptureCallback+0x92>
 800298c:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <HAL_TIM_IC_CaptureCallback+0x258>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002994:	d905      	bls.n	80029a2 <HAL_TIM_IC_CaptureCallback+0x92>
					ch1=pre_ch1;
 8002996:	4b74      	ldr	r3, [pc, #464]	; (8002b68 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a74      	ldr	r2, [pc, #464]	; (8002b6c <HAL_TIM_IC_CaptureCallback+0x25c>)
 800299c:	6013      	str	r3, [r2, #0]
					mapAngleR();
 800299e:	f7ff ff6d 	bl	800287c <mapAngleR>
				TIM2->CCER &= ~TIM_CCER_CC1P;
 80029a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029ac:	f023 0302 	bic.w	r3, r3, #2
 80029b0:	6213      	str	r3, [r2, #32]
			break;
 80029b2:	e07a      	b.n	8002aaa <HAL_TIM_IC_CaptureCallback+0x19a>
			if((TIM2->CCER & TIM_CCER_CC2P)==0)
 80029b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10d      	bne.n	80029de <HAL_TIM_IC_CaptureCallback+0xce>
				ch2_rising = TIM2->CCR2;
 80029c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	4a69      	ldr	r2, [pc, #420]	; (8002b70 <HAL_TIM_IC_CaptureCallback+0x260>)
 80029ca:	6013      	str	r3, [r2, #0]
				TIM2->CCER |= TIM_CCER_CC2P;
 80029cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029d6:	f043 0320 	orr.w	r3, r3, #32
 80029da:	6213      	str	r3, [r2, #32]
			break;
 80029dc:	e065      	b.n	8002aaa <HAL_TIM_IC_CaptureCallback+0x19a>
				ch2_falling = TIM2->CCR2;
 80029de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	4a63      	ldr	r2, [pc, #396]	; (8002b74 <HAL_TIM_IC_CaptureCallback+0x264>)
 80029e6:	6013      	str	r3, [r2, #0]
				pre_ch2 = ch2_falling - ch2_rising;
 80029e8:	4b62      	ldr	r3, [pc, #392]	; (8002b74 <HAL_TIM_IC_CaptureCallback+0x264>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b60      	ldr	r3, [pc, #384]	; (8002b70 <HAL_TIM_IC_CaptureCallback+0x260>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	4a61      	ldr	r2, [pc, #388]	; (8002b78 <HAL_TIM_IC_CaptureCallback+0x268>)
 80029f4:	6013      	str	r3, [r2, #0]
				if(pre_ch2 < 0)pre_ch2 += 0xFFFF;
 80029f6:	4b60      	ldr	r3, [pc, #384]	; (8002b78 <HAL_TIM_IC_CaptureCallback+0x268>)
 80029f8:	681b      	ldr	r3, [r3, #0]
				if(pre_ch2 < 2000 &&  pre_ch2 > 1000){
 80029fa:	4b5f      	ldr	r3, [pc, #380]	; (8002b78 <HAL_TIM_IC_CaptureCallback+0x268>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a02:	d20a      	bcs.n	8002a1a <HAL_TIM_IC_CaptureCallback+0x10a>
 8002a04:	4b5c      	ldr	r3, [pc, #368]	; (8002b78 <HAL_TIM_IC_CaptureCallback+0x268>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a0c:	d905      	bls.n	8002a1a <HAL_TIM_IC_CaptureCallback+0x10a>
					ch2=pre_ch2;
 8002a0e:	4b5a      	ldr	r3, [pc, #360]	; (8002b78 <HAL_TIM_IC_CaptureCallback+0x268>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a5a      	ldr	r2, [pc, #360]	; (8002b7c <HAL_TIM_IC_CaptureCallback+0x26c>)
 8002a14:	6013      	str	r3, [r2, #0]
					mapAngleP();
 8002a16:	f7ff ff0b 	bl	8002830 <mapAngleP>
				TIM2->CCER &= ~TIM_CCER_CC2P;
 8002a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a24:	f023 0320 	bic.w	r3, r3, #32
 8002a28:	6213      	str	r3, [r2, #32]
			break;
 8002a2a:	e03e      	b.n	8002aaa <HAL_TIM_IC_CaptureCallback+0x19a>
			if((TIM2->CCER & TIM_CCER_CC3P)==0)
 8002a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10d      	bne.n	8002a56 <HAL_TIM_IC_CaptureCallback+0x146>
				ch3_rising = TIM2->CCR3;
 8002a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	4a4f      	ldr	r2, [pc, #316]	; (8002b80 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002a42:	6013      	str	r3, [r2, #0]
				TIM2->CCER |= TIM_CCER_CC3P;
 8002a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a52:	6213      	str	r3, [r2, #32]
			break;
 8002a54:	e029      	b.n	8002aaa <HAL_TIM_IC_CaptureCallback+0x19a>
				ch3_falling = TIM2->CCR3;
 8002a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	4a49      	ldr	r2, [pc, #292]	; (8002b84 <HAL_TIM_IC_CaptureCallback+0x274>)
 8002a5e:	6013      	str	r3, [r2, #0]
				pre_ch3 = ch3_falling - ch3_rising;
 8002a60:	4b48      	ldr	r3, [pc, #288]	; (8002b84 <HAL_TIM_IC_CaptureCallback+0x274>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b46      	ldr	r3, [pc, #280]	; (8002b80 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	4a47      	ldr	r2, [pc, #284]	; (8002b88 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002a6c:	6013      	str	r3, [r2, #0]
				if(pre_ch3 < 0)pre_ch3 += 0xFFFF;
 8002a6e:	4b46      	ldr	r3, [pc, #280]	; (8002b88 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002a70:	681b      	ldr	r3, [r3, #0]
				if(pre_ch3 < 2000 && pre_ch3 > 1000){
 8002a72:	4b45      	ldr	r3, [pc, #276]	; (8002b88 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a7a:	d20a      	bcs.n	8002a92 <HAL_TIM_IC_CaptureCallback+0x182>
 8002a7c:	4b42      	ldr	r3, [pc, #264]	; (8002b88 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a84:	d905      	bls.n	8002a92 <HAL_TIM_IC_CaptureCallback+0x182>
					ch3=pre_ch3;
 8002a86:	4b40      	ldr	r3, [pc, #256]	; (8002b88 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a40      	ldr	r2, [pc, #256]	; (8002b8c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002a8c:	6013      	str	r3, [r2, #0]
					mapThrottle();
 8002a8e:	f7ff ff1b 	bl	80028c8 <mapThrottle>
				TIM2->CCER &= ~TIM_CCER_CC3P;
 8002a92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aa0:	6213      	str	r3, [r2, #32]
			break;
 8002aa2:	e002      	b.n	8002aaa <HAL_TIM_IC_CaptureCallback+0x19a>
		}
	}
 8002aa4:	bf00      	nop
 8002aa6:	e000      	b.n	8002aaa <HAL_TIM_IC_CaptureCallback+0x19a>
			break;
 8002aa8:	bf00      	nop
	if(htim->Instance == TIM3)  // interrupt TIM2 biriminden geliyorsa gir
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a38      	ldr	r2, [pc, #224]	; (8002b90 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d133      	bne.n	8002b1c <HAL_TIM_IC_CaptureCallback+0x20c>
		{

				if((TIM3->CCER & TIM_CCER_CC4P)==0) // kanalin aktif olmasi kesmenin oradan gelecegi anlamina gelmez/gpio pinini kontrol et
 8002ab4:	4b36      	ldr	r3, [pc, #216]	; (8002b90 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <HAL_TIM_IC_CaptureCallback+0x1c6>
				{
					ch1_rising = TIM3->CCR4; // yukselen kenar degerini kaydet
 8002ac0:	4b33      	ldr	r3, [pc, #204]	; (8002b90 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_TIM_IC_CaptureCallback+0x250>)
 8002ac6:	6013      	str	r3, [r2, #0]
					TIM3->CCER |= TIM_CCER_CC4P; // polariteyi düsen kenar olarak degistir
 8002ac8:	4b31      	ldr	r3, [pc, #196]	; (8002b90 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4a30      	ldr	r2, [pc, #192]	; (8002b90 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002ace:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ad2:	6213      	str	r3, [r2, #32]
 8002ad4:	e022      	b.n	8002b1c <HAL_TIM_IC_CaptureCallback+0x20c>
				}

				else
				{
					ch1_falling = TIM3->CCR4;
 8002ad6:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a22      	ldr	r2, [pc, #136]	; (8002b64 <HAL_TIM_IC_CaptureCallback+0x254>)
 8002adc:	6013      	str	r3, [r2, #0]
					pre_ch1 = ch1_falling - ch1_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 8002ade:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_TIM_IC_CaptureCallback+0x254>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b1f      	ldr	r3, [pc, #124]	; (8002b60 <HAL_TIM_IC_CaptureCallback+0x250>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	4a1f      	ldr	r2, [pc, #124]	; (8002b68 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002aea:	6013      	str	r3, [r2, #0]
					if(pre_ch1 < 0)pre_ch1 += 0xFFFF;// eger sonuc negatifse taban tumleme yap
 8002aec:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002aee:	681b      	ldr	r3, [r3, #0]
					if(pre_ch1 < 2000 && pre_ch1 > 1000){
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002af8:	d20a      	bcs.n	8002b10 <HAL_TIM_IC_CaptureCallback+0x200>
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b02:	d905      	bls.n	8002b10 <HAL_TIM_IC_CaptureCallback+0x200>
						ch1=pre_ch1;
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002b0a:	6013      	str	r3, [r2, #0]
						mapAngleR();
 8002b0c:	f7ff feb6 	bl	800287c <mapAngleR>
					}
					TIM3->CCER &= ~TIM_CCER_CC4P; // polariteyi yukselen kenar olarak ayarla
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4a1e      	ldr	r2, [pc, #120]	; (8002b90 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b1a:	6213      	str	r3, [r2, #32]



}

	_ReceiverCommands.Throttle=newch4;
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_TIM_IC_CaptureCallback+0x284>)
 8002b1e:	edd3 7a00 	vldr	s15, [r3]
 8002b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b26:	ee17 2a90 	vmov	r2, s15
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_TIM_IC_CaptureCallback+0x288>)
 8002b2c:	605a      	str	r2, [r3, #4]
	_ReceiverCommands.PitchAngle=newch2;
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fcac 	bl	8000490 <__aeabi_f2d>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4916      	ldr	r1, [pc, #88]	; (8002b98 <HAL_TIM_IC_CaptureCallback+0x288>)
 8002b3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_ReceiverCommands.RollAngle=newch1;
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <HAL_TIM_IC_CaptureCallback+0x290>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fca2 	bl	8000490 <__aeabi_f2d>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4911      	ldr	r1, [pc, #68]	; (8002b98 <HAL_TIM_IC_CaptureCallback+0x288>)
 8002b52:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200002f4 	.word	0x200002f4
 8002b64:	20000300 	.word	0x20000300
 8002b68:	2000030c 	.word	0x2000030c
 8002b6c:	20000310 	.word	0x20000310
 8002b70:	200002f8 	.word	0x200002f8
 8002b74:	20000304 	.word	0x20000304
 8002b78:	20000314 	.word	0x20000314
 8002b7c:	20000318 	.word	0x20000318
 8002b80:	200002fc 	.word	0x200002fc
 8002b84:	20000308 	.word	0x20000308
 8002b88:	2000031c 	.word	0x2000031c
 8002b8c:	20000320 	.word	0x20000320
 8002b90:	40000400 	.word	0x40000400
 8002b94:	2000032c 	.word	0x2000032c
 8002b98:	20000170 	.word	0x20000170
 8002b9c:	20000328 	.word	0x20000328
 8002ba0:	20000324 	.word	0x20000324

08002ba4 <Receiver_Init>:
void Receiver_Init(){
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4806      	ldr	r0, [pc, #24]	; (8002bc4 <Receiver_Init+0x20>)
 8002bac:	f002 fb18 	bl	80051e0 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8002bb0:	2104      	movs	r1, #4
 8002bb2:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <Receiver_Init+0x20>)
 8002bb4:	f002 fb14 	bl	80051e0 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8002bb8:	2108      	movs	r1, #8
 8002bba:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <Receiver_Init+0x20>)
 8002bbc:	f002 fb10 	bl	80051e0 <HAL_TIM_IC_Start_IT>
	  //HAL_TIM_IC_Start_IT(&hTIM2, TIM_CHANNEL_4);

}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000128 	.word	0x20000128

08002bc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_MspInit+0x4c>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_MspInit+0x4c>)
 8002bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <HAL_MspInit+0x4c>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <HAL_MspInit+0x4c>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	4a08      	ldr	r2, [pc, #32]	; (8002c14 <HAL_MspInit+0x4c>)
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_MspInit+0x4c>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c06:	2007      	movs	r0, #7
 8002c08:	f000 fae4 	bl	80031d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800

08002c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a29      	ldr	r2, [pc, #164]	; (8002cdc <HAL_I2C_MspInit+0xc4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d14b      	bne.n	8002cd2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <HAL_I2C_MspInit+0xc8>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a27      	ldr	r2, [pc, #156]	; (8002ce0 <HAL_I2C_MspInit+0xc8>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_I2C_MspInit+0xc8>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_I2C_MspInit+0xc8>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	4a20      	ldr	r2, [pc, #128]	; (8002ce0 <HAL_I2C_MspInit+0xc8>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6313      	str	r3, [r2, #48]	; 0x30
 8002c66:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <HAL_I2C_MspInit+0xc8>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = MPU_SDA_Pin;
 8002c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c78:	2312      	movs	r3, #18
 8002c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c84:	2304      	movs	r3, #4
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MPU_SDA_GPIO_Port, &GPIO_InitStruct);
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4815      	ldr	r0, [pc, #84]	; (8002ce4 <HAL_I2C_MspInit+0xcc>)
 8002c90:	f000 fae2 	bl	8003258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MPU_SCL_Pin;
 8002c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c9a:	2312      	movs	r3, #18
 8002c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MPU_SCL_GPIO_Port, &GPIO_InitStruct);
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	4619      	mov	r1, r3
 8002cb0:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <HAL_I2C_MspInit+0xd0>)
 8002cb2:	f000 fad1 	bl	8003258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_I2C_MspInit+0xc8>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <HAL_I2C_MspInit+0xc8>)
 8002cc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_I2C_MspInit+0xc8>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002cd2:	bf00      	nop
 8002cd4:	3728      	adds	r7, #40	; 0x28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40005c00 	.word	0x40005c00
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020800 	.word	0x40020800
 8002ce8:	40020000 	.word	0x40020000

08002cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <HAL_TIM_Base_MspInit+0xbc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	4b26      	ldr	r3, [pc, #152]	; (8002dac <HAL_TIM_Base_MspInit+0xc0>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4a25      	ldr	r2, [pc, #148]	; (8002dac <HAL_TIM_Base_MspInit+0xc0>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	4b23      	ldr	r3, [pc, #140]	; (8002dac <HAL_TIM_Base_MspInit+0xc0>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d2a:	e039      	b.n	8002da0 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d34:	d134      	bne.n	8002da0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <HAL_TIM_Base_MspInit+0xc0>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a1b      	ldr	r2, [pc, #108]	; (8002dac <HAL_TIM_Base_MspInit+0xc0>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_TIM_Base_MspInit+0xc0>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_TIM_Base_MspInit+0xc0>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_TIM_Base_MspInit+0xc0>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_TIM_Base_MspInit+0xc0>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = pitch_Pin|throttle_Pin|roll_Pin;
 8002d6e:	f248 0306 	movw	r3, #32774	; 0x8006
 8002d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d80:	2301      	movs	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4809      	ldr	r0, [pc, #36]	; (8002db0 <HAL_TIM_Base_MspInit+0xc4>)
 8002d8c:	f000 fa64 	bl	8003258 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2100      	movs	r1, #0
 8002d94:	201c      	movs	r0, #28
 8002d96:	f000 fa28 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d9a:	201c      	movs	r0, #28
 8002d9c:	f000 fa41 	bl	8003222 <HAL_NVIC_EnableIRQ>
}
 8002da0:	bf00      	nop
 8002da2:	3728      	adds	r7, #40	; 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020000 	.word	0x40020000

08002db4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	f107 030c 	add.w	r3, r7, #12
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <HAL_TIM_MspPostInit+0x68>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d11e      	bne.n	8002e14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <HAL_TIM_MspPostInit+0x6c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a10      	ldr	r2, [pc, #64]	; (8002e20 <HAL_TIM_MspPostInit+0x6c>)
 8002de0:	f043 0310 	orr.w	r3, r3, #16
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <HAL_TIM_MspPostInit+0x6c>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002df2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002df6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e04:	2301      	movs	r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e08:	f107 030c 	add.w	r3, r7, #12
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4805      	ldr	r0, [pc, #20]	; (8002e24 <HAL_TIM_MspPostInit+0x70>)
 8002e10:	f000 fa22 	bl	8003258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e14:	bf00      	nop
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40010000 	.word	0x40010000
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40021000 	.word	0x40021000

08002e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e2c:	e7fe      	b.n	8002e2c <NMI_Handler+0x4>

08002e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e32:	e7fe      	b.n	8002e32 <HardFault_Handler+0x4>

08002e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <MemManage_Handler+0x4>

08002e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <BusFault_Handler+0x4>

08002e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <UsageFault_Handler+0x4>

08002e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e74:	f000 f89a 	bl	8002fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <TIM2_IRQHandler+0x10>)
 8002e82:	f002 fad5 	bl	8005430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000128 	.word	0x20000128

08002e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <SystemInit+0x20>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <SystemInit+0x20>)
 8002e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eb8:	480d      	ldr	r0, [pc, #52]	; (8002ef0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002eba:	490e      	ldr	r1, [pc, #56]	; (8002ef4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ebc:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec0:	e002      	b.n	8002ec8 <LoopCopyDataInit>

08002ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec6:	3304      	adds	r3, #4

08002ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ecc:	d3f9      	bcc.n	8002ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ece:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ed0:	4c0b      	ldr	r4, [pc, #44]	; (8002f00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed4:	e001      	b.n	8002eda <LoopFillZerobss>

08002ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed8:	3204      	adds	r2, #4

08002eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002edc:	d3fb      	bcc.n	8002ed6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ede:	f7ff ffd7 	bl	8002e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ee2:	f003 fb91 	bl	8006608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ee6:	f7fe f859 	bl	8000f9c <main>
  bx  lr    
 8002eea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ef8:	08008008 	.word	0x08008008
  ldr r2, =_sbss
 8002efc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002f00:	20000334 	.word	0x20000334

08002f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f04:	e7fe      	b.n	8002f04 <ADC_IRQHandler>
	...

08002f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <HAL_Init+0x40>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <HAL_Init+0x40>)
 8002f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_Init+0x40>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <HAL_Init+0x40>)
 8002f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f24:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <HAL_Init+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <HAL_Init+0x40>)
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f30:	2003      	movs	r0, #3
 8002f32:	f000 f94f 	bl	80031d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f36:	2000      	movs	r0, #0
 8002f38:	f000 f808 	bl	8002f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f3c:	f7ff fe44 	bl	8002bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023c00 	.word	0x40023c00

08002f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f54:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_InitTick+0x54>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_InitTick+0x58>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f967 	bl	800323e <HAL_SYSTICK_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00e      	b.n	8002f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b0f      	cmp	r3, #15
 8002f7e:	d80a      	bhi.n	8002f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f80:	2200      	movs	r2, #0
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295
 8002f88:	f000 f92f 	bl	80031ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f8c:	4a06      	ldr	r2, [pc, #24]	; (8002fa8 <HAL_InitTick+0x5c>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e000      	b.n	8002f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	20000008 	.word	0x20000008
 8002fa8:	20000004 	.word	0x20000004

08002fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_IncTick+0x20>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000008 	.word	0x20000008
 8002fd0:	20000330 	.word	0x20000330

08002fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_GetTick+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000330 	.word	0x20000330

08002fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff4:	f7ff ffee 	bl	8002fd4 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d005      	beq.n	8003012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HAL_Delay+0x44>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003012:	bf00      	nop
 8003014:	f7ff ffde 	bl	8002fd4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	429a      	cmp	r2, r3
 8003022:	d8f7      	bhi.n	8003014 <HAL_Delay+0x28>
  {
  }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000008 	.word	0x20000008

08003034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003050:	4013      	ands	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800305c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003066:	4a04      	ldr	r2, [pc, #16]	; (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	60d3      	str	r3, [r2, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <__NVIC_GetPriorityGrouping+0x18>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f003 0307 	and.w	r3, r3, #7
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db0b      	blt.n	80030c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	4907      	ldr	r1, [pc, #28]	; (80030d0 <__NVIC_EnableIRQ+0x38>)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2001      	movs	r0, #1
 80030ba:	fa00 f202 	lsl.w	r2, r0, r2
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000e100 	.word	0xe000e100

080030d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	db0a      	blt.n	80030fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	490c      	ldr	r1, [pc, #48]	; (8003120 <__NVIC_SetPriority+0x4c>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	0112      	lsls	r2, r2, #4
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	440b      	add	r3, r1
 80030f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030fc:	e00a      	b.n	8003114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4908      	ldr	r1, [pc, #32]	; (8003124 <__NVIC_SetPriority+0x50>)
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	3b04      	subs	r3, #4
 800310c:	0112      	lsls	r2, r2, #4
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	440b      	add	r3, r1
 8003112:	761a      	strb	r2, [r3, #24]
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000e100 	.word	0xe000e100
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003128:	b480      	push	{r7}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f1c3 0307 	rsb	r3, r3, #7
 8003142:	2b04      	cmp	r3, #4
 8003144:	bf28      	it	cs
 8003146:	2304      	movcs	r3, #4
 8003148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3304      	adds	r3, #4
 800314e:	2b06      	cmp	r3, #6
 8003150:	d902      	bls.n	8003158 <NVIC_EncodePriority+0x30>
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3b03      	subs	r3, #3
 8003156:	e000      	b.n	800315a <NVIC_EncodePriority+0x32>
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800315c:	f04f 32ff 	mov.w	r2, #4294967295
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	401a      	ands	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003170:	f04f 31ff 	mov.w	r1, #4294967295
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	43d9      	mvns	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	4313      	orrs	r3, r2
         );
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	; 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a0:	d301      	bcc.n	80031a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a2:	2301      	movs	r3, #1
 80031a4:	e00f      	b.n	80031c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a6:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <SysTick_Config+0x40>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ae:	210f      	movs	r1, #15
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	f7ff ff8e 	bl	80030d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <SysTick_Config+0x40>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031be:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <SysTick_Config+0x40>)
 80031c0:	2207      	movs	r2, #7
 80031c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	e000e010 	.word	0xe000e010

080031d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff29 	bl	8003034 <__NVIC_SetPriorityGrouping>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031fc:	f7ff ff3e 	bl	800307c <__NVIC_GetPriorityGrouping>
 8003200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	6978      	ldr	r0, [r7, #20]
 8003208:	f7ff ff8e 	bl	8003128 <NVIC_EncodePriority>
 800320c:	4602      	mov	r2, r0
 800320e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff5d 	bl	80030d4 <__NVIC_SetPriority>
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff31 	bl	8003098 <__NVIC_EnableIRQ>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff ffa2 	bl	8003190 <SysTick_Config>
 800324c:	4603      	mov	r3, r0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	e16b      	b.n	800354c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003274:	2201      	movs	r2, #1
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	429a      	cmp	r2, r3
 800328e:	f040 815a 	bne.w	8003546 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d005      	beq.n	80032aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d130      	bne.n	800330c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	2203      	movs	r2, #3
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032e0:	2201      	movs	r2, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 0201 	and.w	r2, r3, #1
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b03      	cmp	r3, #3
 8003316:	d017      	beq.n	8003348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	2203      	movs	r2, #3
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d123      	bne.n	800339c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	08da      	lsrs	r2, r3, #3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3208      	adds	r2, #8
 800335c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	220f      	movs	r2, #15
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	08da      	lsrs	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3208      	adds	r2, #8
 8003396:	69b9      	ldr	r1, [r7, #24]
 8003398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	2203      	movs	r2, #3
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0203 	and.w	r2, r3, #3
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80b4 	beq.w	8003546 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	4b60      	ldr	r3, [pc, #384]	; (8003564 <HAL_GPIO_Init+0x30c>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	4a5f      	ldr	r2, [pc, #380]	; (8003564 <HAL_GPIO_Init+0x30c>)
 80033e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ec:	6453      	str	r3, [r2, #68]	; 0x44
 80033ee:	4b5d      	ldr	r3, [pc, #372]	; (8003564 <HAL_GPIO_Init+0x30c>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033fa:	4a5b      	ldr	r2, [pc, #364]	; (8003568 <HAL_GPIO_Init+0x310>)
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	089b      	lsrs	r3, r3, #2
 8003400:	3302      	adds	r3, #2
 8003402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	220f      	movs	r2, #15
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a52      	ldr	r2, [pc, #328]	; (800356c <HAL_GPIO_Init+0x314>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d02b      	beq.n	800347e <HAL_GPIO_Init+0x226>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a51      	ldr	r2, [pc, #324]	; (8003570 <HAL_GPIO_Init+0x318>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d025      	beq.n	800347a <HAL_GPIO_Init+0x222>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a50      	ldr	r2, [pc, #320]	; (8003574 <HAL_GPIO_Init+0x31c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01f      	beq.n	8003476 <HAL_GPIO_Init+0x21e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a4f      	ldr	r2, [pc, #316]	; (8003578 <HAL_GPIO_Init+0x320>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d019      	beq.n	8003472 <HAL_GPIO_Init+0x21a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4e      	ldr	r2, [pc, #312]	; (800357c <HAL_GPIO_Init+0x324>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_GPIO_Init+0x216>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4d      	ldr	r2, [pc, #308]	; (8003580 <HAL_GPIO_Init+0x328>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00d      	beq.n	800346a <HAL_GPIO_Init+0x212>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a4c      	ldr	r2, [pc, #304]	; (8003584 <HAL_GPIO_Init+0x32c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <HAL_GPIO_Init+0x20e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a4b      	ldr	r2, [pc, #300]	; (8003588 <HAL_GPIO_Init+0x330>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_GPIO_Init+0x20a>
 800345e:	2307      	movs	r3, #7
 8003460:	e00e      	b.n	8003480 <HAL_GPIO_Init+0x228>
 8003462:	2308      	movs	r3, #8
 8003464:	e00c      	b.n	8003480 <HAL_GPIO_Init+0x228>
 8003466:	2306      	movs	r3, #6
 8003468:	e00a      	b.n	8003480 <HAL_GPIO_Init+0x228>
 800346a:	2305      	movs	r3, #5
 800346c:	e008      	b.n	8003480 <HAL_GPIO_Init+0x228>
 800346e:	2304      	movs	r3, #4
 8003470:	e006      	b.n	8003480 <HAL_GPIO_Init+0x228>
 8003472:	2303      	movs	r3, #3
 8003474:	e004      	b.n	8003480 <HAL_GPIO_Init+0x228>
 8003476:	2302      	movs	r3, #2
 8003478:	e002      	b.n	8003480 <HAL_GPIO_Init+0x228>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_GPIO_Init+0x228>
 800347e:	2300      	movs	r3, #0
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	f002 0203 	and.w	r2, r2, #3
 8003486:	0092      	lsls	r2, r2, #2
 8003488:	4093      	lsls	r3, r2
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003490:	4935      	ldr	r1, [pc, #212]	; (8003568 <HAL_GPIO_Init+0x310>)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	089b      	lsrs	r3, r3, #2
 8003496:	3302      	adds	r3, #2
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800349e:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_GPIO_Init+0x334>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034c2:	4a32      	ldr	r2, [pc, #200]	; (800358c <HAL_GPIO_Init+0x334>)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034c8:	4b30      	ldr	r3, [pc, #192]	; (800358c <HAL_GPIO_Init+0x334>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034ec:	4a27      	ldr	r2, [pc, #156]	; (800358c <HAL_GPIO_Init+0x334>)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034f2:	4b26      	ldr	r3, [pc, #152]	; (800358c <HAL_GPIO_Init+0x334>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	43db      	mvns	r3, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4013      	ands	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003516:	4a1d      	ldr	r2, [pc, #116]	; (800358c <HAL_GPIO_Init+0x334>)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_GPIO_Init+0x334>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003540:	4a12      	ldr	r2, [pc, #72]	; (800358c <HAL_GPIO_Init+0x334>)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3301      	adds	r3, #1
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	2b0f      	cmp	r3, #15
 8003550:	f67f ae90 	bls.w	8003274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003554:	bf00      	nop
 8003556:	bf00      	nop
 8003558:	3724      	adds	r7, #36	; 0x24
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	40013800 	.word	0x40013800
 800356c:	40020000 	.word	0x40020000
 8003570:	40020400 	.word	0x40020400
 8003574:	40020800 	.word	0x40020800
 8003578:	40020c00 	.word	0x40020c00
 800357c:	40021000 	.word	0x40021000
 8003580:	40021400 	.word	0x40021400
 8003584:	40021800 	.word	0x40021800
 8003588:	40021c00 	.word	0x40021c00
 800358c:	40013c00 	.word	0x40013c00

08003590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
 800359c:	4613      	mov	r3, r2
 800359e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035a0:	787b      	ldrb	r3, [r7, #1]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035a6:	887a      	ldrh	r2, [r7, #2]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035ac:	e003      	b.n	80035b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ae:	887b      	ldrh	r3, [r7, #2]
 80035b0:	041a      	lsls	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	619a      	str	r2, [r3, #24]
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e12b      	b.n	800382e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff fb14 	bl	8002c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2224      	movs	r2, #36	; 0x24
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003616:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003626:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003628:	f001 fbfc 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 800362c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4a81      	ldr	r2, [pc, #516]	; (8003838 <HAL_I2C_Init+0x274>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d807      	bhi.n	8003648 <HAL_I2C_Init+0x84>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a80      	ldr	r2, [pc, #512]	; (800383c <HAL_I2C_Init+0x278>)
 800363c:	4293      	cmp	r3, r2
 800363e:	bf94      	ite	ls
 8003640:	2301      	movls	r3, #1
 8003642:	2300      	movhi	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	e006      	b.n	8003656 <HAL_I2C_Init+0x92>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a7d      	ldr	r2, [pc, #500]	; (8003840 <HAL_I2C_Init+0x27c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	bf94      	ite	ls
 8003650:	2301      	movls	r3, #1
 8003652:	2300      	movhi	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0e7      	b.n	800382e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a78      	ldr	r2, [pc, #480]	; (8003844 <HAL_I2C_Init+0x280>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0c9b      	lsrs	r3, r3, #18
 8003668:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a6a      	ldr	r2, [pc, #424]	; (8003838 <HAL_I2C_Init+0x274>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d802      	bhi.n	8003698 <HAL_I2C_Init+0xd4>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	3301      	adds	r3, #1
 8003696:	e009      	b.n	80036ac <HAL_I2C_Init+0xe8>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	4a69      	ldr	r2, [pc, #420]	; (8003848 <HAL_I2C_Init+0x284>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	099b      	lsrs	r3, r3, #6
 80036aa:	3301      	adds	r3, #1
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	495c      	ldr	r1, [pc, #368]	; (8003838 <HAL_I2C_Init+0x274>)
 80036c8:	428b      	cmp	r3, r1
 80036ca:	d819      	bhi.n	8003700 <HAL_I2C_Init+0x13c>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e59      	subs	r1, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036da:	1c59      	adds	r1, r3, #1
 80036dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036e0:	400b      	ands	r3, r1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_I2C_Init+0x138>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1e59      	subs	r1, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fa:	e051      	b.n	80037a0 <HAL_I2C_Init+0x1dc>
 80036fc:	2304      	movs	r3, #4
 80036fe:	e04f      	b.n	80037a0 <HAL_I2C_Init+0x1dc>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d111      	bne.n	800372c <HAL_I2C_Init+0x168>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1e58      	subs	r0, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	440b      	add	r3, r1
 8003716:	fbb0 f3f3 	udiv	r3, r0, r3
 800371a:	3301      	adds	r3, #1
 800371c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	e012      	b.n	8003752 <HAL_I2C_Init+0x18e>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1e58      	subs	r0, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	0099      	lsls	r1, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003742:	3301      	adds	r3, #1
 8003744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_Init+0x196>
 8003756:	2301      	movs	r3, #1
 8003758:	e022      	b.n	80037a0 <HAL_I2C_Init+0x1dc>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10e      	bne.n	8003780 <HAL_I2C_Init+0x1bc>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1e58      	subs	r0, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	460b      	mov	r3, r1
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	440b      	add	r3, r1
 8003770:	fbb0 f3f3 	udiv	r3, r0, r3
 8003774:	3301      	adds	r3, #1
 8003776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800377e:	e00f      	b.n	80037a0 <HAL_I2C_Init+0x1dc>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1e58      	subs	r0, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	0099      	lsls	r1, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	fbb0 f3f3 	udiv	r3, r0, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	6809      	ldr	r1, [r1, #0]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69da      	ldr	r2, [r3, #28]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6911      	ldr	r1, [r2, #16]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	68d2      	ldr	r2, [r2, #12]
 80037da:	4311      	orrs	r1, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	000186a0 	.word	0x000186a0
 800383c:	001e847f 	.word	0x001e847f
 8003840:	003d08ff 	.word	0x003d08ff
 8003844:	431bde83 	.word	0x431bde83
 8003848:	10624dd3 	.word	0x10624dd3

0800384c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	4608      	mov	r0, r1
 8003856:	4611      	mov	r1, r2
 8003858:	461a      	mov	r2, r3
 800385a:	4603      	mov	r3, r0
 800385c:	817b      	strh	r3, [r7, #10]
 800385e:	460b      	mov	r3, r1
 8003860:	813b      	strh	r3, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003866:	f7ff fbb5 	bl	8002fd4 <HAL_GetTick>
 800386a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b20      	cmp	r3, #32
 8003876:	f040 80d9 	bne.w	8003a2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	2319      	movs	r3, #25
 8003880:	2201      	movs	r2, #1
 8003882:	496d      	ldr	r1, [pc, #436]	; (8003a38 <HAL_I2C_Mem_Write+0x1ec>)
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fc7f 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003890:	2302      	movs	r3, #2
 8003892:	e0cc      	b.n	8003a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_I2C_Mem_Write+0x56>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0c5      	b.n	8003a2e <HAL_I2C_Mem_Write+0x1e2>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d007      	beq.n	80038c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2221      	movs	r2, #33	; 0x21
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2240      	movs	r2, #64	; 0x40
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a3a      	ldr	r2, [r7, #32]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a4d      	ldr	r2, [pc, #308]	; (8003a3c <HAL_I2C_Mem_Write+0x1f0>)
 8003908:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800390a:	88f8      	ldrh	r0, [r7, #6]
 800390c:	893a      	ldrh	r2, [r7, #8]
 800390e:	8979      	ldrh	r1, [r7, #10]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	4603      	mov	r3, r0
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 fab6 	bl	8003e8c <I2C_RequestMemoryWrite>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d052      	beq.n	80039cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e081      	b.n	8003a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fd00 	bl	8004334 <I2C_WaitOnTXEFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	2b04      	cmp	r3, #4
 8003940:	d107      	bne.n	8003952 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003950:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e06b      	b.n	8003a2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b04      	cmp	r3, #4
 8003992:	d11b      	bne.n	80039cc <HAL_I2C_Mem_Write+0x180>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	d017      	beq.n	80039cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1aa      	bne.n	800392a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fcec 	bl	80043b6 <I2C_WaitOnBTFFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00d      	beq.n	8003a00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d107      	bne.n	80039fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e016      	b.n	8003a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	00100002 	.word	0x00100002
 8003a3c:	ffff0000 	.word	0xffff0000

08003a40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	; 0x30
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	4608      	mov	r0, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4603      	mov	r3, r0
 8003a50:	817b      	strh	r3, [r7, #10]
 8003a52:	460b      	mov	r3, r1
 8003a54:	813b      	strh	r3, [r7, #8]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a5a:	f7ff fabb 	bl	8002fd4 <HAL_GetTick>
 8003a5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	f040 8208 	bne.w	8003e7e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2319      	movs	r3, #25
 8003a74:	2201      	movs	r2, #1
 8003a76:	497b      	ldr	r1, [pc, #492]	; (8003c64 <HAL_I2C_Mem_Read+0x224>)
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fb85 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
 8003a86:	e1fb      	b.n	8003e80 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Mem_Read+0x56>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e1f4      	b.n	8003e80 <HAL_I2C_Mem_Read+0x440>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d007      	beq.n	8003abc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2222      	movs	r2, #34	; 0x22
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2240      	movs	r2, #64	; 0x40
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a5b      	ldr	r2, [pc, #364]	; (8003c68 <HAL_I2C_Mem_Read+0x228>)
 8003afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003afe:	88f8      	ldrh	r0, [r7, #6]
 8003b00:	893a      	ldrh	r2, [r7, #8]
 8003b02:	8979      	ldrh	r1, [r7, #10]
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fa52 	bl	8003fb8 <I2C_RequestMemoryRead>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e1b0      	b.n	8003e80 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d113      	bne.n	8003b4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b26:	2300      	movs	r3, #0
 8003b28:	623b      	str	r3, [r7, #32]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	623b      	str	r3, [r7, #32]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	623b      	str	r3, [r7, #32]
 8003b3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	e184      	b.n	8003e58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d11b      	bne.n	8003b8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e164      	b.n	8003e58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d11b      	bne.n	8003bce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	e144      	b.n	8003e58 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003be4:	e138      	b.n	8003e58 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	f200 80f1 	bhi.w	8003dd2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d123      	bne.n	8003c40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fc1b 	bl	8004438 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e139      	b.n	8003e80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c3e:	e10b      	b.n	8003e58 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d14e      	bne.n	8003ce6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	2200      	movs	r2, #0
 8003c50:	4906      	ldr	r1, [pc, #24]	; (8003c6c <HAL_I2C_Mem_Read+0x22c>)
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fa98 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e10e      	b.n	8003e80 <HAL_I2C_Mem_Read+0x440>
 8003c62:	bf00      	nop
 8003c64:	00100002 	.word	0x00100002
 8003c68:	ffff0000 	.word	0xffff0000
 8003c6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ce4:	e0b8      	b.n	8003e58 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	2200      	movs	r2, #0
 8003cee:	4966      	ldr	r1, [pc, #408]	; (8003e88 <HAL_I2C_Mem_Read+0x448>)
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fa49 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0bf      	b.n	8003e80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d48:	2200      	movs	r2, #0
 8003d4a:	494f      	ldr	r1, [pc, #316]	; (8003e88 <HAL_I2C_Mem_Read+0x448>)
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fa1b 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e091      	b.n	8003e80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dd0:	e042      	b.n	8003e58 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fb2e 	bl	8004438 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e04c      	b.n	8003e80 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d118      	bne.n	8003e58 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f47f aec2 	bne.w	8003be6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e000      	b.n	8003e80 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
  }
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3728      	adds	r7, #40	; 0x28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	00010004 	.word	0x00010004

08003e8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	4608      	mov	r0, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	817b      	strh	r3, [r7, #10]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	813b      	strh	r3, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f960 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00d      	beq.n	8003eea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003edc:	d103      	bne.n	8003ee6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e05f      	b.n	8003faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eea:	897b      	ldrh	r3, [r7, #10]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ef8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	6a3a      	ldr	r2, [r7, #32]
 8003efe:	492d      	ldr	r1, [pc, #180]	; (8003fb4 <I2C_RequestMemoryWrite+0x128>)
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f998 	bl	8004236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e04c      	b.n	8003faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f28:	6a39      	ldr	r1, [r7, #32]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fa02 	bl	8004334 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d107      	bne.n	8003f4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e02b      	b.n	8003faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d105      	bne.n	8003f64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f58:	893b      	ldrh	r3, [r7, #8]
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	611a      	str	r2, [r3, #16]
 8003f62:	e021      	b.n	8003fa8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f64:	893b      	ldrh	r3, [r7, #8]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f74:	6a39      	ldr	r1, [r7, #32]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f9dc 	bl	8004334 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d107      	bne.n	8003f9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e005      	b.n	8003faa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f9e:	893b      	ldrh	r3, [r7, #8]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	00010002 	.word	0x00010002

08003fb8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	4608      	mov	r0, r1
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	817b      	strh	r3, [r7, #10]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	813b      	strh	r3, [r7, #8]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fe0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f8c2 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004018:	d103      	bne.n	8004022 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e0aa      	b.n	800417c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004026:	897b      	ldrh	r3, [r7, #10]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004034:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	6a3a      	ldr	r2, [r7, #32]
 800403a:	4952      	ldr	r1, [pc, #328]	; (8004184 <I2C_RequestMemoryRead+0x1cc>)
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f8fa 	bl	8004236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e097      	b.n	800417c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004064:	6a39      	ldr	r1, [r7, #32]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f964 	bl	8004334 <I2C_WaitOnTXEFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00d      	beq.n	800408e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	2b04      	cmp	r3, #4
 8004078:	d107      	bne.n	800408a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004088:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e076      	b.n	800417c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004094:	893b      	ldrh	r3, [r7, #8]
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]
 800409e:	e021      	b.n	80040e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040a0:	893b      	ldrh	r3, [r7, #8]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f93e 	bl	8004334 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d107      	bne.n	80040d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e050      	b.n	800417c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040da:	893b      	ldrh	r3, [r7, #8]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e6:	6a39      	ldr	r1, [r7, #32]
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f923 	bl	8004334 <I2C_WaitOnTXEFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00d      	beq.n	8004110 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d107      	bne.n	800410c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e035      	b.n	800417c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	2200      	movs	r2, #0
 8004128:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f82b 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004146:	d103      	bne.n	8004150 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e013      	b.n	800417c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004154:	897b      	ldrh	r3, [r7, #10]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	6a3a      	ldr	r2, [r7, #32]
 8004168:	4906      	ldr	r1, [pc, #24]	; (8004184 <I2C_RequestMemoryRead+0x1cc>)
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f863 	bl	8004236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	00010002 	.word	0x00010002

08004188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004198:	e025      	b.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d021      	beq.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a2:	f7fe ff17 	bl	8002fd4 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d302      	bcc.n	80041b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d116      	bne.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e023      	b.n	800422e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d10d      	bne.n	800420c <I2C_WaitOnFlagUntilTimeout+0x84>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	43da      	mvns	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4013      	ands	r3, r2
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bf0c      	ite	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	2300      	movne	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	e00c      	b.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	43da      	mvns	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	429a      	cmp	r2, r3
 800422a:	d0b6      	beq.n	800419a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004244:	e051      	b.n	80042ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004254:	d123      	bne.n	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004264:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800426e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f043 0204 	orr.w	r2, r3, #4
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e046      	b.n	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d021      	beq.n	80042ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a6:	f7fe fe95 	bl	8002fd4 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d302      	bcc.n	80042bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d116      	bne.n	80042ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e020      	b.n	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d10c      	bne.n	800430e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	43da      	mvns	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf14      	ite	ne
 8004306:	2301      	movne	r3, #1
 8004308:	2300      	moveq	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	e00b      	b.n	8004326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	43da      	mvns	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4013      	ands	r3, r2
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf14      	ite	ne
 8004320:	2301      	movne	r3, #1
 8004322:	2300      	moveq	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d18d      	bne.n	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004340:	e02d      	b.n	800439e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f8ce 	bl	80044e4 <I2C_IsAcknowledgeFailed>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e02d      	b.n	80043ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d021      	beq.n	800439e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fe fe3b 	bl	8002fd4 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d116      	bne.n	800439e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f043 0220 	orr.w	r2, r3, #32
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e007      	b.n	80043ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	d1ca      	bne.n	8004342 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043c2:	e02d      	b.n	8004420 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f88d 	bl	80044e4 <I2C_IsAcknowledgeFailed>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e02d      	b.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043da:	d021      	beq.n	8004420 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fe fdfa 	bl	8002fd4 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d116      	bne.n	8004420 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e007      	b.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b04      	cmp	r3, #4
 800442c:	d1ca      	bne.n	80043c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004444:	e042      	b.n	80044cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b10      	cmp	r3, #16
 8004452:	d119      	bne.n	8004488 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0210 	mvn.w	r2, #16
 800445c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e029      	b.n	80044dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004488:	f7fe fda4 	bl	8002fd4 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	429a      	cmp	r2, r3
 8004496:	d302      	bcc.n	800449e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d116      	bne.n	80044cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e007      	b.n	80044dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b40      	cmp	r3, #64	; 0x40
 80044d8:	d1b5      	bne.n	8004446 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fa:	d11b      	bne.n	8004534 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004504:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	f043 0204 	orr.w	r2, r3, #4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
	...

08004544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e267      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d075      	beq.n	800464e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004562:	4b88      	ldr	r3, [pc, #544]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b04      	cmp	r3, #4
 800456c:	d00c      	beq.n	8004588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800456e:	4b85      	ldr	r3, [pc, #532]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004576:	2b08      	cmp	r3, #8
 8004578:	d112      	bne.n	80045a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457a:	4b82      	ldr	r3, [pc, #520]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004586:	d10b      	bne.n	80045a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004588:	4b7e      	ldr	r3, [pc, #504]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d05b      	beq.n	800464c <HAL_RCC_OscConfig+0x108>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d157      	bne.n	800464c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e242      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	d106      	bne.n	80045b8 <HAL_RCC_OscConfig+0x74>
 80045aa:	4b76      	ldr	r3, [pc, #472]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a75      	ldr	r2, [pc, #468]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	e01d      	b.n	80045f4 <HAL_RCC_OscConfig+0xb0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c0:	d10c      	bne.n	80045dc <HAL_RCC_OscConfig+0x98>
 80045c2:	4b70      	ldr	r3, [pc, #448]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a6f      	ldr	r2, [pc, #444]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	4b6d      	ldr	r3, [pc, #436]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a6c      	ldr	r2, [pc, #432]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e00b      	b.n	80045f4 <HAL_RCC_OscConfig+0xb0>
 80045dc:	4b69      	ldr	r3, [pc, #420]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a68      	ldr	r2, [pc, #416]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	4b66      	ldr	r3, [pc, #408]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a65      	ldr	r2, [pc, #404]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d013      	beq.n	8004624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fe fcea 	bl	8002fd4 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004604:	f7fe fce6 	bl	8002fd4 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	; 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e207      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	4b5b      	ldr	r3, [pc, #364]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0xc0>
 8004622:	e014      	b.n	800464e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fe fcd6 	bl	8002fd4 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800462c:	f7fe fcd2 	bl	8002fd4 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b64      	cmp	r3, #100	; 0x64
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e1f3      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	4b51      	ldr	r3, [pc, #324]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0xe8>
 800464a:	e000      	b.n	800464e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d063      	beq.n	8004722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800465a:	4b4a      	ldr	r3, [pc, #296]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004666:	4b47      	ldr	r3, [pc, #284]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800466e:	2b08      	cmp	r3, #8
 8004670:	d11c      	bne.n	80046ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004672:	4b44      	ldr	r3, [pc, #272]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d116      	bne.n	80046ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467e:	4b41      	ldr	r3, [pc, #260]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_RCC_OscConfig+0x152>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d001      	beq.n	8004696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e1c7      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004696:	4b3b      	ldr	r3, [pc, #236]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4937      	ldr	r1, [pc, #220]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046aa:	e03a      	b.n	8004722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d020      	beq.n	80046f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b4:	4b34      	ldr	r3, [pc, #208]	; (8004788 <HAL_RCC_OscConfig+0x244>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7fe fc8b 	bl	8002fd4 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c2:	f7fe fc87 	bl	8002fd4 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e1a8      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e0:	4b28      	ldr	r3, [pc, #160]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	4925      	ldr	r1, [pc, #148]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	600b      	str	r3, [r1, #0]
 80046f4:	e015      	b.n	8004722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <HAL_RCC_OscConfig+0x244>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fe fc6a 	bl	8002fd4 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004704:	f7fe fc66 	bl	8002fd4 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e187      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004716:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d036      	beq.n	800479c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d016      	beq.n	8004764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004736:	4b15      	ldr	r3, [pc, #84]	; (800478c <HAL_RCC_OscConfig+0x248>)
 8004738:	2201      	movs	r2, #1
 800473a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fe fc4a 	bl	8002fd4 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004744:	f7fe fc46 	bl	8002fd4 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e167      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x200>
 8004762:	e01b      	b.n	800479c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004764:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_RCC_OscConfig+0x248>)
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476a:	f7fe fc33 	bl	8002fd4 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004770:	e00e      	b.n	8004790 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004772:	f7fe fc2f 	bl	8002fd4 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d907      	bls.n	8004790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e150      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
 8004784:	40023800 	.word	0x40023800
 8004788:	42470000 	.word	0x42470000
 800478c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004790:	4b88      	ldr	r3, [pc, #544]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ea      	bne.n	8004772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8097 	beq.w	80048d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ae:	4b81      	ldr	r3, [pc, #516]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	4b7d      	ldr	r3, [pc, #500]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	4a7c      	ldr	r2, [pc, #496]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ca:	4b7a      	ldr	r3, [pc, #488]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d6:	2301      	movs	r3, #1
 80047d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047da:	4b77      	ldr	r3, [pc, #476]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d118      	bne.n	8004818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047e6:	4b74      	ldr	r3, [pc, #464]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a73      	ldr	r2, [pc, #460]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f2:	f7fe fbef 	bl	8002fd4 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fa:	f7fe fbeb 	bl	8002fd4 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e10c      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	4b6a      	ldr	r3, [pc, #424]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d106      	bne.n	800482e <HAL_RCC_OscConfig+0x2ea>
 8004820:	4b64      	ldr	r3, [pc, #400]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a63      	ldr	r2, [pc, #396]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
 800482c:	e01c      	b.n	8004868 <HAL_RCC_OscConfig+0x324>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b05      	cmp	r3, #5
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0x30c>
 8004836:	4b5f      	ldr	r3, [pc, #380]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	4a5e      	ldr	r2, [pc, #376]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800483c:	f043 0304 	orr.w	r3, r3, #4
 8004840:	6713      	str	r3, [r2, #112]	; 0x70
 8004842:	4b5c      	ldr	r3, [pc, #368]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	4a5b      	ldr	r2, [pc, #364]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	6713      	str	r3, [r2, #112]	; 0x70
 800484e:	e00b      	b.n	8004868 <HAL_RCC_OscConfig+0x324>
 8004850:	4b58      	ldr	r3, [pc, #352]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	4a57      	ldr	r2, [pc, #348]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	6713      	str	r3, [r2, #112]	; 0x70
 800485c:	4b55      	ldr	r3, [pc, #340]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	4a54      	ldr	r2, [pc, #336]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004862:	f023 0304 	bic.w	r3, r3, #4
 8004866:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d015      	beq.n	800489c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fe fbb0 	bl	8002fd4 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004876:	e00a      	b.n	800488e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004878:	f7fe fbac 	bl	8002fd4 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	; 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0cb      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488e:	4b49      	ldr	r3, [pc, #292]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ee      	beq.n	8004878 <HAL_RCC_OscConfig+0x334>
 800489a:	e014      	b.n	80048c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489c:	f7fe fb9a 	bl	8002fd4 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a4:	f7fe fb96 	bl	8002fd4 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e0b5      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ba:	4b3e      	ldr	r3, [pc, #248]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1ee      	bne.n	80048a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048cc:	4b39      	ldr	r3, [pc, #228]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	4a38      	ldr	r2, [pc, #224]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80a1 	beq.w	8004a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048e2:	4b34      	ldr	r3, [pc, #208]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d05c      	beq.n	80049a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d141      	bne.n	800497a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b31      	ldr	r3, [pc, #196]	; (80049bc <HAL_RCC_OscConfig+0x478>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fe fb6a 	bl	8002fd4 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004904:	f7fe fb66 	bl	8002fd4 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e087      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	019b      	lsls	r3, r3, #6
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	3b01      	subs	r3, #1
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	061b      	lsls	r3, r3, #24
 8004946:	491b      	ldr	r1, [pc, #108]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004948:	4313      	orrs	r3, r2
 800494a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <HAL_RCC_OscConfig+0x478>)
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004952:	f7fe fb3f 	bl	8002fd4 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800495a:	f7fe fb3b 	bl	8002fd4 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e05c      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496c:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x416>
 8004978:	e054      	b.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497a:	4b10      	ldr	r3, [pc, #64]	; (80049bc <HAL_RCC_OscConfig+0x478>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fe fb28 	bl	8002fd4 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004988:	f7fe fb24 	bl	8002fd4 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e045      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x444>
 80049a6:	e03d      	b.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e038      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40007000 	.word	0x40007000
 80049bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049c0:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_RCC_OscConfig+0x4ec>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d028      	beq.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d121      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d11a      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d111      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800

08004a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0cc      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a48:	4b68      	ldr	r3, [pc, #416]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d90c      	bls.n	8004a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b65      	ldr	r3, [pc, #404]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5e:	4b63      	ldr	r3, [pc, #396]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0b8      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d020      	beq.n	8004abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a88:	4b59      	ldr	r3, [pc, #356]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4a58      	ldr	r2, [pc, #352]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa0:	4b53      	ldr	r3, [pc, #332]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4a52      	ldr	r2, [pc, #328]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aac:	4b50      	ldr	r3, [pc, #320]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	494d      	ldr	r1, [pc, #308]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d044      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	4b47      	ldr	r3, [pc, #284]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d119      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e07f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af2:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e06f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b02:	4b3b      	ldr	r3, [pc, #236]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e067      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b12:	4b37      	ldr	r3, [pc, #220]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 0203 	bic.w	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4934      	ldr	r1, [pc, #208]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b24:	f7fe fa56 	bl	8002fd4 <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7fe fa52 	bl	8002fd4 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e04f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 020c 	and.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d1eb      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b54:	4b25      	ldr	r3, [pc, #148]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d20c      	bcs.n	8004b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b62:	4b22      	ldr	r3, [pc, #136]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b20      	ldr	r3, [pc, #128]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e032      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b88:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4916      	ldr	r1, [pc, #88]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	490e      	ldr	r1, [pc, #56]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bba:	f000 f821 	bl	8004c00 <HAL_RCC_GetSysClockFreq>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	490a      	ldr	r1, [pc, #40]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004bcc:	5ccb      	ldrb	r3, [r1, r3]
 8004bce:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd2:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bd6:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_ClockConfig+0x1c8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe f9b6 	bl	8002f4c <HAL_InitTick>

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023c00 	.word	0x40023c00
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	08007e00 	.word	0x08007e00
 8004bf8:	20000000 	.word	0x20000000
 8004bfc:	20000004 	.word	0x20000004

08004c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c04:	b094      	sub	sp, #80	; 0x50
 8004c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c10:	2300      	movs	r3, #0
 8004c12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c18:	4b79      	ldr	r3, [pc, #484]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d00d      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x40>
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	f200 80e1 	bhi.w	8004dec <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x34>
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c32:	e0db      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c34:	4b73      	ldr	r3, [pc, #460]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c38:	e0db      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c3a:	4b73      	ldr	r3, [pc, #460]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c3e:	e0d8      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c40:	4b6f      	ldr	r3, [pc, #444]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c4a:	4b6d      	ldr	r3, [pc, #436]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d063      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c56:	4b6a      	ldr	r3, [pc, #424]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	099b      	lsrs	r3, r3, #6
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c68:	633b      	str	r3, [r7, #48]	; 0x30
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c72:	4622      	mov	r2, r4
 8004c74:	462b      	mov	r3, r5
 8004c76:	f04f 0000 	mov.w	r0, #0
 8004c7a:	f04f 0100 	mov.w	r1, #0
 8004c7e:	0159      	lsls	r1, r3, #5
 8004c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c84:	0150      	lsls	r0, r2, #5
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	1a51      	subs	r1, r2, r1
 8004c8e:	6139      	str	r1, [r7, #16]
 8004c90:	4629      	mov	r1, r5
 8004c92:	eb63 0301 	sbc.w	r3, r3, r1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ca4:	4659      	mov	r1, fp
 8004ca6:	018b      	lsls	r3, r1, #6
 8004ca8:	4651      	mov	r1, sl
 8004caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cae:	4651      	mov	r1, sl
 8004cb0:	018a      	lsls	r2, r1, #6
 8004cb2:	4651      	mov	r1, sl
 8004cb4:	ebb2 0801 	subs.w	r8, r2, r1
 8004cb8:	4659      	mov	r1, fp
 8004cba:	eb63 0901 	sbc.w	r9, r3, r1
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cd2:	4690      	mov	r8, r2
 8004cd4:	4699      	mov	r9, r3
 8004cd6:	4623      	mov	r3, r4
 8004cd8:	eb18 0303 	adds.w	r3, r8, r3
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	462b      	mov	r3, r5
 8004ce0:	eb49 0303 	adc.w	r3, r9, r3
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	024b      	lsls	r3, r1, #9
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	024a      	lsls	r2, r1, #9
 8004d00:	4610      	mov	r0, r2
 8004d02:	4619      	mov	r1, r3
 8004d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d06:	2200      	movs	r2, #0
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d10:	f7fb ff5e 	bl	8000bd0 <__aeabi_uldivmod>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4613      	mov	r3, r2
 8004d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d1c:	e058      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d1e:	4b38      	ldr	r3, [pc, #224]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	099b      	lsrs	r3, r3, #6
 8004d24:	2200      	movs	r2, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	4611      	mov	r1, r2
 8004d2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d2e:	623b      	str	r3, [r7, #32]
 8004d30:	2300      	movs	r3, #0
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
 8004d34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	f04f 0000 	mov.w	r0, #0
 8004d40:	f04f 0100 	mov.w	r1, #0
 8004d44:	0159      	lsls	r1, r3, #5
 8004d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d4a:	0150      	lsls	r0, r2, #5
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4641      	mov	r1, r8
 8004d52:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d56:	4649      	mov	r1, r9
 8004d58:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d70:	ebb2 040a 	subs.w	r4, r2, sl
 8004d74:	eb63 050b 	sbc.w	r5, r3, fp
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	00eb      	lsls	r3, r5, #3
 8004d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d86:	00e2      	lsls	r2, r4, #3
 8004d88:	4614      	mov	r4, r2
 8004d8a:	461d      	mov	r5, r3
 8004d8c:	4643      	mov	r3, r8
 8004d8e:	18e3      	adds	r3, r4, r3
 8004d90:	603b      	str	r3, [r7, #0]
 8004d92:	464b      	mov	r3, r9
 8004d94:	eb45 0303 	adc.w	r3, r5, r3
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004da6:	4629      	mov	r1, r5
 8004da8:	028b      	lsls	r3, r1, #10
 8004daa:	4621      	mov	r1, r4
 8004dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004db0:	4621      	mov	r1, r4
 8004db2:	028a      	lsls	r2, r1, #10
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dba:	2200      	movs	r2, #0
 8004dbc:	61bb      	str	r3, [r7, #24]
 8004dbe:	61fa      	str	r2, [r7, #28]
 8004dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dc4:	f7fb ff04 	bl	8000bd0 <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004de0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dea:	e002      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3750      	adds	r7, #80	; 0x50
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800
 8004e04:	00f42400 	.word	0x00f42400
 8004e08:	007a1200 	.word	0x007a1200

08004e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e10:	4b03      	ldr	r3, [pc, #12]	; (8004e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e12:	681b      	ldr	r3, [r3, #0]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20000000 	.word	0x20000000

08004e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e28:	f7ff fff0 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	0a9b      	lsrs	r3, r3, #10
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	4903      	ldr	r1, [pc, #12]	; (8004e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40023800 	.word	0x40023800
 8004e48:	08007e10 	.word	0x08007e10

08004e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e041      	b.n	8004ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fd ff3a 	bl	8002cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	f000 fe26 	bl	8005adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e041      	b.n	8004f80 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f839 	bl	8004f88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f000 fdd7 	bl	8005adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <HAL_TIM_PWM_Start+0x24>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	bf14      	ite	ne
 8004fb8:	2301      	movne	r3, #1
 8004fba:	2300      	moveq	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	e022      	b.n	8005006 <HAL_TIM_PWM_Start+0x6a>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d109      	bne.n	8004fda <HAL_TIM_PWM_Start+0x3e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	bf14      	ite	ne
 8004fd2:	2301      	movne	r3, #1
 8004fd4:	2300      	moveq	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	e015      	b.n	8005006 <HAL_TIM_PWM_Start+0x6a>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d109      	bne.n	8004ff4 <HAL_TIM_PWM_Start+0x58>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	bf14      	ite	ne
 8004fec:	2301      	movne	r3, #1
 8004fee:	2300      	moveq	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	e008      	b.n	8005006 <HAL_TIM_PWM_Start+0x6a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	bf14      	ite	ne
 8005000:	2301      	movne	r3, #1
 8005002:	2300      	moveq	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e07c      	b.n	8005108 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <HAL_TIM_PWM_Start+0x82>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800501c:	e013      	b.n	8005046 <HAL_TIM_PWM_Start+0xaa>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d104      	bne.n	800502e <HAL_TIM_PWM_Start+0x92>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800502c:	e00b      	b.n	8005046 <HAL_TIM_PWM_Start+0xaa>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d104      	bne.n	800503e <HAL_TIM_PWM_Start+0xa2>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800503c:	e003      	b.n	8005046 <HAL_TIM_PWM_Start+0xaa>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2201      	movs	r2, #1
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f001 f958 	bl	8006304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a2d      	ldr	r2, [pc, #180]	; (8005110 <HAL_TIM_PWM_Start+0x174>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_TIM_PWM_Start+0xcc>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a2c      	ldr	r2, [pc, #176]	; (8005114 <HAL_TIM_PWM_Start+0x178>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d101      	bne.n	800506c <HAL_TIM_PWM_Start+0xd0>
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_TIM_PWM_Start+0xd2>
 800506c:	2300      	movs	r3, #0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005080:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a22      	ldr	r2, [pc, #136]	; (8005110 <HAL_TIM_PWM_Start+0x174>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d022      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x136>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005094:	d01d      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x136>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1f      	ldr	r2, [pc, #124]	; (8005118 <HAL_TIM_PWM_Start+0x17c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d018      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x136>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1d      	ldr	r2, [pc, #116]	; (800511c <HAL_TIM_PWM_Start+0x180>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x136>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1c      	ldr	r2, [pc, #112]	; (8005120 <HAL_TIM_PWM_Start+0x184>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00e      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x136>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a16      	ldr	r2, [pc, #88]	; (8005114 <HAL_TIM_PWM_Start+0x178>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d009      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x136>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a18      	ldr	r2, [pc, #96]	; (8005124 <HAL_TIM_PWM_Start+0x188>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x136>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a16      	ldr	r2, [pc, #88]	; (8005128 <HAL_TIM_PWM_Start+0x18c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d111      	bne.n	80050f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b06      	cmp	r3, #6
 80050e2:	d010      	beq.n	8005106 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f4:	e007      	b.n	8005106 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40010000 	.word	0x40010000
 8005114:	40010400 	.word	0x40010400
 8005118:	40000400 	.word	0x40000400
 800511c:	40000800 	.word	0x40000800
 8005120:	40000c00 	.word	0x40000c00
 8005124:	40014000 	.word	0x40014000
 8005128:	40001800 	.word	0x40001800

0800512c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e041      	b.n	80051c2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f839 	bl	80051ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3304      	adds	r3, #4
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f000 fcb6 	bl	8005adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d104      	bne.n	80051fe <HAL_TIM_IC_Start_IT+0x1e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	e013      	b.n	8005226 <HAL_TIM_IC_Start_IT+0x46>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b04      	cmp	r3, #4
 8005202:	d104      	bne.n	800520e <HAL_TIM_IC_Start_IT+0x2e>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800520a:	b2db      	uxtb	r3, r3
 800520c:	e00b      	b.n	8005226 <HAL_TIM_IC_Start_IT+0x46>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d104      	bne.n	800521e <HAL_TIM_IC_Start_IT+0x3e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800521a:	b2db      	uxtb	r3, r3
 800521c:	e003      	b.n	8005226 <HAL_TIM_IC_Start_IT+0x46>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005224:	b2db      	uxtb	r3, r3
 8005226:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <HAL_TIM_IC_Start_IT+0x58>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e013      	b.n	8005260 <HAL_TIM_IC_Start_IT+0x80>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b04      	cmp	r3, #4
 800523c:	d104      	bne.n	8005248 <HAL_TIM_IC_Start_IT+0x68>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005244:	b2db      	uxtb	r3, r3
 8005246:	e00b      	b.n	8005260 <HAL_TIM_IC_Start_IT+0x80>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b08      	cmp	r3, #8
 800524c:	d104      	bne.n	8005258 <HAL_TIM_IC_Start_IT+0x78>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e003      	b.n	8005260 <HAL_TIM_IC_Start_IT+0x80>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800525e:	b2db      	uxtb	r3, r3
 8005260:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005262:	7bbb      	ldrb	r3, [r7, #14]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d102      	bne.n	800526e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005268:	7b7b      	ldrb	r3, [r7, #13]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d001      	beq.n	8005272 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e0cc      	b.n	800540c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_TIM_IC_Start_IT+0xa2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005280:	e013      	b.n	80052aa <HAL_TIM_IC_Start_IT+0xca>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d104      	bne.n	8005292 <HAL_TIM_IC_Start_IT+0xb2>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005290:	e00b      	b.n	80052aa <HAL_TIM_IC_Start_IT+0xca>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_IC_Start_IT+0xc2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a0:	e003      	b.n	80052aa <HAL_TIM_IC_Start_IT+0xca>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_IC_Start_IT+0xda>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b8:	e013      	b.n	80052e2 <HAL_TIM_IC_Start_IT+0x102>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d104      	bne.n	80052ca <HAL_TIM_IC_Start_IT+0xea>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052c8:	e00b      	b.n	80052e2 <HAL_TIM_IC_Start_IT+0x102>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d104      	bne.n	80052da <HAL_TIM_IC_Start_IT+0xfa>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052d8:	e003      	b.n	80052e2 <HAL_TIM_IC_Start_IT+0x102>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b0c      	cmp	r3, #12
 80052e6:	d841      	bhi.n	800536c <HAL_TIM_IC_Start_IT+0x18c>
 80052e8:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <HAL_TIM_IC_Start_IT+0x110>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	08005325 	.word	0x08005325
 80052f4:	0800536d 	.word	0x0800536d
 80052f8:	0800536d 	.word	0x0800536d
 80052fc:	0800536d 	.word	0x0800536d
 8005300:	08005337 	.word	0x08005337
 8005304:	0800536d 	.word	0x0800536d
 8005308:	0800536d 	.word	0x0800536d
 800530c:	0800536d 	.word	0x0800536d
 8005310:	08005349 	.word	0x08005349
 8005314:	0800536d 	.word	0x0800536d
 8005318:	0800536d 	.word	0x0800536d
 800531c:	0800536d 	.word	0x0800536d
 8005320:	0800535b 	.word	0x0800535b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0202 	orr.w	r2, r2, #2
 8005332:	60da      	str	r2, [r3, #12]
      break;
 8005334:	e01d      	b.n	8005372 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0204 	orr.w	r2, r2, #4
 8005344:	60da      	str	r2, [r3, #12]
      break;
 8005346:	e014      	b.n	8005372 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0208 	orr.w	r2, r2, #8
 8005356:	60da      	str	r2, [r3, #12]
      break;
 8005358:	e00b      	b.n	8005372 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0210 	orr.w	r2, r2, #16
 8005368:	60da      	str	r2, [r3, #12]
      break;
 800536a:	e002      	b.n	8005372 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
      break;
 8005370:	bf00      	nop
  }

  if (status == HAL_OK)
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d148      	bne.n	800540a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2201      	movs	r2, #1
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f000 ffbf 	bl	8006304 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a22      	ldr	r2, [pc, #136]	; (8005414 <HAL_TIM_IC_Start_IT+0x234>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d022      	beq.n	80053d6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d01d      	beq.n	80053d6 <HAL_TIM_IC_Start_IT+0x1f6>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <HAL_TIM_IC_Start_IT+0x238>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d018      	beq.n	80053d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1c      	ldr	r2, [pc, #112]	; (800541c <HAL_TIM_IC_Start_IT+0x23c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <HAL_TIM_IC_Start_IT+0x240>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00e      	beq.n	80053d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a19      	ldr	r2, [pc, #100]	; (8005424 <HAL_TIM_IC_Start_IT+0x244>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d009      	beq.n	80053d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a18      	ldr	r2, [pc, #96]	; (8005428 <HAL_TIM_IC_Start_IT+0x248>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d004      	beq.n	80053d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a16      	ldr	r2, [pc, #88]	; (800542c <HAL_TIM_IC_Start_IT+0x24c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d111      	bne.n	80053fa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b06      	cmp	r3, #6
 80053e6:	d010      	beq.n	800540a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f8:	e007      	b.n	800540a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0201 	orr.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800540a:	7bfb      	ldrb	r3, [r7, #15]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40010000 	.word	0x40010000
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40010400 	.word	0x40010400
 8005428:	40014000 	.word	0x40014000
 800542c:	40001800 	.word	0x40001800

08005430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b02      	cmp	r3, #2
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b02      	cmp	r3, #2
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0202 	mvn.w	r2, #2
 800545c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fd fa4c 	bl	8002910 <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fb0f 	bl	8005a9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fb16 	bl	8005ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b04      	cmp	r3, #4
 8005498:	d122      	bne.n	80054e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d11b      	bne.n	80054e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0204 	mvn.w	r2, #4
 80054b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fd fa22 	bl	8002910 <HAL_TIM_IC_CaptureCallback>
 80054cc:	e005      	b.n	80054da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fae5 	bl	8005a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 faec 	bl	8005ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d122      	bne.n	8005534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d11b      	bne.n	8005534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0208 	mvn.w	r2, #8
 8005504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2204      	movs	r2, #4
 800550a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fd f9f8 	bl	8002910 <HAL_TIM_IC_CaptureCallback>
 8005520:	e005      	b.n	800552e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fabb 	bl	8005a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fac2 	bl	8005ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b10      	cmp	r3, #16
 8005540:	d122      	bne.n	8005588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b10      	cmp	r3, #16
 800554e:	d11b      	bne.n	8005588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0210 	mvn.w	r2, #16
 8005558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2208      	movs	r2, #8
 800555e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fd f9ce 	bl	8002910 <HAL_TIM_IC_CaptureCallback>
 8005574:	e005      	b.n	8005582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fa91 	bl	8005a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fa98 	bl	8005ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b01      	cmp	r3, #1
 8005594:	d10e      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d107      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0201 	mvn.w	r2, #1
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa6b 	bl	8005a8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055be:	2b80      	cmp	r3, #128	; 0x80
 80055c0:	d10e      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055cc:	2b80      	cmp	r3, #128	; 0x80
 80055ce:	d107      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 ff90 	bl	8006500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ea:	2b40      	cmp	r3, #64	; 0x40
 80055ec:	d10e      	bne.n	800560c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f8:	2b40      	cmp	r3, #64	; 0x40
 80055fa:	d107      	bne.n	800560c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fa5d 	bl	8005ac6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b20      	cmp	r3, #32
 8005618:	d10e      	bne.n	8005638 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b20      	cmp	r3, #32
 8005626:	d107      	bne.n	8005638 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0220 	mvn.w	r2, #32
 8005630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 ff5a 	bl	80064ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005656:	2b01      	cmp	r3, #1
 8005658:	d101      	bne.n	800565e <HAL_TIM_IC_ConfigChannel+0x1e>
 800565a:	2302      	movs	r3, #2
 800565c:	e088      	b.n	8005770 <HAL_TIM_IC_ConfigChannel+0x130>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d11b      	bne.n	80056a4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	6819      	ldr	r1, [r3, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f000 fc7e 	bl	8005f7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 020c 	bic.w	r2, r2, #12
 800568e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6999      	ldr	r1, [r3, #24]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	619a      	str	r2, [r3, #24]
 80056a2:	e060      	b.n	8005766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d11c      	bne.n	80056e4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6819      	ldr	r1, [r3, #0]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f000 fd02 	bl	80060c2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6999      	ldr	r1, [r3, #24]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	021a      	lsls	r2, r3, #8
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	619a      	str	r2, [r3, #24]
 80056e2:	e040      	b.n	8005766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d11b      	bne.n	8005722 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6819      	ldr	r1, [r3, #0]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f000 fd4f 	bl	800619c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69da      	ldr	r2, [r3, #28]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 020c 	bic.w	r2, r2, #12
 800570c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69d9      	ldr	r1, [r3, #28]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	61da      	str	r2, [r3, #28]
 8005720:	e021      	b.n	8005766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b0c      	cmp	r3, #12
 8005726:	d11c      	bne.n	8005762 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6818      	ldr	r0, [r3, #0]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6819      	ldr	r1, [r3, #0]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f000 fd6c 	bl	8006214 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69da      	ldr	r2, [r3, #28]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800574a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69d9      	ldr	r1, [r3, #28]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	021a      	lsls	r2, r3, #8
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	61da      	str	r2, [r3, #28]
 8005760:	e001      	b.n	8005766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800576e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005792:	2302      	movs	r3, #2
 8005794:	e0ae      	b.n	80058f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b0c      	cmp	r3, #12
 80057a2:	f200 809f 	bhi.w	80058e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057a6:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	080057e1 	.word	0x080057e1
 80057b0:	080058e5 	.word	0x080058e5
 80057b4:	080058e5 	.word	0x080058e5
 80057b8:	080058e5 	.word	0x080058e5
 80057bc:	08005821 	.word	0x08005821
 80057c0:	080058e5 	.word	0x080058e5
 80057c4:	080058e5 	.word	0x080058e5
 80057c8:	080058e5 	.word	0x080058e5
 80057cc:	08005863 	.word	0x08005863
 80057d0:	080058e5 	.word	0x080058e5
 80057d4:	080058e5 	.word	0x080058e5
 80057d8:	080058e5 	.word	0x080058e5
 80057dc:	080058a3 	.word	0x080058a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fa18 	bl	8005c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0208 	orr.w	r2, r2, #8
 80057fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0204 	bic.w	r2, r2, #4
 800580a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6999      	ldr	r1, [r3, #24]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	691a      	ldr	r2, [r3, #16]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	619a      	str	r2, [r3, #24]
      break;
 800581e:	e064      	b.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fa68 	bl	8005cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800583a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6999      	ldr	r1, [r3, #24]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	021a      	lsls	r2, r3, #8
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	619a      	str	r2, [r3, #24]
      break;
 8005860:	e043      	b.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fabd 	bl	8005de8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0208 	orr.w	r2, r2, #8
 800587c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69da      	ldr	r2, [r3, #28]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0204 	bic.w	r2, r2, #4
 800588c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69d9      	ldr	r1, [r3, #28]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	61da      	str	r2, [r3, #28]
      break;
 80058a0:	e023      	b.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fb11 	bl	8005ed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69d9      	ldr	r1, [r3, #28]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	021a      	lsls	r2, r3, #8
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	61da      	str	r2, [r3, #28]
      break;
 80058e2:	e002      	b.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	75fb      	strb	r3, [r7, #23]
      break;
 80058e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_TIM_ConfigClockSource+0x1c>
 8005914:	2302      	movs	r3, #2
 8005916:	e0b4      	b.n	8005a82 <HAL_TIM_ConfigClockSource+0x186>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800593e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005950:	d03e      	beq.n	80059d0 <HAL_TIM_ConfigClockSource+0xd4>
 8005952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005956:	f200 8087 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 800595a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595e:	f000 8086 	beq.w	8005a6e <HAL_TIM_ConfigClockSource+0x172>
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005966:	d87f      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005968:	2b70      	cmp	r3, #112	; 0x70
 800596a:	d01a      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0xa6>
 800596c:	2b70      	cmp	r3, #112	; 0x70
 800596e:	d87b      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005970:	2b60      	cmp	r3, #96	; 0x60
 8005972:	d050      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x11a>
 8005974:	2b60      	cmp	r3, #96	; 0x60
 8005976:	d877      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005978:	2b50      	cmp	r3, #80	; 0x50
 800597a:	d03c      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0xfa>
 800597c:	2b50      	cmp	r3, #80	; 0x50
 800597e:	d873      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005980:	2b40      	cmp	r3, #64	; 0x40
 8005982:	d058      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x13a>
 8005984:	2b40      	cmp	r3, #64	; 0x40
 8005986:	d86f      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005988:	2b30      	cmp	r3, #48	; 0x30
 800598a:	d064      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x15a>
 800598c:	2b30      	cmp	r3, #48	; 0x30
 800598e:	d86b      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005990:	2b20      	cmp	r3, #32
 8005992:	d060      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x15a>
 8005994:	2b20      	cmp	r3, #32
 8005996:	d867      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d05c      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x15a>
 800599c:	2b10      	cmp	r3, #16
 800599e:	d05a      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x15a>
 80059a0:	e062      	b.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6899      	ldr	r1, [r3, #8]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f000 fc87 	bl	80062c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	609a      	str	r2, [r3, #8]
      break;
 80059ce:	e04f      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	6899      	ldr	r1, [r3, #8]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f000 fc70 	bl	80062c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059f2:	609a      	str	r2, [r3, #8]
      break;
 80059f4:	e03c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6859      	ldr	r1, [r3, #4]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f000 fb2e 	bl	8006064 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2150      	movs	r1, #80	; 0x50
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fc3d 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005a14:	e02c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6859      	ldr	r1, [r3, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f000 fb8a 	bl	800613c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2160      	movs	r1, #96	; 0x60
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fc2d 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005a34:	e01c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6859      	ldr	r1, [r3, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f000 fb0e 	bl	8006064 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2140      	movs	r1, #64	; 0x40
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fc1d 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005a54:	e00c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f000 fc14 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005a66:	e003      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a6c:	e000      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a40      	ldr	r2, [pc, #256]	; (8005bf0 <TIM_Base_SetConfig+0x114>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d013      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afa:	d00f      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a3d      	ldr	r2, [pc, #244]	; (8005bf4 <TIM_Base_SetConfig+0x118>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00b      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a3c      	ldr	r2, [pc, #240]	; (8005bf8 <TIM_Base_SetConfig+0x11c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d007      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a3b      	ldr	r2, [pc, #236]	; (8005bfc <TIM_Base_SetConfig+0x120>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a3a      	ldr	r2, [pc, #232]	; (8005c00 <TIM_Base_SetConfig+0x124>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d108      	bne.n	8005b2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2f      	ldr	r2, [pc, #188]	; (8005bf0 <TIM_Base_SetConfig+0x114>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d02b      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3c:	d027      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a2c      	ldr	r2, [pc, #176]	; (8005bf4 <TIM_Base_SetConfig+0x118>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d023      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a2b      	ldr	r2, [pc, #172]	; (8005bf8 <TIM_Base_SetConfig+0x11c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d01f      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2a      	ldr	r2, [pc, #168]	; (8005bfc <TIM_Base_SetConfig+0x120>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d01b      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <TIM_Base_SetConfig+0x124>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d017      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a28      	ldr	r2, [pc, #160]	; (8005c04 <TIM_Base_SetConfig+0x128>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d013      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a27      	ldr	r2, [pc, #156]	; (8005c08 <TIM_Base_SetConfig+0x12c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00f      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a26      	ldr	r2, [pc, #152]	; (8005c0c <TIM_Base_SetConfig+0x130>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00b      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a25      	ldr	r2, [pc, #148]	; (8005c10 <TIM_Base_SetConfig+0x134>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d007      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a24      	ldr	r2, [pc, #144]	; (8005c14 <TIM_Base_SetConfig+0x138>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d003      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a23      	ldr	r2, [pc, #140]	; (8005c18 <TIM_Base_SetConfig+0x13c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d108      	bne.n	8005ba0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	; (8005bf0 <TIM_Base_SetConfig+0x114>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0xf8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <TIM_Base_SetConfig+0x124>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d103      	bne.n	8005bdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	615a      	str	r2, [r3, #20]
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	40000c00 	.word	0x40000c00
 8005c00:	40010400 	.word	0x40010400
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40014400 	.word	0x40014400
 8005c0c:	40014800 	.word	0x40014800
 8005c10:	40001800 	.word	0x40001800
 8005c14:	40001c00 	.word	0x40001c00
 8005c18:	40002000 	.word	0x40002000

08005c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f023 0201 	bic.w	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f023 0302 	bic.w	r3, r3, #2
 8005c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a20      	ldr	r2, [pc, #128]	; (8005cf4 <TIM_OC1_SetConfig+0xd8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_OC1_SetConfig+0x64>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a1f      	ldr	r2, [pc, #124]	; (8005cf8 <TIM_OC1_SetConfig+0xdc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d10c      	bne.n	8005c9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f023 0308 	bic.w	r3, r3, #8
 8005c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f023 0304 	bic.w	r3, r3, #4
 8005c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <TIM_OC1_SetConfig+0xd8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_OC1_SetConfig+0x8e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a14      	ldr	r2, [pc, #80]	; (8005cf8 <TIM_OC1_SetConfig+0xdc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d111      	bne.n	8005cce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	621a      	str	r2, [r3, #32]
}
 8005ce8:	bf00      	nop
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40010400 	.word	0x40010400

08005cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f023 0210 	bic.w	r2, r3, #16
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f023 0320 	bic.w	r3, r3, #32
 8005d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a22      	ldr	r2, [pc, #136]	; (8005de0 <TIM_OC2_SetConfig+0xe4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_OC2_SetConfig+0x68>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a21      	ldr	r2, [pc, #132]	; (8005de4 <TIM_OC2_SetConfig+0xe8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d10d      	bne.n	8005d80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a17      	ldr	r2, [pc, #92]	; (8005de0 <TIM_OC2_SetConfig+0xe4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_OC2_SetConfig+0x94>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a16      	ldr	r2, [pc, #88]	; (8005de4 <TIM_OC2_SetConfig+0xe8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d113      	bne.n	8005db8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40010400 	.word	0x40010400

08005de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0303 	bic.w	r3, r3, #3
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a21      	ldr	r2, [pc, #132]	; (8005ec8 <TIM_OC3_SetConfig+0xe0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d003      	beq.n	8005e4e <TIM_OC3_SetConfig+0x66>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a20      	ldr	r2, [pc, #128]	; (8005ecc <TIM_OC3_SetConfig+0xe4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d10d      	bne.n	8005e6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a16      	ldr	r2, [pc, #88]	; (8005ec8 <TIM_OC3_SetConfig+0xe0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_OC3_SetConfig+0x92>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a15      	ldr	r2, [pc, #84]	; (8005ecc <TIM_OC3_SetConfig+0xe4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d113      	bne.n	8005ea2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	621a      	str	r2, [r3, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40010400 	.word	0x40010400

08005ed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	031b      	lsls	r3, r3, #12
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <TIM_OC4_SetConfig+0xa4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC4_SetConfig+0x68>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a11      	ldr	r2, [pc, #68]	; (8005f78 <TIM_OC4_SetConfig+0xa8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d109      	bne.n	8005f4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	019b      	lsls	r3, r3, #6
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40010400 	.word	0x40010400

08005f7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f023 0201 	bic.w	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4a28      	ldr	r2, [pc, #160]	; (8006048 <TIM_TI1_SetConfig+0xcc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d01b      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb0:	d017      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4a25      	ldr	r2, [pc, #148]	; (800604c <TIM_TI1_SetConfig+0xd0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4a24      	ldr	r2, [pc, #144]	; (8006050 <TIM_TI1_SetConfig+0xd4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00f      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4a23      	ldr	r2, [pc, #140]	; (8006054 <TIM_TI1_SetConfig+0xd8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00b      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4a22      	ldr	r2, [pc, #136]	; (8006058 <TIM_TI1_SetConfig+0xdc>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d007      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4a21      	ldr	r2, [pc, #132]	; (800605c <TIM_TI1_SetConfig+0xe0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d003      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4a20      	ldr	r2, [pc, #128]	; (8006060 <TIM_TI1_SetConfig+0xe4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d101      	bne.n	8005fe6 <TIM_TI1_SetConfig+0x6a>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <TIM_TI1_SetConfig+0x6c>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d008      	beq.n	8005ffe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f023 0303 	bic.w	r3, r3, #3
 8005ff2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e003      	b.n	8006006 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800600c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	b2db      	uxtb	r3, r3
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f023 030a 	bic.w	r3, r3, #10
 8006020:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f003 030a 	and.w	r3, r3, #10
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40010000 	.word	0x40010000
 800604c:	40000400 	.word	0x40000400
 8006050:	40000800 	.word	0x40000800
 8006054:	40000c00 	.word	0x40000c00
 8006058:	40010400 	.word	0x40010400
 800605c:	40014000 	.word	0x40014000
 8006060:	40001800 	.word	0x40001800

08006064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f023 0201 	bic.w	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800608e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f023 030a 	bic.w	r3, r3, #10
 80060a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b087      	sub	sp, #28
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f023 0210 	bic.w	r2, r3, #16
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006100:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	031b      	lsls	r3, r3, #12
 8006106:	b29b      	uxth	r3, r3
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006114:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	621a      	str	r2, [r3, #32]
}
 8006130:	bf00      	nop
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f023 0210 	bic.w	r2, r3, #16
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006166:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	031b      	lsls	r3, r3, #12
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006178:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	621a      	str	r2, [r3, #32]
}
 8006190:	bf00      	nop
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f023 0303 	bic.w	r3, r3, #3
 80061c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80061ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	621a      	str	r2, [r3, #32]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006240:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	021b      	lsls	r3, r3, #8
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006252:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	031b      	lsls	r3, r3, #12
 8006258:	b29b      	uxth	r3, r3
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006266:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	031b      	lsls	r3, r3, #12
 800626c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f043 0307 	orr.w	r3, r3, #7
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	021a      	lsls	r2, r3, #8
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	609a      	str	r2, [r3, #8]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	2201      	movs	r2, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a1a      	ldr	r2, [r3, #32]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	43db      	mvns	r3, r3
 8006326:	401a      	ands	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1a      	ldr	r2, [r3, #32]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	fa01 f303 	lsl.w	r3, r1, r3
 800633c:	431a      	orrs	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
	...

08006350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006364:	2302      	movs	r3, #2
 8006366:	e05a      	b.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a21      	ldr	r2, [pc, #132]	; (800642c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d022      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b4:	d01d      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1d      	ldr	r2, [pc, #116]	; (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d018      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a1b      	ldr	r2, [pc, #108]	; (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d013      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1a      	ldr	r2, [pc, #104]	; (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00e      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a18      	ldr	r2, [pc, #96]	; (800643c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d009      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a17      	ldr	r2, [pc, #92]	; (8006440 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d004      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a15      	ldr	r2, [pc, #84]	; (8006444 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d10c      	bne.n	800640c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	4313      	orrs	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40000c00 	.word	0x40000c00
 800643c:	40010400 	.word	0x40010400
 8006440:	40014000 	.word	0x40014000
 8006444:	40001800 	.word	0x40001800

08006448 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006460:	2302      	movs	r3, #2
 8006462:	e03d      	b.n	80064e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <sensor_read_register8>:
		return SENSOR_ERROR;
	}
}

uint8_t sensor_read_register8(uint8_t chipAdd, uint8_t regAdd)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af04      	add	r7, sp, #16
 800651a:	4603      	mov	r3, r0
 800651c:	460a      	mov	r2, r1
 800651e:	71fb      	strb	r3, [r7, #7]
 8006520:	4613      	mov	r3, r2
 8006522:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read( &hi2c3, chipAdd, regAdd, I2C_REG_ADD_SIZE_1_BYTE, &data, I2C_DATA_SIZE_1_BYTE, I2C_TIMEOUT );
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	b299      	uxth	r1, r3
 8006528:	79bb      	ldrb	r3, [r7, #6]
 800652a:	b29a      	uxth	r2, r3
 800652c:	2364      	movs	r3, #100	; 0x64
 800652e:	9302      	str	r3, [sp, #8]
 8006530:	2301      	movs	r3, #1
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	f107 030e 	add.w	r3, r7, #14
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	2301      	movs	r3, #1
 800653c:	4807      	ldr	r0, [pc, #28]	; (800655c <sensor_read_register8+0x48>)
 800653e:	f7fd fa7f 	bl	8003a40 <HAL_I2C_Mem_Read>
 8006542:	4603      	mov	r3, r0
 8006544:	73fb      	strb	r3, [r7, #15]

	if (HAL_OK != status) {
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <sensor_read_register8+0x3c>
		return 0;
 800654c:	2300      	movs	r3, #0
 800654e:	e000      	b.n	8006552 <sensor_read_register8+0x3e>
	} else {
		return data;
 8006550:	7bbb      	ldrb	r3, [r7, #14]
	}
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	2000008c 	.word	0x2000008c

08006560 <sensor_write_register8>:
		return retVal;
	}
}

sensor_status_e sensor_write_register8(uint8_t chipAdd, uint8_t regAdd, uint8_t value)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af04      	add	r7, sp, #16
 8006566:	4603      	mov	r3, r0
 8006568:	71fb      	strb	r3, [r7, #7]
 800656a:	460b      	mov	r3, r1
 800656c:	71bb      	strb	r3, [r7, #6]
 800656e:	4613      	mov	r3, r2
 8006570:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Write( &hi2c3, chipAdd, regAdd, I2C_REG_ADD_SIZE_1_BYTE, &value, I2C_DATA_SIZE_1_BYTE, I2C_TIMEOUT );
 8006572:	79fb      	ldrb	r3, [r7, #7]
 8006574:	b299      	uxth	r1, r3
 8006576:	79bb      	ldrb	r3, [r7, #6]
 8006578:	b29a      	uxth	r2, r3
 800657a:	2364      	movs	r3, #100	; 0x64
 800657c:	9302      	str	r3, [sp, #8]
 800657e:	2301      	movs	r3, #1
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	1d7b      	adds	r3, r7, #5
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	2301      	movs	r3, #1
 8006588:	4807      	ldr	r0, [pc, #28]	; (80065a8 <sensor_write_register8+0x48>)
 800658a:	f7fd f95f 	bl	800384c <HAL_I2C_Mem_Write>
 800658e:	4603      	mov	r3, r0
 8006590:	73fb      	strb	r3, [r7, #15]

    if (HAL_OK != status) {
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <sensor_write_register8+0x3c>
        return SENSOR_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <sensor_write_register8+0x3e>
    } else {
        return SENSOR_OK;
 800659c:	2300      	movs	r3, #0
    }
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	2000008c 	.word	0x2000008c

080065ac <sensor_read_bytes>:
	}
}


sensor_status_e sensor_read_bytes(uint8_t chipAdd, uint8_t regAdd, uint8_t *pBuffer, uint8_t size)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af04      	add	r7, sp, #16
 80065b2:	603a      	str	r2, [r7, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	4603      	mov	r3, r0
 80065b8:	71fb      	strb	r3, [r7, #7]
 80065ba:	460b      	mov	r3, r1
 80065bc:	71bb      	strb	r3, [r7, #6]
 80065be:	4613      	mov	r3, r2
 80065c0:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(&hi2c3, chipAdd, regAdd, I2C_REG_ADD_SIZE_1_BYTE, pBuffer, size, I2C_TIMEOUT);
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	b299      	uxth	r1, r3
 80065c6:	79bb      	ldrb	r3, [r7, #6]
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	797b      	ldrb	r3, [r7, #5]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2064      	movs	r0, #100	; 0x64
 80065d0:	9002      	str	r0, [sp, #8]
 80065d2:	9301      	str	r3, [sp, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	2301      	movs	r3, #1
 80065da:	4807      	ldr	r0, [pc, #28]	; (80065f8 <sensor_read_bytes+0x4c>)
 80065dc:	f7fd fa30 	bl	8003a40 <HAL_I2C_Mem_Read>
 80065e0:	4603      	mov	r3, r0
 80065e2:	73fb      	strb	r3, [r7, #15]

	if (HAL_OK != status) {
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <sensor_read_bytes+0x42>
		return SENSOR_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <sensor_read_bytes+0x44>
	} else {
		return SENSOR_OK;
 80065ee:	2300      	movs	r3, #0
	}
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	2000008c 	.word	0x2000008c

080065fc <__errno>:
 80065fc:	4b01      	ldr	r3, [pc, #4]	; (8006604 <__errno+0x8>)
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	2000000c 	.word	0x2000000c

08006608 <__libc_init_array>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	4d0d      	ldr	r5, [pc, #52]	; (8006640 <__libc_init_array+0x38>)
 800660c:	4c0d      	ldr	r4, [pc, #52]	; (8006644 <__libc_init_array+0x3c>)
 800660e:	1b64      	subs	r4, r4, r5
 8006610:	10a4      	asrs	r4, r4, #2
 8006612:	2600      	movs	r6, #0
 8006614:	42a6      	cmp	r6, r4
 8006616:	d109      	bne.n	800662c <__libc_init_array+0x24>
 8006618:	4d0b      	ldr	r5, [pc, #44]	; (8006648 <__libc_init_array+0x40>)
 800661a:	4c0c      	ldr	r4, [pc, #48]	; (800664c <__libc_init_array+0x44>)
 800661c:	f001 fbe2 	bl	8007de4 <_init>
 8006620:	1b64      	subs	r4, r4, r5
 8006622:	10a4      	asrs	r4, r4, #2
 8006624:	2600      	movs	r6, #0
 8006626:	42a6      	cmp	r6, r4
 8006628:	d105      	bne.n	8006636 <__libc_init_array+0x2e>
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006630:	4798      	blx	r3
 8006632:	3601      	adds	r6, #1
 8006634:	e7ee      	b.n	8006614 <__libc_init_array+0xc>
 8006636:	f855 3b04 	ldr.w	r3, [r5], #4
 800663a:	4798      	blx	r3
 800663c:	3601      	adds	r6, #1
 800663e:	e7f2      	b.n	8006626 <__libc_init_array+0x1e>
 8006640:	08008000 	.word	0x08008000
 8006644:	08008000 	.word	0x08008000
 8006648:	08008000 	.word	0x08008000
 800664c:	08008004 	.word	0x08008004

08006650 <memset>:
 8006650:	4402      	add	r2, r0
 8006652:	4603      	mov	r3, r0
 8006654:	4293      	cmp	r3, r2
 8006656:	d100      	bne.n	800665a <memset+0xa>
 8006658:	4770      	bx	lr
 800665a:	f803 1b01 	strb.w	r1, [r3], #1
 800665e:	e7f9      	b.n	8006654 <memset+0x4>

08006660 <round>:
 8006660:	ec51 0b10 	vmov	r0, r1, d0
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800666a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800666e:	2c13      	cmp	r4, #19
 8006670:	ee10 2a10 	vmov	r2, s0
 8006674:	460b      	mov	r3, r1
 8006676:	dc19      	bgt.n	80066ac <round+0x4c>
 8006678:	2c00      	cmp	r4, #0
 800667a:	da09      	bge.n	8006690 <round+0x30>
 800667c:	3401      	adds	r4, #1
 800667e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006682:	d103      	bne.n	800668c <round+0x2c>
 8006684:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006688:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800668c:	2200      	movs	r2, #0
 800668e:	e028      	b.n	80066e2 <round+0x82>
 8006690:	4d15      	ldr	r5, [pc, #84]	; (80066e8 <round+0x88>)
 8006692:	4125      	asrs	r5, r4
 8006694:	ea01 0605 	and.w	r6, r1, r5
 8006698:	4332      	orrs	r2, r6
 800669a:	d00e      	beq.n	80066ba <round+0x5a>
 800669c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80066a0:	fa42 f404 	asr.w	r4, r2, r4
 80066a4:	4423      	add	r3, r4
 80066a6:	ea23 0305 	bic.w	r3, r3, r5
 80066aa:	e7ef      	b.n	800668c <round+0x2c>
 80066ac:	2c33      	cmp	r4, #51	; 0x33
 80066ae:	dd07      	ble.n	80066c0 <round+0x60>
 80066b0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80066b4:	d101      	bne.n	80066ba <round+0x5a>
 80066b6:	f7f9 fd8d 	bl	80001d4 <__adddf3>
 80066ba:	ec41 0b10 	vmov	d0, r0, r1
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80066c4:	f04f 35ff 	mov.w	r5, #4294967295
 80066c8:	40f5      	lsrs	r5, r6
 80066ca:	4228      	tst	r0, r5
 80066cc:	d0f5      	beq.n	80066ba <round+0x5a>
 80066ce:	2101      	movs	r1, #1
 80066d0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80066d4:	fa01 f404 	lsl.w	r4, r1, r4
 80066d8:	1912      	adds	r2, r2, r4
 80066da:	bf28      	it	cs
 80066dc:	185b      	addcs	r3, r3, r1
 80066de:	ea22 0205 	bic.w	r2, r2, r5
 80066e2:	4619      	mov	r1, r3
 80066e4:	4610      	mov	r0, r2
 80066e6:	e7e8      	b.n	80066ba <round+0x5a>
 80066e8:	000fffff 	.word	0x000fffff
 80066ec:	00000000 	.word	0x00000000

080066f0 <sin>:
 80066f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066f2:	ec53 2b10 	vmov	r2, r3, d0
 80066f6:	4828      	ldr	r0, [pc, #160]	; (8006798 <sin+0xa8>)
 80066f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80066fc:	4281      	cmp	r1, r0
 80066fe:	dc07      	bgt.n	8006710 <sin+0x20>
 8006700:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006790 <sin+0xa0>
 8006704:	2000      	movs	r0, #0
 8006706:	b005      	add	sp, #20
 8006708:	f85d eb04 	ldr.w	lr, [sp], #4
 800670c:	f001 b994 	b.w	8007a38 <__kernel_sin>
 8006710:	4822      	ldr	r0, [pc, #136]	; (800679c <sin+0xac>)
 8006712:	4281      	cmp	r1, r0
 8006714:	dd09      	ble.n	800672a <sin+0x3a>
 8006716:	ee10 0a10 	vmov	r0, s0
 800671a:	4619      	mov	r1, r3
 800671c:	f7f9 fd58 	bl	80001d0 <__aeabi_dsub>
 8006720:	ec41 0b10 	vmov	d0, r0, r1
 8006724:	b005      	add	sp, #20
 8006726:	f85d fb04 	ldr.w	pc, [sp], #4
 800672a:	4668      	mov	r0, sp
 800672c:	f000 faac 	bl	8006c88 <__ieee754_rem_pio2>
 8006730:	f000 0003 	and.w	r0, r0, #3
 8006734:	2801      	cmp	r0, #1
 8006736:	d00c      	beq.n	8006752 <sin+0x62>
 8006738:	2802      	cmp	r0, #2
 800673a:	d011      	beq.n	8006760 <sin+0x70>
 800673c:	b9f0      	cbnz	r0, 800677c <sin+0x8c>
 800673e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006742:	ed9d 0b00 	vldr	d0, [sp]
 8006746:	2001      	movs	r0, #1
 8006748:	f001 f976 	bl	8007a38 <__kernel_sin>
 800674c:	ec51 0b10 	vmov	r0, r1, d0
 8006750:	e7e6      	b.n	8006720 <sin+0x30>
 8006752:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006756:	ed9d 0b00 	vldr	d0, [sp]
 800675a:	f000 fd55 	bl	8007208 <__kernel_cos>
 800675e:	e7f5      	b.n	800674c <sin+0x5c>
 8006760:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006764:	ed9d 0b00 	vldr	d0, [sp]
 8006768:	2001      	movs	r0, #1
 800676a:	f001 f965 	bl	8007a38 <__kernel_sin>
 800676e:	ec53 2b10 	vmov	r2, r3, d0
 8006772:	ee10 0a10 	vmov	r0, s0
 8006776:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800677a:	e7d1      	b.n	8006720 <sin+0x30>
 800677c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006780:	ed9d 0b00 	vldr	d0, [sp]
 8006784:	f000 fd40 	bl	8007208 <__kernel_cos>
 8006788:	e7f1      	b.n	800676e <sin+0x7e>
 800678a:	bf00      	nop
 800678c:	f3af 8000 	nop.w
	...
 8006798:	3fe921fb 	.word	0x3fe921fb
 800679c:	7fefffff 	.word	0x7fefffff

080067a0 <asin>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	ed2d 8b02 	vpush	{d8}
 80067a6:	ec55 4b10 	vmov	r4, r5, d0
 80067aa:	f000 f859 	bl	8006860 <__ieee754_asin>
 80067ae:	4622      	mov	r2, r4
 80067b0:	462b      	mov	r3, r5
 80067b2:	4620      	mov	r0, r4
 80067b4:	4629      	mov	r1, r5
 80067b6:	eeb0 8a40 	vmov.f32	s16, s0
 80067ba:	eef0 8a60 	vmov.f32	s17, s1
 80067be:	f7fa f959 	bl	8000a74 <__aeabi_dcmpun>
 80067c2:	b9a8      	cbnz	r0, 80067f0 <asin+0x50>
 80067c4:	ec45 4b10 	vmov	d0, r4, r5
 80067c8:	f001 f9f4 	bl	8007bb4 <fabs>
 80067cc:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <asin+0x60>)
 80067ce:	ec51 0b10 	vmov	r0, r1, d0
 80067d2:	2200      	movs	r2, #0
 80067d4:	f7fa f944 	bl	8000a60 <__aeabi_dcmpgt>
 80067d8:	b150      	cbz	r0, 80067f0 <asin+0x50>
 80067da:	f7ff ff0f 	bl	80065fc <__errno>
 80067de:	ecbd 8b02 	vpop	{d8}
 80067e2:	2321      	movs	r3, #33	; 0x21
 80067e4:	6003      	str	r3, [r0, #0]
 80067e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067ea:	4806      	ldr	r0, [pc, #24]	; (8006804 <asin+0x64>)
 80067ec:	f001 ba6c 	b.w	8007cc8 <nan>
 80067f0:	eeb0 0a48 	vmov.f32	s0, s16
 80067f4:	eef0 0a68 	vmov.f32	s1, s17
 80067f8:	ecbd 8b02 	vpop	{d8}
 80067fc:	bd38      	pop	{r3, r4, r5, pc}
 80067fe:	bf00      	nop
 8006800:	3ff00000 	.word	0x3ff00000
 8006804:	08007e18 	.word	0x08007e18

08006808 <sqrt>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	ed2d 8b02 	vpush	{d8}
 800680e:	ec55 4b10 	vmov	r4, r5, d0
 8006812:	f000 fc45 	bl	80070a0 <__ieee754_sqrt>
 8006816:	4622      	mov	r2, r4
 8006818:	462b      	mov	r3, r5
 800681a:	4620      	mov	r0, r4
 800681c:	4629      	mov	r1, r5
 800681e:	eeb0 8a40 	vmov.f32	s16, s0
 8006822:	eef0 8a60 	vmov.f32	s17, s1
 8006826:	f7fa f925 	bl	8000a74 <__aeabi_dcmpun>
 800682a:	b990      	cbnz	r0, 8006852 <sqrt+0x4a>
 800682c:	2200      	movs	r2, #0
 800682e:	2300      	movs	r3, #0
 8006830:	4620      	mov	r0, r4
 8006832:	4629      	mov	r1, r5
 8006834:	f7fa f8f6 	bl	8000a24 <__aeabi_dcmplt>
 8006838:	b158      	cbz	r0, 8006852 <sqrt+0x4a>
 800683a:	f7ff fedf 	bl	80065fc <__errno>
 800683e:	2321      	movs	r3, #33	; 0x21
 8006840:	6003      	str	r3, [r0, #0]
 8006842:	2200      	movs	r2, #0
 8006844:	2300      	movs	r3, #0
 8006846:	4610      	mov	r0, r2
 8006848:	4619      	mov	r1, r3
 800684a:	f7f9 ffa3 	bl	8000794 <__aeabi_ddiv>
 800684e:	ec41 0b18 	vmov	d8, r0, r1
 8006852:	eeb0 0a48 	vmov.f32	s0, s16
 8006856:	eef0 0a68 	vmov.f32	s1, s17
 800685a:	ecbd 8b02 	vpop	{d8}
 800685e:	bd38      	pop	{r3, r4, r5, pc}

08006860 <__ieee754_asin>:
 8006860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006864:	ed2d 8b04 	vpush	{d8-d9}
 8006868:	ec55 4b10 	vmov	r4, r5, d0
 800686c:	4bcc      	ldr	r3, [pc, #816]	; (8006ba0 <__ieee754_asin+0x340>)
 800686e:	b083      	sub	sp, #12
 8006870:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006874:	4598      	cmp	r8, r3
 8006876:	9501      	str	r5, [sp, #4]
 8006878:	dd35      	ble.n	80068e6 <__ieee754_asin+0x86>
 800687a:	ee10 3a10 	vmov	r3, s0
 800687e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8006882:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8006886:	ea58 0303 	orrs.w	r3, r8, r3
 800688a:	d117      	bne.n	80068bc <__ieee754_asin+0x5c>
 800688c:	a3aa      	add	r3, pc, #680	; (adr r3, 8006b38 <__ieee754_asin+0x2d8>)
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	ee10 0a10 	vmov	r0, s0
 8006896:	4629      	mov	r1, r5
 8006898:	f7f9 fe52 	bl	8000540 <__aeabi_dmul>
 800689c:	a3a8      	add	r3, pc, #672	; (adr r3, 8006b40 <__ieee754_asin+0x2e0>)
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	4606      	mov	r6, r0
 80068a4:	460f      	mov	r7, r1
 80068a6:	4620      	mov	r0, r4
 80068a8:	4629      	mov	r1, r5
 80068aa:	f7f9 fe49 	bl	8000540 <__aeabi_dmul>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4630      	mov	r0, r6
 80068b4:	4639      	mov	r1, r7
 80068b6:	f7f9 fc8d 	bl	80001d4 <__adddf3>
 80068ba:	e00b      	b.n	80068d4 <__ieee754_asin+0x74>
 80068bc:	ee10 2a10 	vmov	r2, s0
 80068c0:	462b      	mov	r3, r5
 80068c2:	ee10 0a10 	vmov	r0, s0
 80068c6:	4629      	mov	r1, r5
 80068c8:	f7f9 fc82 	bl	80001d0 <__aeabi_dsub>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	f7f9 ff60 	bl	8000794 <__aeabi_ddiv>
 80068d4:	4604      	mov	r4, r0
 80068d6:	460d      	mov	r5, r1
 80068d8:	ec45 4b10 	vmov	d0, r4, r5
 80068dc:	b003      	add	sp, #12
 80068de:	ecbd 8b04 	vpop	{d8-d9}
 80068e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e6:	4baf      	ldr	r3, [pc, #700]	; (8006ba4 <__ieee754_asin+0x344>)
 80068e8:	4598      	cmp	r8, r3
 80068ea:	dc11      	bgt.n	8006910 <__ieee754_asin+0xb0>
 80068ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80068f0:	f280 80ae 	bge.w	8006a50 <__ieee754_asin+0x1f0>
 80068f4:	a394      	add	r3, pc, #592	; (adr r3, 8006b48 <__ieee754_asin+0x2e8>)
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	ee10 0a10 	vmov	r0, s0
 80068fe:	4629      	mov	r1, r5
 8006900:	f7f9 fc68 	bl	80001d4 <__adddf3>
 8006904:	4ba8      	ldr	r3, [pc, #672]	; (8006ba8 <__ieee754_asin+0x348>)
 8006906:	2200      	movs	r2, #0
 8006908:	f7fa f8aa 	bl	8000a60 <__aeabi_dcmpgt>
 800690c:	2800      	cmp	r0, #0
 800690e:	d1e3      	bne.n	80068d8 <__ieee754_asin+0x78>
 8006910:	ec45 4b10 	vmov	d0, r4, r5
 8006914:	f001 f94e 	bl	8007bb4 <fabs>
 8006918:	49a3      	ldr	r1, [pc, #652]	; (8006ba8 <__ieee754_asin+0x348>)
 800691a:	ec53 2b10 	vmov	r2, r3, d0
 800691e:	2000      	movs	r0, #0
 8006920:	f7f9 fc56 	bl	80001d0 <__aeabi_dsub>
 8006924:	4ba1      	ldr	r3, [pc, #644]	; (8006bac <__ieee754_asin+0x34c>)
 8006926:	2200      	movs	r2, #0
 8006928:	f7f9 fe0a 	bl	8000540 <__aeabi_dmul>
 800692c:	a388      	add	r3, pc, #544	; (adr r3, 8006b50 <__ieee754_asin+0x2f0>)
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	4604      	mov	r4, r0
 8006934:	460d      	mov	r5, r1
 8006936:	f7f9 fe03 	bl	8000540 <__aeabi_dmul>
 800693a:	a387      	add	r3, pc, #540	; (adr r3, 8006b58 <__ieee754_asin+0x2f8>)
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f7f9 fc48 	bl	80001d4 <__adddf3>
 8006944:	4622      	mov	r2, r4
 8006946:	462b      	mov	r3, r5
 8006948:	f7f9 fdfa 	bl	8000540 <__aeabi_dmul>
 800694c:	a384      	add	r3, pc, #528	; (adr r3, 8006b60 <__ieee754_asin+0x300>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f7f9 fc3d 	bl	80001d0 <__aeabi_dsub>
 8006956:	4622      	mov	r2, r4
 8006958:	462b      	mov	r3, r5
 800695a:	f7f9 fdf1 	bl	8000540 <__aeabi_dmul>
 800695e:	a382      	add	r3, pc, #520	; (adr r3, 8006b68 <__ieee754_asin+0x308>)
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	f7f9 fc36 	bl	80001d4 <__adddf3>
 8006968:	4622      	mov	r2, r4
 800696a:	462b      	mov	r3, r5
 800696c:	f7f9 fde8 	bl	8000540 <__aeabi_dmul>
 8006970:	a37f      	add	r3, pc, #508	; (adr r3, 8006b70 <__ieee754_asin+0x310>)
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	f7f9 fc2b 	bl	80001d0 <__aeabi_dsub>
 800697a:	4622      	mov	r2, r4
 800697c:	462b      	mov	r3, r5
 800697e:	f7f9 fddf 	bl	8000540 <__aeabi_dmul>
 8006982:	a37d      	add	r3, pc, #500	; (adr r3, 8006b78 <__ieee754_asin+0x318>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7f9 fc24 	bl	80001d4 <__adddf3>
 800698c:	4622      	mov	r2, r4
 800698e:	462b      	mov	r3, r5
 8006990:	f7f9 fdd6 	bl	8000540 <__aeabi_dmul>
 8006994:	a37a      	add	r3, pc, #488	; (adr r3, 8006b80 <__ieee754_asin+0x320>)
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	ec41 0b18 	vmov	d8, r0, r1
 800699e:	4620      	mov	r0, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	f7f9 fdcd 	bl	8000540 <__aeabi_dmul>
 80069a6:	a378      	add	r3, pc, #480	; (adr r3, 8006b88 <__ieee754_asin+0x328>)
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f7f9 fc10 	bl	80001d0 <__aeabi_dsub>
 80069b0:	4622      	mov	r2, r4
 80069b2:	462b      	mov	r3, r5
 80069b4:	f7f9 fdc4 	bl	8000540 <__aeabi_dmul>
 80069b8:	a375      	add	r3, pc, #468	; (adr r3, 8006b90 <__ieee754_asin+0x330>)
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f7f9 fc09 	bl	80001d4 <__adddf3>
 80069c2:	4622      	mov	r2, r4
 80069c4:	462b      	mov	r3, r5
 80069c6:	f7f9 fdbb 	bl	8000540 <__aeabi_dmul>
 80069ca:	a373      	add	r3, pc, #460	; (adr r3, 8006b98 <__ieee754_asin+0x338>)
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f7f9 fbfe 	bl	80001d0 <__aeabi_dsub>
 80069d4:	4622      	mov	r2, r4
 80069d6:	462b      	mov	r3, r5
 80069d8:	f7f9 fdb2 	bl	8000540 <__aeabi_dmul>
 80069dc:	4b72      	ldr	r3, [pc, #456]	; (8006ba8 <__ieee754_asin+0x348>)
 80069de:	2200      	movs	r2, #0
 80069e0:	f7f9 fbf8 	bl	80001d4 <__adddf3>
 80069e4:	ec45 4b10 	vmov	d0, r4, r5
 80069e8:	4606      	mov	r6, r0
 80069ea:	460f      	mov	r7, r1
 80069ec:	f000 fb58 	bl	80070a0 <__ieee754_sqrt>
 80069f0:	4b6f      	ldr	r3, [pc, #444]	; (8006bb0 <__ieee754_asin+0x350>)
 80069f2:	4598      	cmp	r8, r3
 80069f4:	ec5b ab10 	vmov	sl, fp, d0
 80069f8:	f340 80dc 	ble.w	8006bb4 <__ieee754_asin+0x354>
 80069fc:	4632      	mov	r2, r6
 80069fe:	463b      	mov	r3, r7
 8006a00:	ec51 0b18 	vmov	r0, r1, d8
 8006a04:	f7f9 fec6 	bl	8000794 <__aeabi_ddiv>
 8006a08:	4652      	mov	r2, sl
 8006a0a:	465b      	mov	r3, fp
 8006a0c:	f7f9 fd98 	bl	8000540 <__aeabi_dmul>
 8006a10:	4652      	mov	r2, sl
 8006a12:	465b      	mov	r3, fp
 8006a14:	f7f9 fbde 	bl	80001d4 <__adddf3>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	f7f9 fbda 	bl	80001d4 <__adddf3>
 8006a20:	a347      	add	r3, pc, #284	; (adr r3, 8006b40 <__ieee754_asin+0x2e0>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	f7f9 fbd3 	bl	80001d0 <__aeabi_dsub>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	a142      	add	r1, pc, #264	; (adr r1, 8006b38 <__ieee754_asin+0x2d8>)
 8006a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a34:	f7f9 fbcc 	bl	80001d0 <__aeabi_dsub>
 8006a38:	9b01      	ldr	r3, [sp, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bfdc      	itt	le
 8006a3e:	4602      	movle	r2, r0
 8006a40:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006a44:	4604      	mov	r4, r0
 8006a46:	460d      	mov	r5, r1
 8006a48:	bfdc      	itt	le
 8006a4a:	4614      	movle	r4, r2
 8006a4c:	461d      	movle	r5, r3
 8006a4e:	e743      	b.n	80068d8 <__ieee754_asin+0x78>
 8006a50:	ee10 2a10 	vmov	r2, s0
 8006a54:	ee10 0a10 	vmov	r0, s0
 8006a58:	462b      	mov	r3, r5
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	f7f9 fd70 	bl	8000540 <__aeabi_dmul>
 8006a60:	a33b      	add	r3, pc, #236	; (adr r3, 8006b50 <__ieee754_asin+0x2f0>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	4606      	mov	r6, r0
 8006a68:	460f      	mov	r7, r1
 8006a6a:	f7f9 fd69 	bl	8000540 <__aeabi_dmul>
 8006a6e:	a33a      	add	r3, pc, #232	; (adr r3, 8006b58 <__ieee754_asin+0x2f8>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f7f9 fbae 	bl	80001d4 <__adddf3>
 8006a78:	4632      	mov	r2, r6
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	f7f9 fd60 	bl	8000540 <__aeabi_dmul>
 8006a80:	a337      	add	r3, pc, #220	; (adr r3, 8006b60 <__ieee754_asin+0x300>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	f7f9 fba3 	bl	80001d0 <__aeabi_dsub>
 8006a8a:	4632      	mov	r2, r6
 8006a8c:	463b      	mov	r3, r7
 8006a8e:	f7f9 fd57 	bl	8000540 <__aeabi_dmul>
 8006a92:	a335      	add	r3, pc, #212	; (adr r3, 8006b68 <__ieee754_asin+0x308>)
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f7f9 fb9c 	bl	80001d4 <__adddf3>
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	f7f9 fd4e 	bl	8000540 <__aeabi_dmul>
 8006aa4:	a332      	add	r3, pc, #200	; (adr r3, 8006b70 <__ieee754_asin+0x310>)
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f7f9 fb91 	bl	80001d0 <__aeabi_dsub>
 8006aae:	4632      	mov	r2, r6
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	f7f9 fd45 	bl	8000540 <__aeabi_dmul>
 8006ab6:	a330      	add	r3, pc, #192	; (adr r3, 8006b78 <__ieee754_asin+0x318>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fb8a 	bl	80001d4 <__adddf3>
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	f7f9 fd3c 	bl	8000540 <__aeabi_dmul>
 8006ac8:	a32d      	add	r3, pc, #180	; (adr r3, 8006b80 <__ieee754_asin+0x320>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	4680      	mov	r8, r0
 8006ad0:	4689      	mov	r9, r1
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	f7f9 fd33 	bl	8000540 <__aeabi_dmul>
 8006ada:	a32b      	add	r3, pc, #172	; (adr r3, 8006b88 <__ieee754_asin+0x328>)
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f7f9 fb76 	bl	80001d0 <__aeabi_dsub>
 8006ae4:	4632      	mov	r2, r6
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	f7f9 fd2a 	bl	8000540 <__aeabi_dmul>
 8006aec:	a328      	add	r3, pc, #160	; (adr r3, 8006b90 <__ieee754_asin+0x330>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f7f9 fb6f 	bl	80001d4 <__adddf3>
 8006af6:	4632      	mov	r2, r6
 8006af8:	463b      	mov	r3, r7
 8006afa:	f7f9 fd21 	bl	8000540 <__aeabi_dmul>
 8006afe:	a326      	add	r3, pc, #152	; (adr r3, 8006b98 <__ieee754_asin+0x338>)
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	f7f9 fb64 	bl	80001d0 <__aeabi_dsub>
 8006b08:	4632      	mov	r2, r6
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	f7f9 fd18 	bl	8000540 <__aeabi_dmul>
 8006b10:	4b25      	ldr	r3, [pc, #148]	; (8006ba8 <__ieee754_asin+0x348>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	f7f9 fb5e 	bl	80001d4 <__adddf3>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	4649      	mov	r1, r9
 8006b20:	f7f9 fe38 	bl	8000794 <__aeabi_ddiv>
 8006b24:	4622      	mov	r2, r4
 8006b26:	462b      	mov	r3, r5
 8006b28:	f7f9 fd0a 	bl	8000540 <__aeabi_dmul>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4620      	mov	r0, r4
 8006b32:	4629      	mov	r1, r5
 8006b34:	e6bf      	b.n	80068b6 <__ieee754_asin+0x56>
 8006b36:	bf00      	nop
 8006b38:	54442d18 	.word	0x54442d18
 8006b3c:	3ff921fb 	.word	0x3ff921fb
 8006b40:	33145c07 	.word	0x33145c07
 8006b44:	3c91a626 	.word	0x3c91a626
 8006b48:	8800759c 	.word	0x8800759c
 8006b4c:	7e37e43c 	.word	0x7e37e43c
 8006b50:	0dfdf709 	.word	0x0dfdf709
 8006b54:	3f023de1 	.word	0x3f023de1
 8006b58:	7501b288 	.word	0x7501b288
 8006b5c:	3f49efe0 	.word	0x3f49efe0
 8006b60:	b5688f3b 	.word	0xb5688f3b
 8006b64:	3fa48228 	.word	0x3fa48228
 8006b68:	0e884455 	.word	0x0e884455
 8006b6c:	3fc9c155 	.word	0x3fc9c155
 8006b70:	03eb6f7d 	.word	0x03eb6f7d
 8006b74:	3fd4d612 	.word	0x3fd4d612
 8006b78:	55555555 	.word	0x55555555
 8006b7c:	3fc55555 	.word	0x3fc55555
 8006b80:	b12e9282 	.word	0xb12e9282
 8006b84:	3fb3b8c5 	.word	0x3fb3b8c5
 8006b88:	1b8d0159 	.word	0x1b8d0159
 8006b8c:	3fe6066c 	.word	0x3fe6066c
 8006b90:	9c598ac8 	.word	0x9c598ac8
 8006b94:	40002ae5 	.word	0x40002ae5
 8006b98:	1c8a2d4b 	.word	0x1c8a2d4b
 8006b9c:	40033a27 	.word	0x40033a27
 8006ba0:	3fefffff 	.word	0x3fefffff
 8006ba4:	3fdfffff 	.word	0x3fdfffff
 8006ba8:	3ff00000 	.word	0x3ff00000
 8006bac:	3fe00000 	.word	0x3fe00000
 8006bb0:	3fef3332 	.word	0x3fef3332
 8006bb4:	ee10 2a10 	vmov	r2, s0
 8006bb8:	ee10 0a10 	vmov	r0, s0
 8006bbc:	465b      	mov	r3, fp
 8006bbe:	4659      	mov	r1, fp
 8006bc0:	f7f9 fb08 	bl	80001d4 <__adddf3>
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	ec41 0b19 	vmov	d9, r0, r1
 8006bcc:	ec51 0b18 	vmov	r0, r1, d8
 8006bd0:	f7f9 fde0 	bl	8000794 <__aeabi_ddiv>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	ec51 0b19 	vmov	r0, r1, d9
 8006bdc:	f7f9 fcb0 	bl	8000540 <__aeabi_dmul>
 8006be0:	f04f 0800 	mov.w	r8, #0
 8006be4:	4606      	mov	r6, r0
 8006be6:	460f      	mov	r7, r1
 8006be8:	4642      	mov	r2, r8
 8006bea:	465b      	mov	r3, fp
 8006bec:	4640      	mov	r0, r8
 8006bee:	4659      	mov	r1, fp
 8006bf0:	f7f9 fca6 	bl	8000540 <__aeabi_dmul>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	f7f9 fae8 	bl	80001d0 <__aeabi_dsub>
 8006c00:	4642      	mov	r2, r8
 8006c02:	4604      	mov	r4, r0
 8006c04:	460d      	mov	r5, r1
 8006c06:	465b      	mov	r3, fp
 8006c08:	4650      	mov	r0, sl
 8006c0a:	4659      	mov	r1, fp
 8006c0c:	f7f9 fae2 	bl	80001d4 <__adddf3>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4620      	mov	r0, r4
 8006c16:	4629      	mov	r1, r5
 8006c18:	f7f9 fdbc 	bl	8000794 <__aeabi_ddiv>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	f7f9 fad8 	bl	80001d4 <__adddf3>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	a113      	add	r1, pc, #76	; (adr r1, 8006c78 <__ieee754_asin+0x418>)
 8006c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c2e:	f7f9 facf 	bl	80001d0 <__aeabi_dsub>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4630      	mov	r0, r6
 8006c38:	4639      	mov	r1, r7
 8006c3a:	f7f9 fac9 	bl	80001d0 <__aeabi_dsub>
 8006c3e:	4642      	mov	r2, r8
 8006c40:	4604      	mov	r4, r0
 8006c42:	460d      	mov	r5, r1
 8006c44:	465b      	mov	r3, fp
 8006c46:	4640      	mov	r0, r8
 8006c48:	4659      	mov	r1, fp
 8006c4a:	f7f9 fac3 	bl	80001d4 <__adddf3>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	a10b      	add	r1, pc, #44	; (adr r1, 8006c80 <__ieee754_asin+0x420>)
 8006c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c58:	f7f9 faba 	bl	80001d0 <__aeabi_dsub>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4620      	mov	r0, r4
 8006c62:	4629      	mov	r1, r5
 8006c64:	f7f9 fab4 	bl	80001d0 <__aeabi_dsub>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	a104      	add	r1, pc, #16	; (adr r1, 8006c80 <__ieee754_asin+0x420>)
 8006c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c72:	e6df      	b.n	8006a34 <__ieee754_asin+0x1d4>
 8006c74:	f3af 8000 	nop.w
 8006c78:	33145c07 	.word	0x33145c07
 8006c7c:	3c91a626 	.word	0x3c91a626
 8006c80:	54442d18 	.word	0x54442d18
 8006c84:	3fe921fb 	.word	0x3fe921fb

08006c88 <__ieee754_rem_pio2>:
 8006c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8c:	ed2d 8b02 	vpush	{d8}
 8006c90:	ec55 4b10 	vmov	r4, r5, d0
 8006c94:	4bca      	ldr	r3, [pc, #808]	; (8006fc0 <__ieee754_rem_pio2+0x338>)
 8006c96:	b08b      	sub	sp, #44	; 0x2c
 8006c98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006c9c:	4598      	cmp	r8, r3
 8006c9e:	4682      	mov	sl, r0
 8006ca0:	9502      	str	r5, [sp, #8]
 8006ca2:	dc08      	bgt.n	8006cb6 <__ieee754_rem_pio2+0x2e>
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	ed80 0b00 	vstr	d0, [r0]
 8006cac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006cb0:	f04f 0b00 	mov.w	fp, #0
 8006cb4:	e028      	b.n	8006d08 <__ieee754_rem_pio2+0x80>
 8006cb6:	4bc3      	ldr	r3, [pc, #780]	; (8006fc4 <__ieee754_rem_pio2+0x33c>)
 8006cb8:	4598      	cmp	r8, r3
 8006cba:	dc78      	bgt.n	8006dae <__ieee754_rem_pio2+0x126>
 8006cbc:	9b02      	ldr	r3, [sp, #8]
 8006cbe:	4ec2      	ldr	r6, [pc, #776]	; (8006fc8 <__ieee754_rem_pio2+0x340>)
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	ee10 0a10 	vmov	r0, s0
 8006cc6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006f88 <__ieee754_rem_pio2+0x300>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	4629      	mov	r1, r5
 8006cce:	dd39      	ble.n	8006d44 <__ieee754_rem_pio2+0xbc>
 8006cd0:	f7f9 fa7e 	bl	80001d0 <__aeabi_dsub>
 8006cd4:	45b0      	cmp	r8, r6
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	460d      	mov	r5, r1
 8006cda:	d01b      	beq.n	8006d14 <__ieee754_rem_pio2+0x8c>
 8006cdc:	a3ac      	add	r3, pc, #688	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x308>)
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	f7f9 fa75 	bl	80001d0 <__aeabi_dsub>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	e9ca 2300 	strd	r2, r3, [sl]
 8006cee:	4620      	mov	r0, r4
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	f7f9 fa6d 	bl	80001d0 <__aeabi_dsub>
 8006cf6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x308>)
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	f7f9 fa68 	bl	80001d0 <__aeabi_dsub>
 8006d00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d04:	f04f 0b01 	mov.w	fp, #1
 8006d08:	4658      	mov	r0, fp
 8006d0a:	b00b      	add	sp, #44	; 0x2c
 8006d0c:	ecbd 8b02 	vpop	{d8}
 8006d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d14:	a3a0      	add	r3, pc, #640	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x310>)
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 fa59 	bl	80001d0 <__aeabi_dsub>
 8006d1e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x318>)
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	4604      	mov	r4, r0
 8006d26:	460d      	mov	r5, r1
 8006d28:	f7f9 fa52 	bl	80001d0 <__aeabi_dsub>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	e9ca 2300 	strd	r2, r3, [sl]
 8006d34:	4620      	mov	r0, r4
 8006d36:	4629      	mov	r1, r5
 8006d38:	f7f9 fa4a 	bl	80001d0 <__aeabi_dsub>
 8006d3c:	a398      	add	r3, pc, #608	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x318>)
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	e7db      	b.n	8006cfc <__ieee754_rem_pio2+0x74>
 8006d44:	f7f9 fa46 	bl	80001d4 <__adddf3>
 8006d48:	45b0      	cmp	r8, r6
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	460d      	mov	r5, r1
 8006d4e:	d016      	beq.n	8006d7e <__ieee754_rem_pio2+0xf6>
 8006d50:	a38f      	add	r3, pc, #572	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x308>)
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f7f9 fa3d 	bl	80001d4 <__adddf3>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	e9ca 2300 	strd	r2, r3, [sl]
 8006d62:	4620      	mov	r0, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	f7f9 fa33 	bl	80001d0 <__aeabi_dsub>
 8006d6a:	a389      	add	r3, pc, #548	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x308>)
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	f7f9 fa30 	bl	80001d4 <__adddf3>
 8006d74:	f04f 3bff 	mov.w	fp, #4294967295
 8006d78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d7c:	e7c4      	b.n	8006d08 <__ieee754_rem_pio2+0x80>
 8006d7e:	a386      	add	r3, pc, #536	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x310>)
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	f7f9 fa26 	bl	80001d4 <__adddf3>
 8006d88:	a385      	add	r3, pc, #532	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x318>)
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	4604      	mov	r4, r0
 8006d90:	460d      	mov	r5, r1
 8006d92:	f7f9 fa1f 	bl	80001d4 <__adddf3>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	e9ca 2300 	strd	r2, r3, [sl]
 8006d9e:	4620      	mov	r0, r4
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7f9 fa15 	bl	80001d0 <__aeabi_dsub>
 8006da6:	a37e      	add	r3, pc, #504	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x318>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	e7e0      	b.n	8006d70 <__ieee754_rem_pio2+0xe8>
 8006dae:	4b87      	ldr	r3, [pc, #540]	; (8006fcc <__ieee754_rem_pio2+0x344>)
 8006db0:	4598      	cmp	r8, r3
 8006db2:	f300 80d9 	bgt.w	8006f68 <__ieee754_rem_pio2+0x2e0>
 8006db6:	f000 fefd 	bl	8007bb4 <fabs>
 8006dba:	ec55 4b10 	vmov	r4, r5, d0
 8006dbe:	ee10 0a10 	vmov	r0, s0
 8006dc2:	a379      	add	r3, pc, #484	; (adr r3, 8006fa8 <__ieee754_rem_pio2+0x320>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fbb9 	bl	8000540 <__aeabi_dmul>
 8006dce:	4b80      	ldr	r3, [pc, #512]	; (8006fd0 <__ieee754_rem_pio2+0x348>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f7f9 f9ff 	bl	80001d4 <__adddf3>
 8006dd6:	f7f9 fe63 	bl	8000aa0 <__aeabi_d2iz>
 8006dda:	4683      	mov	fp, r0
 8006ddc:	f7f9 fb46 	bl	800046c <__aeabi_i2d>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	ec43 2b18 	vmov	d8, r2, r3
 8006de8:	a367      	add	r3, pc, #412	; (adr r3, 8006f88 <__ieee754_rem_pio2+0x300>)
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	f7f9 fba7 	bl	8000540 <__aeabi_dmul>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4620      	mov	r0, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7f9 f9e9 	bl	80001d0 <__aeabi_dsub>
 8006dfe:	a364      	add	r3, pc, #400	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x308>)
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	4606      	mov	r6, r0
 8006e06:	460f      	mov	r7, r1
 8006e08:	ec51 0b18 	vmov	r0, r1, d8
 8006e0c:	f7f9 fb98 	bl	8000540 <__aeabi_dmul>
 8006e10:	f1bb 0f1f 	cmp.w	fp, #31
 8006e14:	4604      	mov	r4, r0
 8006e16:	460d      	mov	r5, r1
 8006e18:	dc0d      	bgt.n	8006e36 <__ieee754_rem_pio2+0x1ae>
 8006e1a:	4b6e      	ldr	r3, [pc, #440]	; (8006fd4 <__ieee754_rem_pio2+0x34c>)
 8006e1c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e24:	4543      	cmp	r3, r8
 8006e26:	d006      	beq.n	8006e36 <__ieee754_rem_pio2+0x1ae>
 8006e28:	4622      	mov	r2, r4
 8006e2a:	462b      	mov	r3, r5
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	f7f9 f9ce 	bl	80001d0 <__aeabi_dsub>
 8006e34:	e00f      	b.n	8006e56 <__ieee754_rem_pio2+0x1ce>
 8006e36:	462b      	mov	r3, r5
 8006e38:	4622      	mov	r2, r4
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	f7f9 f9c7 	bl	80001d0 <__aeabi_dsub>
 8006e42:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006e46:	9303      	str	r3, [sp, #12]
 8006e48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e4c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006e50:	f1b8 0f10 	cmp.w	r8, #16
 8006e54:	dc02      	bgt.n	8006e5c <__ieee754_rem_pio2+0x1d4>
 8006e56:	e9ca 0100 	strd	r0, r1, [sl]
 8006e5a:	e039      	b.n	8006ed0 <__ieee754_rem_pio2+0x248>
 8006e5c:	a34e      	add	r3, pc, #312	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x310>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	ec51 0b18 	vmov	r0, r1, d8
 8006e66:	f7f9 fb6b 	bl	8000540 <__aeabi_dmul>
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	460d      	mov	r5, r1
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4630      	mov	r0, r6
 8006e74:	4639      	mov	r1, r7
 8006e76:	f7f9 f9ab 	bl	80001d0 <__aeabi_dsub>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4680      	mov	r8, r0
 8006e80:	4689      	mov	r9, r1
 8006e82:	4630      	mov	r0, r6
 8006e84:	4639      	mov	r1, r7
 8006e86:	f7f9 f9a3 	bl	80001d0 <__aeabi_dsub>
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	f7f9 f99f 	bl	80001d0 <__aeabi_dsub>
 8006e92:	a343      	add	r3, pc, #268	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x318>)
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	4604      	mov	r4, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	ec51 0b18 	vmov	r0, r1, d8
 8006ea0:	f7f9 fb4e 	bl	8000540 <__aeabi_dmul>
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	f7f9 f992 	bl	80001d0 <__aeabi_dsub>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	f7f9 f98a 	bl	80001d0 <__aeabi_dsub>
 8006ebc:	9a03      	ldr	r2, [sp, #12]
 8006ebe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b31      	cmp	r3, #49	; 0x31
 8006ec6:	dc24      	bgt.n	8006f12 <__ieee754_rem_pio2+0x28a>
 8006ec8:	e9ca 0100 	strd	r0, r1, [sl]
 8006ecc:	4646      	mov	r6, r8
 8006ece:	464f      	mov	r7, r9
 8006ed0:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	4642      	mov	r2, r8
 8006ed8:	464b      	mov	r3, r9
 8006eda:	4639      	mov	r1, r7
 8006edc:	f7f9 f978 	bl	80001d0 <__aeabi_dsub>
 8006ee0:	462b      	mov	r3, r5
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	f7f9 f974 	bl	80001d0 <__aeabi_dsub>
 8006ee8:	9b02      	ldr	r3, [sp, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ef0:	f6bf af0a 	bge.w	8006d08 <__ieee754_rem_pio2+0x80>
 8006ef4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ef8:	f8ca 3004 	str.w	r3, [sl, #4]
 8006efc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f00:	f8ca 8000 	str.w	r8, [sl]
 8006f04:	f8ca 0008 	str.w	r0, [sl, #8]
 8006f08:	f8ca 300c 	str.w	r3, [sl, #12]
 8006f0c:	f1cb 0b00 	rsb	fp, fp, #0
 8006f10:	e6fa      	b.n	8006d08 <__ieee754_rem_pio2+0x80>
 8006f12:	a327      	add	r3, pc, #156	; (adr r3, 8006fb0 <__ieee754_rem_pio2+0x328>)
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	ec51 0b18 	vmov	r0, r1, d8
 8006f1c:	f7f9 fb10 	bl	8000540 <__aeabi_dmul>
 8006f20:	4604      	mov	r4, r0
 8006f22:	460d      	mov	r5, r1
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4640      	mov	r0, r8
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	f7f9 f950 	bl	80001d0 <__aeabi_dsub>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4606      	mov	r6, r0
 8006f36:	460f      	mov	r7, r1
 8006f38:	4640      	mov	r0, r8
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	f7f9 f948 	bl	80001d0 <__aeabi_dsub>
 8006f40:	4622      	mov	r2, r4
 8006f42:	462b      	mov	r3, r5
 8006f44:	f7f9 f944 	bl	80001d0 <__aeabi_dsub>
 8006f48:	a31b      	add	r3, pc, #108	; (adr r3, 8006fb8 <__ieee754_rem_pio2+0x330>)
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	4604      	mov	r4, r0
 8006f50:	460d      	mov	r5, r1
 8006f52:	ec51 0b18 	vmov	r0, r1, d8
 8006f56:	f7f9 faf3 	bl	8000540 <__aeabi_dmul>
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	f7f9 f937 	bl	80001d0 <__aeabi_dsub>
 8006f62:	4604      	mov	r4, r0
 8006f64:	460d      	mov	r5, r1
 8006f66:	e75f      	b.n	8006e28 <__ieee754_rem_pio2+0x1a0>
 8006f68:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <__ieee754_rem_pio2+0x350>)
 8006f6a:	4598      	cmp	r8, r3
 8006f6c:	dd36      	ble.n	8006fdc <__ieee754_rem_pio2+0x354>
 8006f6e:	ee10 2a10 	vmov	r2, s0
 8006f72:	462b      	mov	r3, r5
 8006f74:	4620      	mov	r0, r4
 8006f76:	4629      	mov	r1, r5
 8006f78:	f7f9 f92a 	bl	80001d0 <__aeabi_dsub>
 8006f7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006f80:	e9ca 0100 	strd	r0, r1, [sl]
 8006f84:	e694      	b.n	8006cb0 <__ieee754_rem_pio2+0x28>
 8006f86:	bf00      	nop
 8006f88:	54400000 	.word	0x54400000
 8006f8c:	3ff921fb 	.word	0x3ff921fb
 8006f90:	1a626331 	.word	0x1a626331
 8006f94:	3dd0b461 	.word	0x3dd0b461
 8006f98:	1a600000 	.word	0x1a600000
 8006f9c:	3dd0b461 	.word	0x3dd0b461
 8006fa0:	2e037073 	.word	0x2e037073
 8006fa4:	3ba3198a 	.word	0x3ba3198a
 8006fa8:	6dc9c883 	.word	0x6dc9c883
 8006fac:	3fe45f30 	.word	0x3fe45f30
 8006fb0:	2e000000 	.word	0x2e000000
 8006fb4:	3ba3198a 	.word	0x3ba3198a
 8006fb8:	252049c1 	.word	0x252049c1
 8006fbc:	397b839a 	.word	0x397b839a
 8006fc0:	3fe921fb 	.word	0x3fe921fb
 8006fc4:	4002d97b 	.word	0x4002d97b
 8006fc8:	3ff921fb 	.word	0x3ff921fb
 8006fcc:	413921fb 	.word	0x413921fb
 8006fd0:	3fe00000 	.word	0x3fe00000
 8006fd4:	08007e1c 	.word	0x08007e1c
 8006fd8:	7fefffff 	.word	0x7fefffff
 8006fdc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006fe0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006fe4:	ee10 0a10 	vmov	r0, s0
 8006fe8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006fec:	ee10 6a10 	vmov	r6, s0
 8006ff0:	460f      	mov	r7, r1
 8006ff2:	f7f9 fd55 	bl	8000aa0 <__aeabi_d2iz>
 8006ff6:	f7f9 fa39 	bl	800046c <__aeabi_i2d>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4630      	mov	r0, r6
 8007000:	4639      	mov	r1, r7
 8007002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007006:	f7f9 f8e3 	bl	80001d0 <__aeabi_dsub>
 800700a:	4b23      	ldr	r3, [pc, #140]	; (8007098 <__ieee754_rem_pio2+0x410>)
 800700c:	2200      	movs	r2, #0
 800700e:	f7f9 fa97 	bl	8000540 <__aeabi_dmul>
 8007012:	460f      	mov	r7, r1
 8007014:	4606      	mov	r6, r0
 8007016:	f7f9 fd43 	bl	8000aa0 <__aeabi_d2iz>
 800701a:	f7f9 fa27 	bl	800046c <__aeabi_i2d>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4630      	mov	r0, r6
 8007024:	4639      	mov	r1, r7
 8007026:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800702a:	f7f9 f8d1 	bl	80001d0 <__aeabi_dsub>
 800702e:	4b1a      	ldr	r3, [pc, #104]	; (8007098 <__ieee754_rem_pio2+0x410>)
 8007030:	2200      	movs	r2, #0
 8007032:	f7f9 fa85 	bl	8000540 <__aeabi_dmul>
 8007036:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800703a:	ad04      	add	r5, sp, #16
 800703c:	f04f 0803 	mov.w	r8, #3
 8007040:	46a9      	mov	r9, r5
 8007042:	2600      	movs	r6, #0
 8007044:	2700      	movs	r7, #0
 8007046:	4632      	mov	r2, r6
 8007048:	463b      	mov	r3, r7
 800704a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800704e:	46c3      	mov	fp, r8
 8007050:	3d08      	subs	r5, #8
 8007052:	f108 38ff 	add.w	r8, r8, #4294967295
 8007056:	f7f9 fcdb 	bl	8000a10 <__aeabi_dcmpeq>
 800705a:	2800      	cmp	r0, #0
 800705c:	d1f3      	bne.n	8007046 <__ieee754_rem_pio2+0x3be>
 800705e:	4b0f      	ldr	r3, [pc, #60]	; (800709c <__ieee754_rem_pio2+0x414>)
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	2302      	movs	r3, #2
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	4622      	mov	r2, r4
 8007068:	465b      	mov	r3, fp
 800706a:	4651      	mov	r1, sl
 800706c:	4648      	mov	r0, r9
 800706e:	f000 f993 	bl	8007398 <__kernel_rem_pio2>
 8007072:	9b02      	ldr	r3, [sp, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	4683      	mov	fp, r0
 8007078:	f6bf ae46 	bge.w	8006d08 <__ieee754_rem_pio2+0x80>
 800707c:	e9da 2100 	ldrd	r2, r1, [sl]
 8007080:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007084:	e9ca 2300 	strd	r2, r3, [sl]
 8007088:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800708c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007090:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007094:	e73a      	b.n	8006f0c <__ieee754_rem_pio2+0x284>
 8007096:	bf00      	nop
 8007098:	41700000 	.word	0x41700000
 800709c:	08007e9c 	.word	0x08007e9c

080070a0 <__ieee754_sqrt>:
 80070a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a4:	ec55 4b10 	vmov	r4, r5, d0
 80070a8:	4e55      	ldr	r6, [pc, #340]	; (8007200 <__ieee754_sqrt+0x160>)
 80070aa:	43ae      	bics	r6, r5
 80070ac:	ee10 0a10 	vmov	r0, s0
 80070b0:	ee10 3a10 	vmov	r3, s0
 80070b4:	462a      	mov	r2, r5
 80070b6:	4629      	mov	r1, r5
 80070b8:	d110      	bne.n	80070dc <__ieee754_sqrt+0x3c>
 80070ba:	ee10 2a10 	vmov	r2, s0
 80070be:	462b      	mov	r3, r5
 80070c0:	f7f9 fa3e 	bl	8000540 <__aeabi_dmul>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4620      	mov	r0, r4
 80070ca:	4629      	mov	r1, r5
 80070cc:	f7f9 f882 	bl	80001d4 <__adddf3>
 80070d0:	4604      	mov	r4, r0
 80070d2:	460d      	mov	r5, r1
 80070d4:	ec45 4b10 	vmov	d0, r4, r5
 80070d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070dc:	2d00      	cmp	r5, #0
 80070de:	dc10      	bgt.n	8007102 <__ieee754_sqrt+0x62>
 80070e0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80070e4:	4330      	orrs	r0, r6
 80070e6:	d0f5      	beq.n	80070d4 <__ieee754_sqrt+0x34>
 80070e8:	b15d      	cbz	r5, 8007102 <__ieee754_sqrt+0x62>
 80070ea:	ee10 2a10 	vmov	r2, s0
 80070ee:	462b      	mov	r3, r5
 80070f0:	ee10 0a10 	vmov	r0, s0
 80070f4:	f7f9 f86c 	bl	80001d0 <__aeabi_dsub>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	f7f9 fb4a 	bl	8000794 <__aeabi_ddiv>
 8007100:	e7e6      	b.n	80070d0 <__ieee754_sqrt+0x30>
 8007102:	1512      	asrs	r2, r2, #20
 8007104:	d074      	beq.n	80071f0 <__ieee754_sqrt+0x150>
 8007106:	07d4      	lsls	r4, r2, #31
 8007108:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800710c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007110:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007114:	bf5e      	ittt	pl
 8007116:	0fda      	lsrpl	r2, r3, #31
 8007118:	005b      	lslpl	r3, r3, #1
 800711a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800711e:	2400      	movs	r4, #0
 8007120:	0fda      	lsrs	r2, r3, #31
 8007122:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007126:	107f      	asrs	r7, r7, #1
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	2516      	movs	r5, #22
 800712c:	4620      	mov	r0, r4
 800712e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007132:	1886      	adds	r6, r0, r2
 8007134:	428e      	cmp	r6, r1
 8007136:	bfde      	ittt	le
 8007138:	1b89      	suble	r1, r1, r6
 800713a:	18b0      	addle	r0, r6, r2
 800713c:	18a4      	addle	r4, r4, r2
 800713e:	0049      	lsls	r1, r1, #1
 8007140:	3d01      	subs	r5, #1
 8007142:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007146:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800714a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800714e:	d1f0      	bne.n	8007132 <__ieee754_sqrt+0x92>
 8007150:	462a      	mov	r2, r5
 8007152:	f04f 0e20 	mov.w	lr, #32
 8007156:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800715a:	4281      	cmp	r1, r0
 800715c:	eb06 0c05 	add.w	ip, r6, r5
 8007160:	dc02      	bgt.n	8007168 <__ieee754_sqrt+0xc8>
 8007162:	d113      	bne.n	800718c <__ieee754_sqrt+0xec>
 8007164:	459c      	cmp	ip, r3
 8007166:	d811      	bhi.n	800718c <__ieee754_sqrt+0xec>
 8007168:	f1bc 0f00 	cmp.w	ip, #0
 800716c:	eb0c 0506 	add.w	r5, ip, r6
 8007170:	da43      	bge.n	80071fa <__ieee754_sqrt+0x15a>
 8007172:	2d00      	cmp	r5, #0
 8007174:	db41      	blt.n	80071fa <__ieee754_sqrt+0x15a>
 8007176:	f100 0801 	add.w	r8, r0, #1
 800717a:	1a09      	subs	r1, r1, r0
 800717c:	459c      	cmp	ip, r3
 800717e:	bf88      	it	hi
 8007180:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007184:	eba3 030c 	sub.w	r3, r3, ip
 8007188:	4432      	add	r2, r6
 800718a:	4640      	mov	r0, r8
 800718c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007190:	f1be 0e01 	subs.w	lr, lr, #1
 8007194:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007198:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800719c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80071a0:	d1db      	bne.n	800715a <__ieee754_sqrt+0xba>
 80071a2:	430b      	orrs	r3, r1
 80071a4:	d006      	beq.n	80071b4 <__ieee754_sqrt+0x114>
 80071a6:	1c50      	adds	r0, r2, #1
 80071a8:	bf13      	iteet	ne
 80071aa:	3201      	addne	r2, #1
 80071ac:	3401      	addeq	r4, #1
 80071ae:	4672      	moveq	r2, lr
 80071b0:	f022 0201 	bicne.w	r2, r2, #1
 80071b4:	1063      	asrs	r3, r4, #1
 80071b6:	0852      	lsrs	r2, r2, #1
 80071b8:	07e1      	lsls	r1, r4, #31
 80071ba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80071be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80071c2:	bf48      	it	mi
 80071c4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80071c8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80071cc:	4614      	mov	r4, r2
 80071ce:	e781      	b.n	80070d4 <__ieee754_sqrt+0x34>
 80071d0:	0ad9      	lsrs	r1, r3, #11
 80071d2:	3815      	subs	r0, #21
 80071d4:	055b      	lsls	r3, r3, #21
 80071d6:	2900      	cmp	r1, #0
 80071d8:	d0fa      	beq.n	80071d0 <__ieee754_sqrt+0x130>
 80071da:	02cd      	lsls	r5, r1, #11
 80071dc:	d50a      	bpl.n	80071f4 <__ieee754_sqrt+0x154>
 80071de:	f1c2 0420 	rsb	r4, r2, #32
 80071e2:	fa23 f404 	lsr.w	r4, r3, r4
 80071e6:	1e55      	subs	r5, r2, #1
 80071e8:	4093      	lsls	r3, r2
 80071ea:	4321      	orrs	r1, r4
 80071ec:	1b42      	subs	r2, r0, r5
 80071ee:	e78a      	b.n	8007106 <__ieee754_sqrt+0x66>
 80071f0:	4610      	mov	r0, r2
 80071f2:	e7f0      	b.n	80071d6 <__ieee754_sqrt+0x136>
 80071f4:	0049      	lsls	r1, r1, #1
 80071f6:	3201      	adds	r2, #1
 80071f8:	e7ef      	b.n	80071da <__ieee754_sqrt+0x13a>
 80071fa:	4680      	mov	r8, r0
 80071fc:	e7bd      	b.n	800717a <__ieee754_sqrt+0xda>
 80071fe:	bf00      	nop
 8007200:	7ff00000 	.word	0x7ff00000
 8007204:	00000000 	.word	0x00000000

08007208 <__kernel_cos>:
 8007208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	ec57 6b10 	vmov	r6, r7, d0
 8007210:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007214:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007218:	ed8d 1b00 	vstr	d1, [sp]
 800721c:	da07      	bge.n	800722e <__kernel_cos+0x26>
 800721e:	ee10 0a10 	vmov	r0, s0
 8007222:	4639      	mov	r1, r7
 8007224:	f7f9 fc3c 	bl	8000aa0 <__aeabi_d2iz>
 8007228:	2800      	cmp	r0, #0
 800722a:	f000 8088 	beq.w	800733e <__kernel_cos+0x136>
 800722e:	4632      	mov	r2, r6
 8007230:	463b      	mov	r3, r7
 8007232:	4630      	mov	r0, r6
 8007234:	4639      	mov	r1, r7
 8007236:	f7f9 f983 	bl	8000540 <__aeabi_dmul>
 800723a:	4b51      	ldr	r3, [pc, #324]	; (8007380 <__kernel_cos+0x178>)
 800723c:	2200      	movs	r2, #0
 800723e:	4604      	mov	r4, r0
 8007240:	460d      	mov	r5, r1
 8007242:	f7f9 f97d 	bl	8000540 <__aeabi_dmul>
 8007246:	a340      	add	r3, pc, #256	; (adr r3, 8007348 <__kernel_cos+0x140>)
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	4682      	mov	sl, r0
 800724e:	468b      	mov	fp, r1
 8007250:	4620      	mov	r0, r4
 8007252:	4629      	mov	r1, r5
 8007254:	f7f9 f974 	bl	8000540 <__aeabi_dmul>
 8007258:	a33d      	add	r3, pc, #244	; (adr r3, 8007350 <__kernel_cos+0x148>)
 800725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725e:	f7f8 ffb9 	bl	80001d4 <__adddf3>
 8007262:	4622      	mov	r2, r4
 8007264:	462b      	mov	r3, r5
 8007266:	f7f9 f96b 	bl	8000540 <__aeabi_dmul>
 800726a:	a33b      	add	r3, pc, #236	; (adr r3, 8007358 <__kernel_cos+0x150>)
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	f7f8 ffae 	bl	80001d0 <__aeabi_dsub>
 8007274:	4622      	mov	r2, r4
 8007276:	462b      	mov	r3, r5
 8007278:	f7f9 f962 	bl	8000540 <__aeabi_dmul>
 800727c:	a338      	add	r3, pc, #224	; (adr r3, 8007360 <__kernel_cos+0x158>)
 800727e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007282:	f7f8 ffa7 	bl	80001d4 <__adddf3>
 8007286:	4622      	mov	r2, r4
 8007288:	462b      	mov	r3, r5
 800728a:	f7f9 f959 	bl	8000540 <__aeabi_dmul>
 800728e:	a336      	add	r3, pc, #216	; (adr r3, 8007368 <__kernel_cos+0x160>)
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	f7f8 ff9c 	bl	80001d0 <__aeabi_dsub>
 8007298:	4622      	mov	r2, r4
 800729a:	462b      	mov	r3, r5
 800729c:	f7f9 f950 	bl	8000540 <__aeabi_dmul>
 80072a0:	a333      	add	r3, pc, #204	; (adr r3, 8007370 <__kernel_cos+0x168>)
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f7f8 ff95 	bl	80001d4 <__adddf3>
 80072aa:	4622      	mov	r2, r4
 80072ac:	462b      	mov	r3, r5
 80072ae:	f7f9 f947 	bl	8000540 <__aeabi_dmul>
 80072b2:	4622      	mov	r2, r4
 80072b4:	462b      	mov	r3, r5
 80072b6:	f7f9 f943 	bl	8000540 <__aeabi_dmul>
 80072ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072be:	4604      	mov	r4, r0
 80072c0:	460d      	mov	r5, r1
 80072c2:	4630      	mov	r0, r6
 80072c4:	4639      	mov	r1, r7
 80072c6:	f7f9 f93b 	bl	8000540 <__aeabi_dmul>
 80072ca:	460b      	mov	r3, r1
 80072cc:	4602      	mov	r2, r0
 80072ce:	4629      	mov	r1, r5
 80072d0:	4620      	mov	r0, r4
 80072d2:	f7f8 ff7d 	bl	80001d0 <__aeabi_dsub>
 80072d6:	4b2b      	ldr	r3, [pc, #172]	; (8007384 <__kernel_cos+0x17c>)
 80072d8:	4598      	cmp	r8, r3
 80072da:	4606      	mov	r6, r0
 80072dc:	460f      	mov	r7, r1
 80072de:	dc10      	bgt.n	8007302 <__kernel_cos+0xfa>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4650      	mov	r0, sl
 80072e6:	4659      	mov	r1, fp
 80072e8:	f7f8 ff72 	bl	80001d0 <__aeabi_dsub>
 80072ec:	460b      	mov	r3, r1
 80072ee:	4926      	ldr	r1, [pc, #152]	; (8007388 <__kernel_cos+0x180>)
 80072f0:	4602      	mov	r2, r0
 80072f2:	2000      	movs	r0, #0
 80072f4:	f7f8 ff6c 	bl	80001d0 <__aeabi_dsub>
 80072f8:	ec41 0b10 	vmov	d0, r0, r1
 80072fc:	b003      	add	sp, #12
 80072fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007302:	4b22      	ldr	r3, [pc, #136]	; (800738c <__kernel_cos+0x184>)
 8007304:	4920      	ldr	r1, [pc, #128]	; (8007388 <__kernel_cos+0x180>)
 8007306:	4598      	cmp	r8, r3
 8007308:	bfcc      	ite	gt
 800730a:	4d21      	ldrgt	r5, [pc, #132]	; (8007390 <__kernel_cos+0x188>)
 800730c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007310:	2400      	movs	r4, #0
 8007312:	4622      	mov	r2, r4
 8007314:	462b      	mov	r3, r5
 8007316:	2000      	movs	r0, #0
 8007318:	f7f8 ff5a 	bl	80001d0 <__aeabi_dsub>
 800731c:	4622      	mov	r2, r4
 800731e:	4680      	mov	r8, r0
 8007320:	4689      	mov	r9, r1
 8007322:	462b      	mov	r3, r5
 8007324:	4650      	mov	r0, sl
 8007326:	4659      	mov	r1, fp
 8007328:	f7f8 ff52 	bl	80001d0 <__aeabi_dsub>
 800732c:	4632      	mov	r2, r6
 800732e:	463b      	mov	r3, r7
 8007330:	f7f8 ff4e 	bl	80001d0 <__aeabi_dsub>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	4640      	mov	r0, r8
 800733a:	4649      	mov	r1, r9
 800733c:	e7da      	b.n	80072f4 <__kernel_cos+0xec>
 800733e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007378 <__kernel_cos+0x170>
 8007342:	e7db      	b.n	80072fc <__kernel_cos+0xf4>
 8007344:	f3af 8000 	nop.w
 8007348:	be8838d4 	.word	0xbe8838d4
 800734c:	bda8fae9 	.word	0xbda8fae9
 8007350:	bdb4b1c4 	.word	0xbdb4b1c4
 8007354:	3e21ee9e 	.word	0x3e21ee9e
 8007358:	809c52ad 	.word	0x809c52ad
 800735c:	3e927e4f 	.word	0x3e927e4f
 8007360:	19cb1590 	.word	0x19cb1590
 8007364:	3efa01a0 	.word	0x3efa01a0
 8007368:	16c15177 	.word	0x16c15177
 800736c:	3f56c16c 	.word	0x3f56c16c
 8007370:	5555554c 	.word	0x5555554c
 8007374:	3fa55555 	.word	0x3fa55555
 8007378:	00000000 	.word	0x00000000
 800737c:	3ff00000 	.word	0x3ff00000
 8007380:	3fe00000 	.word	0x3fe00000
 8007384:	3fd33332 	.word	0x3fd33332
 8007388:	3ff00000 	.word	0x3ff00000
 800738c:	3fe90000 	.word	0x3fe90000
 8007390:	3fd20000 	.word	0x3fd20000
 8007394:	00000000 	.word	0x00000000

08007398 <__kernel_rem_pio2>:
 8007398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739c:	ed2d 8b02 	vpush	{d8}
 80073a0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80073a4:	f112 0f14 	cmn.w	r2, #20
 80073a8:	9308      	str	r3, [sp, #32]
 80073aa:	9101      	str	r1, [sp, #4]
 80073ac:	4bc4      	ldr	r3, [pc, #784]	; (80076c0 <__kernel_rem_pio2+0x328>)
 80073ae:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80073b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80073b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073b6:	9302      	str	r3, [sp, #8]
 80073b8:	9b08      	ldr	r3, [sp, #32]
 80073ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80073be:	bfa8      	it	ge
 80073c0:	1ed4      	subge	r4, r2, #3
 80073c2:	9306      	str	r3, [sp, #24]
 80073c4:	bfb2      	itee	lt
 80073c6:	2400      	movlt	r4, #0
 80073c8:	2318      	movge	r3, #24
 80073ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80073ce:	f06f 0317 	mvn.w	r3, #23
 80073d2:	fb04 3303 	mla	r3, r4, r3, r3
 80073d6:	eb03 0a02 	add.w	sl, r3, r2
 80073da:	9b02      	ldr	r3, [sp, #8]
 80073dc:	9a06      	ldr	r2, [sp, #24]
 80073de:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80076b0 <__kernel_rem_pio2+0x318>
 80073e2:	eb03 0802 	add.w	r8, r3, r2
 80073e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80073e8:	1aa7      	subs	r7, r4, r2
 80073ea:	ae22      	add	r6, sp, #136	; 0x88
 80073ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80073f0:	2500      	movs	r5, #0
 80073f2:	4545      	cmp	r5, r8
 80073f4:	dd13      	ble.n	800741e <__kernel_rem_pio2+0x86>
 80073f6:	9b08      	ldr	r3, [sp, #32]
 80073f8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80076b0 <__kernel_rem_pio2+0x318>
 80073fc:	aa22      	add	r2, sp, #136	; 0x88
 80073fe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007402:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007406:	f04f 0800 	mov.w	r8, #0
 800740a:	9b02      	ldr	r3, [sp, #8]
 800740c:	4598      	cmp	r8, r3
 800740e:	dc2f      	bgt.n	8007470 <__kernel_rem_pio2+0xd8>
 8007410:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007414:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007418:	462f      	mov	r7, r5
 800741a:	2600      	movs	r6, #0
 800741c:	e01b      	b.n	8007456 <__kernel_rem_pio2+0xbe>
 800741e:	42ef      	cmn	r7, r5
 8007420:	d407      	bmi.n	8007432 <__kernel_rem_pio2+0x9a>
 8007422:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007426:	f7f9 f821 	bl	800046c <__aeabi_i2d>
 800742a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800742e:	3501      	adds	r5, #1
 8007430:	e7df      	b.n	80073f2 <__kernel_rem_pio2+0x5a>
 8007432:	ec51 0b18 	vmov	r0, r1, d8
 8007436:	e7f8      	b.n	800742a <__kernel_rem_pio2+0x92>
 8007438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800743c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007440:	f7f9 f87e 	bl	8000540 <__aeabi_dmul>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800744c:	f7f8 fec2 	bl	80001d4 <__adddf3>
 8007450:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007454:	3601      	adds	r6, #1
 8007456:	9b06      	ldr	r3, [sp, #24]
 8007458:	429e      	cmp	r6, r3
 800745a:	f1a7 0708 	sub.w	r7, r7, #8
 800745e:	ddeb      	ble.n	8007438 <__kernel_rem_pio2+0xa0>
 8007460:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007464:	f108 0801 	add.w	r8, r8, #1
 8007468:	ecab 7b02 	vstmia	fp!, {d7}
 800746c:	3508      	adds	r5, #8
 800746e:	e7cc      	b.n	800740a <__kernel_rem_pio2+0x72>
 8007470:	9b02      	ldr	r3, [sp, #8]
 8007472:	aa0e      	add	r2, sp, #56	; 0x38
 8007474:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007478:	930d      	str	r3, [sp, #52]	; 0x34
 800747a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800747c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007480:	9c02      	ldr	r4, [sp, #8]
 8007482:	930c      	str	r3, [sp, #48]	; 0x30
 8007484:	00e3      	lsls	r3, r4, #3
 8007486:	930a      	str	r3, [sp, #40]	; 0x28
 8007488:	ab9a      	add	r3, sp, #616	; 0x268
 800748a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800748e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007492:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8007496:	ab72      	add	r3, sp, #456	; 0x1c8
 8007498:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800749c:	46c3      	mov	fp, r8
 800749e:	46a1      	mov	r9, r4
 80074a0:	f1b9 0f00 	cmp.w	r9, #0
 80074a4:	f1a5 0508 	sub.w	r5, r5, #8
 80074a8:	dc77      	bgt.n	800759a <__kernel_rem_pio2+0x202>
 80074aa:	ec47 6b10 	vmov	d0, r6, r7
 80074ae:	4650      	mov	r0, sl
 80074b0:	f000 fc12 	bl	8007cd8 <scalbn>
 80074b4:	ec57 6b10 	vmov	r6, r7, d0
 80074b8:	2200      	movs	r2, #0
 80074ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80074be:	ee10 0a10 	vmov	r0, s0
 80074c2:	4639      	mov	r1, r7
 80074c4:	f7f9 f83c 	bl	8000540 <__aeabi_dmul>
 80074c8:	ec41 0b10 	vmov	d0, r0, r1
 80074cc:	f000 fb7c 	bl	8007bc8 <floor>
 80074d0:	4b7c      	ldr	r3, [pc, #496]	; (80076c4 <__kernel_rem_pio2+0x32c>)
 80074d2:	ec51 0b10 	vmov	r0, r1, d0
 80074d6:	2200      	movs	r2, #0
 80074d8:	f7f9 f832 	bl	8000540 <__aeabi_dmul>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4630      	mov	r0, r6
 80074e2:	4639      	mov	r1, r7
 80074e4:	f7f8 fe74 	bl	80001d0 <__aeabi_dsub>
 80074e8:	460f      	mov	r7, r1
 80074ea:	4606      	mov	r6, r0
 80074ec:	f7f9 fad8 	bl	8000aa0 <__aeabi_d2iz>
 80074f0:	9004      	str	r0, [sp, #16]
 80074f2:	f7f8 ffbb 	bl	800046c <__aeabi_i2d>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4630      	mov	r0, r6
 80074fc:	4639      	mov	r1, r7
 80074fe:	f7f8 fe67 	bl	80001d0 <__aeabi_dsub>
 8007502:	f1ba 0f00 	cmp.w	sl, #0
 8007506:	4606      	mov	r6, r0
 8007508:	460f      	mov	r7, r1
 800750a:	dd6d      	ble.n	80075e8 <__kernel_rem_pio2+0x250>
 800750c:	1e62      	subs	r2, r4, #1
 800750e:	ab0e      	add	r3, sp, #56	; 0x38
 8007510:	9d04      	ldr	r5, [sp, #16]
 8007512:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007516:	f1ca 0118 	rsb	r1, sl, #24
 800751a:	fa40 f301 	asr.w	r3, r0, r1
 800751e:	441d      	add	r5, r3
 8007520:	408b      	lsls	r3, r1
 8007522:	1ac0      	subs	r0, r0, r3
 8007524:	ab0e      	add	r3, sp, #56	; 0x38
 8007526:	9504      	str	r5, [sp, #16]
 8007528:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800752c:	f1ca 0317 	rsb	r3, sl, #23
 8007530:	fa40 fb03 	asr.w	fp, r0, r3
 8007534:	f1bb 0f00 	cmp.w	fp, #0
 8007538:	dd65      	ble.n	8007606 <__kernel_rem_pio2+0x26e>
 800753a:	9b04      	ldr	r3, [sp, #16]
 800753c:	2200      	movs	r2, #0
 800753e:	3301      	adds	r3, #1
 8007540:	9304      	str	r3, [sp, #16]
 8007542:	4615      	mov	r5, r2
 8007544:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007548:	4294      	cmp	r4, r2
 800754a:	f300 809c 	bgt.w	8007686 <__kernel_rem_pio2+0x2ee>
 800754e:	f1ba 0f00 	cmp.w	sl, #0
 8007552:	dd07      	ble.n	8007564 <__kernel_rem_pio2+0x1cc>
 8007554:	f1ba 0f01 	cmp.w	sl, #1
 8007558:	f000 80c0 	beq.w	80076dc <__kernel_rem_pio2+0x344>
 800755c:	f1ba 0f02 	cmp.w	sl, #2
 8007560:	f000 80c6 	beq.w	80076f0 <__kernel_rem_pio2+0x358>
 8007564:	f1bb 0f02 	cmp.w	fp, #2
 8007568:	d14d      	bne.n	8007606 <__kernel_rem_pio2+0x26e>
 800756a:	4632      	mov	r2, r6
 800756c:	463b      	mov	r3, r7
 800756e:	4956      	ldr	r1, [pc, #344]	; (80076c8 <__kernel_rem_pio2+0x330>)
 8007570:	2000      	movs	r0, #0
 8007572:	f7f8 fe2d 	bl	80001d0 <__aeabi_dsub>
 8007576:	4606      	mov	r6, r0
 8007578:	460f      	mov	r7, r1
 800757a:	2d00      	cmp	r5, #0
 800757c:	d043      	beq.n	8007606 <__kernel_rem_pio2+0x26e>
 800757e:	4650      	mov	r0, sl
 8007580:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80076b8 <__kernel_rem_pio2+0x320>
 8007584:	f000 fba8 	bl	8007cd8 <scalbn>
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	ec53 2b10 	vmov	r2, r3, d0
 8007590:	f7f8 fe1e 	bl	80001d0 <__aeabi_dsub>
 8007594:	4606      	mov	r6, r0
 8007596:	460f      	mov	r7, r1
 8007598:	e035      	b.n	8007606 <__kernel_rem_pio2+0x26e>
 800759a:	4b4c      	ldr	r3, [pc, #304]	; (80076cc <__kernel_rem_pio2+0x334>)
 800759c:	2200      	movs	r2, #0
 800759e:	4630      	mov	r0, r6
 80075a0:	4639      	mov	r1, r7
 80075a2:	f7f8 ffcd 	bl	8000540 <__aeabi_dmul>
 80075a6:	f7f9 fa7b 	bl	8000aa0 <__aeabi_d2iz>
 80075aa:	f7f8 ff5f 	bl	800046c <__aeabi_i2d>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	ec43 2b18 	vmov	d8, r2, r3
 80075b6:	4b46      	ldr	r3, [pc, #280]	; (80076d0 <__kernel_rem_pio2+0x338>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	f7f8 ffc1 	bl	8000540 <__aeabi_dmul>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4630      	mov	r0, r6
 80075c4:	4639      	mov	r1, r7
 80075c6:	f7f8 fe03 	bl	80001d0 <__aeabi_dsub>
 80075ca:	f7f9 fa69 	bl	8000aa0 <__aeabi_d2iz>
 80075ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075d2:	f84b 0b04 	str.w	r0, [fp], #4
 80075d6:	ec51 0b18 	vmov	r0, r1, d8
 80075da:	f7f8 fdfb 	bl	80001d4 <__adddf3>
 80075de:	f109 39ff 	add.w	r9, r9, #4294967295
 80075e2:	4606      	mov	r6, r0
 80075e4:	460f      	mov	r7, r1
 80075e6:	e75b      	b.n	80074a0 <__kernel_rem_pio2+0x108>
 80075e8:	d106      	bne.n	80075f8 <__kernel_rem_pio2+0x260>
 80075ea:	1e63      	subs	r3, r4, #1
 80075ec:	aa0e      	add	r2, sp, #56	; 0x38
 80075ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80075f2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80075f6:	e79d      	b.n	8007534 <__kernel_rem_pio2+0x19c>
 80075f8:	4b36      	ldr	r3, [pc, #216]	; (80076d4 <__kernel_rem_pio2+0x33c>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	f7f9 fa26 	bl	8000a4c <__aeabi_dcmpge>
 8007600:	2800      	cmp	r0, #0
 8007602:	d13d      	bne.n	8007680 <__kernel_rem_pio2+0x2e8>
 8007604:	4683      	mov	fp, r0
 8007606:	2200      	movs	r2, #0
 8007608:	2300      	movs	r3, #0
 800760a:	4630      	mov	r0, r6
 800760c:	4639      	mov	r1, r7
 800760e:	f7f9 f9ff 	bl	8000a10 <__aeabi_dcmpeq>
 8007612:	2800      	cmp	r0, #0
 8007614:	f000 80c0 	beq.w	8007798 <__kernel_rem_pio2+0x400>
 8007618:	1e65      	subs	r5, r4, #1
 800761a:	462b      	mov	r3, r5
 800761c:	2200      	movs	r2, #0
 800761e:	9902      	ldr	r1, [sp, #8]
 8007620:	428b      	cmp	r3, r1
 8007622:	da6c      	bge.n	80076fe <__kernel_rem_pio2+0x366>
 8007624:	2a00      	cmp	r2, #0
 8007626:	f000 8089 	beq.w	800773c <__kernel_rem_pio2+0x3a4>
 800762a:	ab0e      	add	r3, sp, #56	; 0x38
 800762c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007630:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 80ad 	beq.w	8007794 <__kernel_rem_pio2+0x3fc>
 800763a:	4650      	mov	r0, sl
 800763c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80076b8 <__kernel_rem_pio2+0x320>
 8007640:	f000 fb4a 	bl	8007cd8 <scalbn>
 8007644:	ab9a      	add	r3, sp, #616	; 0x268
 8007646:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800764a:	ec57 6b10 	vmov	r6, r7, d0
 800764e:	00ec      	lsls	r4, r5, #3
 8007650:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007654:	46aa      	mov	sl, r5
 8007656:	f1ba 0f00 	cmp.w	sl, #0
 800765a:	f280 80d6 	bge.w	800780a <__kernel_rem_pio2+0x472>
 800765e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80076b0 <__kernel_rem_pio2+0x318>
 8007662:	462e      	mov	r6, r5
 8007664:	2e00      	cmp	r6, #0
 8007666:	f2c0 8104 	blt.w	8007872 <__kernel_rem_pio2+0x4da>
 800766a:	ab72      	add	r3, sp, #456	; 0x1c8
 800766c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007670:	f8df a064 	ldr.w	sl, [pc, #100]	; 80076d8 <__kernel_rem_pio2+0x340>
 8007674:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007678:	f04f 0800 	mov.w	r8, #0
 800767c:	1baf      	subs	r7, r5, r6
 800767e:	e0ea      	b.n	8007856 <__kernel_rem_pio2+0x4be>
 8007680:	f04f 0b02 	mov.w	fp, #2
 8007684:	e759      	b.n	800753a <__kernel_rem_pio2+0x1a2>
 8007686:	f8d8 3000 	ldr.w	r3, [r8]
 800768a:	b955      	cbnz	r5, 80076a2 <__kernel_rem_pio2+0x30a>
 800768c:	b123      	cbz	r3, 8007698 <__kernel_rem_pio2+0x300>
 800768e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007692:	f8c8 3000 	str.w	r3, [r8]
 8007696:	2301      	movs	r3, #1
 8007698:	3201      	adds	r2, #1
 800769a:	f108 0804 	add.w	r8, r8, #4
 800769e:	461d      	mov	r5, r3
 80076a0:	e752      	b.n	8007548 <__kernel_rem_pio2+0x1b0>
 80076a2:	1acb      	subs	r3, r1, r3
 80076a4:	f8c8 3000 	str.w	r3, [r8]
 80076a8:	462b      	mov	r3, r5
 80076aa:	e7f5      	b.n	8007698 <__kernel_rem_pio2+0x300>
 80076ac:	f3af 8000 	nop.w
	...
 80076bc:	3ff00000 	.word	0x3ff00000
 80076c0:	08007fe8 	.word	0x08007fe8
 80076c4:	40200000 	.word	0x40200000
 80076c8:	3ff00000 	.word	0x3ff00000
 80076cc:	3e700000 	.word	0x3e700000
 80076d0:	41700000 	.word	0x41700000
 80076d4:	3fe00000 	.word	0x3fe00000
 80076d8:	08007fa8 	.word	0x08007fa8
 80076dc:	1e62      	subs	r2, r4, #1
 80076de:	ab0e      	add	r3, sp, #56	; 0x38
 80076e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80076e8:	a90e      	add	r1, sp, #56	; 0x38
 80076ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80076ee:	e739      	b.n	8007564 <__kernel_rem_pio2+0x1cc>
 80076f0:	1e62      	subs	r2, r4, #1
 80076f2:	ab0e      	add	r3, sp, #56	; 0x38
 80076f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80076fc:	e7f4      	b.n	80076e8 <__kernel_rem_pio2+0x350>
 80076fe:	a90e      	add	r1, sp, #56	; 0x38
 8007700:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007704:	3b01      	subs	r3, #1
 8007706:	430a      	orrs	r2, r1
 8007708:	e789      	b.n	800761e <__kernel_rem_pio2+0x286>
 800770a:	3301      	adds	r3, #1
 800770c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007710:	2900      	cmp	r1, #0
 8007712:	d0fa      	beq.n	800770a <__kernel_rem_pio2+0x372>
 8007714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007716:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800771a:	446a      	add	r2, sp
 800771c:	3a98      	subs	r2, #152	; 0x98
 800771e:	920a      	str	r2, [sp, #40]	; 0x28
 8007720:	9a08      	ldr	r2, [sp, #32]
 8007722:	18e3      	adds	r3, r4, r3
 8007724:	18a5      	adds	r5, r4, r2
 8007726:	aa22      	add	r2, sp, #136	; 0x88
 8007728:	f104 0801 	add.w	r8, r4, #1
 800772c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	9b04      	ldr	r3, [sp, #16]
 8007734:	4543      	cmp	r3, r8
 8007736:	da04      	bge.n	8007742 <__kernel_rem_pio2+0x3aa>
 8007738:	461c      	mov	r4, r3
 800773a:	e6a3      	b.n	8007484 <__kernel_rem_pio2+0xec>
 800773c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800773e:	2301      	movs	r3, #1
 8007740:	e7e4      	b.n	800770c <__kernel_rem_pio2+0x374>
 8007742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007744:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007748:	f7f8 fe90 	bl	800046c <__aeabi_i2d>
 800774c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007752:	46ab      	mov	fp, r5
 8007754:	461c      	mov	r4, r3
 8007756:	f04f 0900 	mov.w	r9, #0
 800775a:	2600      	movs	r6, #0
 800775c:	2700      	movs	r7, #0
 800775e:	9b06      	ldr	r3, [sp, #24]
 8007760:	4599      	cmp	r9, r3
 8007762:	dd06      	ble.n	8007772 <__kernel_rem_pio2+0x3da>
 8007764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007766:	e8e3 6702 	strd	r6, r7, [r3], #8
 800776a:	f108 0801 	add.w	r8, r8, #1
 800776e:	930a      	str	r3, [sp, #40]	; 0x28
 8007770:	e7df      	b.n	8007732 <__kernel_rem_pio2+0x39a>
 8007772:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007776:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800777a:	f7f8 fee1 	bl	8000540 <__aeabi_dmul>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4630      	mov	r0, r6
 8007784:	4639      	mov	r1, r7
 8007786:	f7f8 fd25 	bl	80001d4 <__adddf3>
 800778a:	f109 0901 	add.w	r9, r9, #1
 800778e:	4606      	mov	r6, r0
 8007790:	460f      	mov	r7, r1
 8007792:	e7e4      	b.n	800775e <__kernel_rem_pio2+0x3c6>
 8007794:	3d01      	subs	r5, #1
 8007796:	e748      	b.n	800762a <__kernel_rem_pio2+0x292>
 8007798:	ec47 6b10 	vmov	d0, r6, r7
 800779c:	f1ca 0000 	rsb	r0, sl, #0
 80077a0:	f000 fa9a 	bl	8007cd8 <scalbn>
 80077a4:	ec57 6b10 	vmov	r6, r7, d0
 80077a8:	4ba0      	ldr	r3, [pc, #640]	; (8007a2c <__kernel_rem_pio2+0x694>)
 80077aa:	ee10 0a10 	vmov	r0, s0
 80077ae:	2200      	movs	r2, #0
 80077b0:	4639      	mov	r1, r7
 80077b2:	f7f9 f94b 	bl	8000a4c <__aeabi_dcmpge>
 80077b6:	b1f8      	cbz	r0, 80077f8 <__kernel_rem_pio2+0x460>
 80077b8:	4b9d      	ldr	r3, [pc, #628]	; (8007a30 <__kernel_rem_pio2+0x698>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	4630      	mov	r0, r6
 80077be:	4639      	mov	r1, r7
 80077c0:	f7f8 febe 	bl	8000540 <__aeabi_dmul>
 80077c4:	f7f9 f96c 	bl	8000aa0 <__aeabi_d2iz>
 80077c8:	4680      	mov	r8, r0
 80077ca:	f7f8 fe4f 	bl	800046c <__aeabi_i2d>
 80077ce:	4b97      	ldr	r3, [pc, #604]	; (8007a2c <__kernel_rem_pio2+0x694>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	f7f8 feb5 	bl	8000540 <__aeabi_dmul>
 80077d6:	460b      	mov	r3, r1
 80077d8:	4602      	mov	r2, r0
 80077da:	4639      	mov	r1, r7
 80077dc:	4630      	mov	r0, r6
 80077de:	f7f8 fcf7 	bl	80001d0 <__aeabi_dsub>
 80077e2:	f7f9 f95d 	bl	8000aa0 <__aeabi_d2iz>
 80077e6:	1c65      	adds	r5, r4, #1
 80077e8:	ab0e      	add	r3, sp, #56	; 0x38
 80077ea:	f10a 0a18 	add.w	sl, sl, #24
 80077ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80077f2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80077f6:	e720      	b.n	800763a <__kernel_rem_pio2+0x2a2>
 80077f8:	4630      	mov	r0, r6
 80077fa:	4639      	mov	r1, r7
 80077fc:	f7f9 f950 	bl	8000aa0 <__aeabi_d2iz>
 8007800:	ab0e      	add	r3, sp, #56	; 0x38
 8007802:	4625      	mov	r5, r4
 8007804:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007808:	e717      	b.n	800763a <__kernel_rem_pio2+0x2a2>
 800780a:	ab0e      	add	r3, sp, #56	; 0x38
 800780c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007810:	f7f8 fe2c 	bl	800046c <__aeabi_i2d>
 8007814:	4632      	mov	r2, r6
 8007816:	463b      	mov	r3, r7
 8007818:	f7f8 fe92 	bl	8000540 <__aeabi_dmul>
 800781c:	4b84      	ldr	r3, [pc, #528]	; (8007a30 <__kernel_rem_pio2+0x698>)
 800781e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007822:	2200      	movs	r2, #0
 8007824:	4630      	mov	r0, r6
 8007826:	4639      	mov	r1, r7
 8007828:	f7f8 fe8a 	bl	8000540 <__aeabi_dmul>
 800782c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007830:	4606      	mov	r6, r0
 8007832:	460f      	mov	r7, r1
 8007834:	e70f      	b.n	8007656 <__kernel_rem_pio2+0x2be>
 8007836:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800783a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800783e:	f7f8 fe7f 	bl	8000540 <__aeabi_dmul>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800784a:	f7f8 fcc3 	bl	80001d4 <__adddf3>
 800784e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007852:	f108 0801 	add.w	r8, r8, #1
 8007856:	9b02      	ldr	r3, [sp, #8]
 8007858:	4598      	cmp	r8, r3
 800785a:	dc01      	bgt.n	8007860 <__kernel_rem_pio2+0x4c8>
 800785c:	45b8      	cmp	r8, r7
 800785e:	ddea      	ble.n	8007836 <__kernel_rem_pio2+0x49e>
 8007860:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007864:	ab4a      	add	r3, sp, #296	; 0x128
 8007866:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800786a:	ed87 7b00 	vstr	d7, [r7]
 800786e:	3e01      	subs	r6, #1
 8007870:	e6f8      	b.n	8007664 <__kernel_rem_pio2+0x2cc>
 8007872:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007874:	2b02      	cmp	r3, #2
 8007876:	dc0b      	bgt.n	8007890 <__kernel_rem_pio2+0x4f8>
 8007878:	2b00      	cmp	r3, #0
 800787a:	dc35      	bgt.n	80078e8 <__kernel_rem_pio2+0x550>
 800787c:	d059      	beq.n	8007932 <__kernel_rem_pio2+0x59a>
 800787e:	9b04      	ldr	r3, [sp, #16]
 8007880:	f003 0007 	and.w	r0, r3, #7
 8007884:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007888:	ecbd 8b02 	vpop	{d8}
 800788c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007890:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007892:	2b03      	cmp	r3, #3
 8007894:	d1f3      	bne.n	800787e <__kernel_rem_pio2+0x4e6>
 8007896:	ab4a      	add	r3, sp, #296	; 0x128
 8007898:	4423      	add	r3, r4
 800789a:	9306      	str	r3, [sp, #24]
 800789c:	461c      	mov	r4, r3
 800789e:	469a      	mov	sl, r3
 80078a0:	9502      	str	r5, [sp, #8]
 80078a2:	9b02      	ldr	r3, [sp, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f1aa 0a08 	sub.w	sl, sl, #8
 80078aa:	dc6b      	bgt.n	8007984 <__kernel_rem_pio2+0x5ec>
 80078ac:	46aa      	mov	sl, r5
 80078ae:	f1ba 0f01 	cmp.w	sl, #1
 80078b2:	f1a4 0408 	sub.w	r4, r4, #8
 80078b6:	f300 8085 	bgt.w	80079c4 <__kernel_rem_pio2+0x62c>
 80078ba:	9c06      	ldr	r4, [sp, #24]
 80078bc:	2000      	movs	r0, #0
 80078be:	3408      	adds	r4, #8
 80078c0:	2100      	movs	r1, #0
 80078c2:	2d01      	cmp	r5, #1
 80078c4:	f300 809d 	bgt.w	8007a02 <__kernel_rem_pio2+0x66a>
 80078c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80078cc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80078d0:	f1bb 0f00 	cmp.w	fp, #0
 80078d4:	f040 809b 	bne.w	8007a0e <__kernel_rem_pio2+0x676>
 80078d8:	9b01      	ldr	r3, [sp, #4]
 80078da:	e9c3 5600 	strd	r5, r6, [r3]
 80078de:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80078e2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80078e6:	e7ca      	b.n	800787e <__kernel_rem_pio2+0x4e6>
 80078e8:	3408      	adds	r4, #8
 80078ea:	ab4a      	add	r3, sp, #296	; 0x128
 80078ec:	441c      	add	r4, r3
 80078ee:	462e      	mov	r6, r5
 80078f0:	2000      	movs	r0, #0
 80078f2:	2100      	movs	r1, #0
 80078f4:	2e00      	cmp	r6, #0
 80078f6:	da36      	bge.n	8007966 <__kernel_rem_pio2+0x5ce>
 80078f8:	f1bb 0f00 	cmp.w	fp, #0
 80078fc:	d039      	beq.n	8007972 <__kernel_rem_pio2+0x5da>
 80078fe:	4602      	mov	r2, r0
 8007900:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007904:	9c01      	ldr	r4, [sp, #4]
 8007906:	e9c4 2300 	strd	r2, r3, [r4]
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007912:	f7f8 fc5d 	bl	80001d0 <__aeabi_dsub>
 8007916:	ae4c      	add	r6, sp, #304	; 0x130
 8007918:	2401      	movs	r4, #1
 800791a:	42a5      	cmp	r5, r4
 800791c:	da2c      	bge.n	8007978 <__kernel_rem_pio2+0x5e0>
 800791e:	f1bb 0f00 	cmp.w	fp, #0
 8007922:	d002      	beq.n	800792a <__kernel_rem_pio2+0x592>
 8007924:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007928:	4619      	mov	r1, r3
 800792a:	9b01      	ldr	r3, [sp, #4]
 800792c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007930:	e7a5      	b.n	800787e <__kernel_rem_pio2+0x4e6>
 8007932:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007936:	eb0d 0403 	add.w	r4, sp, r3
 800793a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800793e:	2000      	movs	r0, #0
 8007940:	2100      	movs	r1, #0
 8007942:	2d00      	cmp	r5, #0
 8007944:	da09      	bge.n	800795a <__kernel_rem_pio2+0x5c2>
 8007946:	f1bb 0f00 	cmp.w	fp, #0
 800794a:	d002      	beq.n	8007952 <__kernel_rem_pio2+0x5ba>
 800794c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007950:	4619      	mov	r1, r3
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	e9c3 0100 	strd	r0, r1, [r3]
 8007958:	e791      	b.n	800787e <__kernel_rem_pio2+0x4e6>
 800795a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800795e:	f7f8 fc39 	bl	80001d4 <__adddf3>
 8007962:	3d01      	subs	r5, #1
 8007964:	e7ed      	b.n	8007942 <__kernel_rem_pio2+0x5aa>
 8007966:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800796a:	f7f8 fc33 	bl	80001d4 <__adddf3>
 800796e:	3e01      	subs	r6, #1
 8007970:	e7c0      	b.n	80078f4 <__kernel_rem_pio2+0x55c>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	e7c5      	b.n	8007904 <__kernel_rem_pio2+0x56c>
 8007978:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800797c:	f7f8 fc2a 	bl	80001d4 <__adddf3>
 8007980:	3401      	adds	r4, #1
 8007982:	e7ca      	b.n	800791a <__kernel_rem_pio2+0x582>
 8007984:	e9da 8900 	ldrd	r8, r9, [sl]
 8007988:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800798c:	9b02      	ldr	r3, [sp, #8]
 800798e:	3b01      	subs	r3, #1
 8007990:	9302      	str	r3, [sp, #8]
 8007992:	4632      	mov	r2, r6
 8007994:	463b      	mov	r3, r7
 8007996:	4640      	mov	r0, r8
 8007998:	4649      	mov	r1, r9
 800799a:	f7f8 fc1b 	bl	80001d4 <__adddf3>
 800799e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4640      	mov	r0, r8
 80079a8:	4649      	mov	r1, r9
 80079aa:	f7f8 fc11 	bl	80001d0 <__aeabi_dsub>
 80079ae:	4632      	mov	r2, r6
 80079b0:	463b      	mov	r3, r7
 80079b2:	f7f8 fc0f 	bl	80001d4 <__adddf3>
 80079b6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80079ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80079be:	ed8a 7b00 	vstr	d7, [sl]
 80079c2:	e76e      	b.n	80078a2 <__kernel_rem_pio2+0x50a>
 80079c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80079c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80079cc:	4640      	mov	r0, r8
 80079ce:	4632      	mov	r2, r6
 80079d0:	463b      	mov	r3, r7
 80079d2:	4649      	mov	r1, r9
 80079d4:	f7f8 fbfe 	bl	80001d4 <__adddf3>
 80079d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4640      	mov	r0, r8
 80079e2:	4649      	mov	r1, r9
 80079e4:	f7f8 fbf4 	bl	80001d0 <__aeabi_dsub>
 80079e8:	4632      	mov	r2, r6
 80079ea:	463b      	mov	r3, r7
 80079ec:	f7f8 fbf2 	bl	80001d4 <__adddf3>
 80079f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80079f8:	ed84 7b00 	vstr	d7, [r4]
 80079fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a00:	e755      	b.n	80078ae <__kernel_rem_pio2+0x516>
 8007a02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007a06:	f7f8 fbe5 	bl	80001d4 <__adddf3>
 8007a0a:	3d01      	subs	r5, #1
 8007a0c:	e759      	b.n	80078c2 <__kernel_rem_pio2+0x52a>
 8007a0e:	9b01      	ldr	r3, [sp, #4]
 8007a10:	9a01      	ldr	r2, [sp, #4]
 8007a12:	601d      	str	r5, [r3, #0]
 8007a14:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007a18:	605c      	str	r4, [r3, #4]
 8007a1a:	609f      	str	r7, [r3, #8]
 8007a1c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007a20:	60d3      	str	r3, [r2, #12]
 8007a22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a26:	6110      	str	r0, [r2, #16]
 8007a28:	6153      	str	r3, [r2, #20]
 8007a2a:	e728      	b.n	800787e <__kernel_rem_pio2+0x4e6>
 8007a2c:	41700000 	.word	0x41700000
 8007a30:	3e700000 	.word	0x3e700000
 8007a34:	00000000 	.word	0x00000000

08007a38 <__kernel_sin>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	ed2d 8b04 	vpush	{d8-d9}
 8007a40:	eeb0 8a41 	vmov.f32	s16, s2
 8007a44:	eef0 8a61 	vmov.f32	s17, s3
 8007a48:	ec55 4b10 	vmov	r4, r5, d0
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007a52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007a56:	9001      	str	r0, [sp, #4]
 8007a58:	da06      	bge.n	8007a68 <__kernel_sin+0x30>
 8007a5a:	ee10 0a10 	vmov	r0, s0
 8007a5e:	4629      	mov	r1, r5
 8007a60:	f7f9 f81e 	bl	8000aa0 <__aeabi_d2iz>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d051      	beq.n	8007b0c <__kernel_sin+0xd4>
 8007a68:	4622      	mov	r2, r4
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	4629      	mov	r1, r5
 8007a70:	f7f8 fd66 	bl	8000540 <__aeabi_dmul>
 8007a74:	4682      	mov	sl, r0
 8007a76:	468b      	mov	fp, r1
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	f7f8 fd5e 	bl	8000540 <__aeabi_dmul>
 8007a84:	a341      	add	r3, pc, #260	; (adr r3, 8007b8c <__kernel_sin+0x154>)
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	4680      	mov	r8, r0
 8007a8c:	4689      	mov	r9, r1
 8007a8e:	4650      	mov	r0, sl
 8007a90:	4659      	mov	r1, fp
 8007a92:	f7f8 fd55 	bl	8000540 <__aeabi_dmul>
 8007a96:	a33f      	add	r3, pc, #252	; (adr r3, 8007b94 <__kernel_sin+0x15c>)
 8007a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9c:	f7f8 fb98 	bl	80001d0 <__aeabi_dsub>
 8007aa0:	4652      	mov	r2, sl
 8007aa2:	465b      	mov	r3, fp
 8007aa4:	f7f8 fd4c 	bl	8000540 <__aeabi_dmul>
 8007aa8:	a33c      	add	r3, pc, #240	; (adr r3, 8007b9c <__kernel_sin+0x164>)
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	f7f8 fb91 	bl	80001d4 <__adddf3>
 8007ab2:	4652      	mov	r2, sl
 8007ab4:	465b      	mov	r3, fp
 8007ab6:	f7f8 fd43 	bl	8000540 <__aeabi_dmul>
 8007aba:	a33a      	add	r3, pc, #232	; (adr r3, 8007ba4 <__kernel_sin+0x16c>)
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f7f8 fb86 	bl	80001d0 <__aeabi_dsub>
 8007ac4:	4652      	mov	r2, sl
 8007ac6:	465b      	mov	r3, fp
 8007ac8:	f7f8 fd3a 	bl	8000540 <__aeabi_dmul>
 8007acc:	a337      	add	r3, pc, #220	; (adr r3, 8007bac <__kernel_sin+0x174>)
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	f7f8 fb7f 	bl	80001d4 <__adddf3>
 8007ad6:	9b01      	ldr	r3, [sp, #4]
 8007ad8:	4606      	mov	r6, r0
 8007ada:	460f      	mov	r7, r1
 8007adc:	b9eb      	cbnz	r3, 8007b1a <__kernel_sin+0xe2>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	4650      	mov	r0, sl
 8007ae4:	4659      	mov	r1, fp
 8007ae6:	f7f8 fd2b 	bl	8000540 <__aeabi_dmul>
 8007aea:	a325      	add	r3, pc, #148	; (adr r3, 8007b80 <__kernel_sin+0x148>)
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	f7f8 fb6e 	bl	80001d0 <__aeabi_dsub>
 8007af4:	4642      	mov	r2, r8
 8007af6:	464b      	mov	r3, r9
 8007af8:	f7f8 fd22 	bl	8000540 <__aeabi_dmul>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4620      	mov	r0, r4
 8007b02:	4629      	mov	r1, r5
 8007b04:	f7f8 fb66 	bl	80001d4 <__adddf3>
 8007b08:	4604      	mov	r4, r0
 8007b0a:	460d      	mov	r5, r1
 8007b0c:	ec45 4b10 	vmov	d0, r4, r5
 8007b10:	b003      	add	sp, #12
 8007b12:	ecbd 8b04 	vpop	{d8-d9}
 8007b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1a:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <__kernel_sin+0x150>)
 8007b1c:	ec51 0b18 	vmov	r0, r1, d8
 8007b20:	2200      	movs	r2, #0
 8007b22:	f7f8 fd0d 	bl	8000540 <__aeabi_dmul>
 8007b26:	4632      	mov	r2, r6
 8007b28:	ec41 0b19 	vmov	d9, r0, r1
 8007b2c:	463b      	mov	r3, r7
 8007b2e:	4640      	mov	r0, r8
 8007b30:	4649      	mov	r1, r9
 8007b32:	f7f8 fd05 	bl	8000540 <__aeabi_dmul>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	ec51 0b19 	vmov	r0, r1, d9
 8007b3e:	f7f8 fb47 	bl	80001d0 <__aeabi_dsub>
 8007b42:	4652      	mov	r2, sl
 8007b44:	465b      	mov	r3, fp
 8007b46:	f7f8 fcfb 	bl	8000540 <__aeabi_dmul>
 8007b4a:	ec53 2b18 	vmov	r2, r3, d8
 8007b4e:	f7f8 fb3f 	bl	80001d0 <__aeabi_dsub>
 8007b52:	a30b      	add	r3, pc, #44	; (adr r3, 8007b80 <__kernel_sin+0x148>)
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	4606      	mov	r6, r0
 8007b5a:	460f      	mov	r7, r1
 8007b5c:	4640      	mov	r0, r8
 8007b5e:	4649      	mov	r1, r9
 8007b60:	f7f8 fcee 	bl	8000540 <__aeabi_dmul>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	4630      	mov	r0, r6
 8007b6a:	4639      	mov	r1, r7
 8007b6c:	f7f8 fb32 	bl	80001d4 <__adddf3>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4620      	mov	r0, r4
 8007b76:	4629      	mov	r1, r5
 8007b78:	f7f8 fb2a 	bl	80001d0 <__aeabi_dsub>
 8007b7c:	e7c4      	b.n	8007b08 <__kernel_sin+0xd0>
 8007b7e:	bf00      	nop
 8007b80:	55555549 	.word	0x55555549
 8007b84:	3fc55555 	.word	0x3fc55555
 8007b88:	3fe00000 	.word	0x3fe00000
 8007b8c:	5acfd57c 	.word	0x5acfd57c
 8007b90:	3de5d93a 	.word	0x3de5d93a
 8007b94:	8a2b9ceb 	.word	0x8a2b9ceb
 8007b98:	3e5ae5e6 	.word	0x3e5ae5e6
 8007b9c:	57b1fe7d 	.word	0x57b1fe7d
 8007ba0:	3ec71de3 	.word	0x3ec71de3
 8007ba4:	19c161d5 	.word	0x19c161d5
 8007ba8:	3f2a01a0 	.word	0x3f2a01a0
 8007bac:	1110f8a6 	.word	0x1110f8a6
 8007bb0:	3f811111 	.word	0x3f811111

08007bb4 <fabs>:
 8007bb4:	ec51 0b10 	vmov	r0, r1, d0
 8007bb8:	ee10 2a10 	vmov	r2, s0
 8007bbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bc0:	ec43 2b10 	vmov	d0, r2, r3
 8007bc4:	4770      	bx	lr
	...

08007bc8 <floor>:
 8007bc8:	ec51 0b10 	vmov	r0, r1, d0
 8007bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007bd4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007bd8:	2e13      	cmp	r6, #19
 8007bda:	ee10 5a10 	vmov	r5, s0
 8007bde:	ee10 8a10 	vmov	r8, s0
 8007be2:	460c      	mov	r4, r1
 8007be4:	dc32      	bgt.n	8007c4c <floor+0x84>
 8007be6:	2e00      	cmp	r6, #0
 8007be8:	da14      	bge.n	8007c14 <floor+0x4c>
 8007bea:	a333      	add	r3, pc, #204	; (adr r3, 8007cb8 <floor+0xf0>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 faf0 	bl	80001d4 <__adddf3>
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f7f8 ff32 	bl	8000a60 <__aeabi_dcmpgt>
 8007bfc:	b138      	cbz	r0, 8007c0e <floor+0x46>
 8007bfe:	2c00      	cmp	r4, #0
 8007c00:	da57      	bge.n	8007cb2 <floor+0xea>
 8007c02:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007c06:	431d      	orrs	r5, r3
 8007c08:	d001      	beq.n	8007c0e <floor+0x46>
 8007c0a:	4c2d      	ldr	r4, [pc, #180]	; (8007cc0 <floor+0xf8>)
 8007c0c:	2500      	movs	r5, #0
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4628      	mov	r0, r5
 8007c12:	e025      	b.n	8007c60 <floor+0x98>
 8007c14:	4f2b      	ldr	r7, [pc, #172]	; (8007cc4 <floor+0xfc>)
 8007c16:	4137      	asrs	r7, r6
 8007c18:	ea01 0307 	and.w	r3, r1, r7
 8007c1c:	4303      	orrs	r3, r0
 8007c1e:	d01f      	beq.n	8007c60 <floor+0x98>
 8007c20:	a325      	add	r3, pc, #148	; (adr r3, 8007cb8 <floor+0xf0>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f7f8 fad5 	bl	80001d4 <__adddf3>
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f7f8 ff17 	bl	8000a60 <__aeabi_dcmpgt>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d0eb      	beq.n	8007c0e <floor+0x46>
 8007c36:	2c00      	cmp	r4, #0
 8007c38:	bfbe      	ittt	lt
 8007c3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007c3e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007c42:	19a4      	addlt	r4, r4, r6
 8007c44:	ea24 0407 	bic.w	r4, r4, r7
 8007c48:	2500      	movs	r5, #0
 8007c4a:	e7e0      	b.n	8007c0e <floor+0x46>
 8007c4c:	2e33      	cmp	r6, #51	; 0x33
 8007c4e:	dd0b      	ble.n	8007c68 <floor+0xa0>
 8007c50:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007c54:	d104      	bne.n	8007c60 <floor+0x98>
 8007c56:	ee10 2a10 	vmov	r2, s0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	f7f8 faba 	bl	80001d4 <__adddf3>
 8007c60:	ec41 0b10 	vmov	d0, r0, r1
 8007c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c68:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c70:	fa23 f707 	lsr.w	r7, r3, r7
 8007c74:	4207      	tst	r7, r0
 8007c76:	d0f3      	beq.n	8007c60 <floor+0x98>
 8007c78:	a30f      	add	r3, pc, #60	; (adr r3, 8007cb8 <floor+0xf0>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 faa9 	bl	80001d4 <__adddf3>
 8007c82:	2200      	movs	r2, #0
 8007c84:	2300      	movs	r3, #0
 8007c86:	f7f8 feeb 	bl	8000a60 <__aeabi_dcmpgt>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d0bf      	beq.n	8007c0e <floor+0x46>
 8007c8e:	2c00      	cmp	r4, #0
 8007c90:	da02      	bge.n	8007c98 <floor+0xd0>
 8007c92:	2e14      	cmp	r6, #20
 8007c94:	d103      	bne.n	8007c9e <floor+0xd6>
 8007c96:	3401      	adds	r4, #1
 8007c98:	ea25 0507 	bic.w	r5, r5, r7
 8007c9c:	e7b7      	b.n	8007c0e <floor+0x46>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007ca4:	fa03 f606 	lsl.w	r6, r3, r6
 8007ca8:	4435      	add	r5, r6
 8007caa:	4545      	cmp	r5, r8
 8007cac:	bf38      	it	cc
 8007cae:	18e4      	addcc	r4, r4, r3
 8007cb0:	e7f2      	b.n	8007c98 <floor+0xd0>
 8007cb2:	2500      	movs	r5, #0
 8007cb4:	462c      	mov	r4, r5
 8007cb6:	e7aa      	b.n	8007c0e <floor+0x46>
 8007cb8:	8800759c 	.word	0x8800759c
 8007cbc:	7e37e43c 	.word	0x7e37e43c
 8007cc0:	bff00000 	.word	0xbff00000
 8007cc4:	000fffff 	.word	0x000fffff

08007cc8 <nan>:
 8007cc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007cd0 <nan+0x8>
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	00000000 	.word	0x00000000
 8007cd4:	7ff80000 	.word	0x7ff80000

08007cd8 <scalbn>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	ec55 4b10 	vmov	r4, r5, d0
 8007cde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	462b      	mov	r3, r5
 8007ce6:	b99a      	cbnz	r2, 8007d10 <scalbn+0x38>
 8007ce8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007cec:	4323      	orrs	r3, r4
 8007cee:	d036      	beq.n	8007d5e <scalbn+0x86>
 8007cf0:	4b39      	ldr	r3, [pc, #228]	; (8007dd8 <scalbn+0x100>)
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	ee10 0a10 	vmov	r0, s0
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f7f8 fc21 	bl	8000540 <__aeabi_dmul>
 8007cfe:	4b37      	ldr	r3, [pc, #220]	; (8007ddc <scalbn+0x104>)
 8007d00:	429e      	cmp	r6, r3
 8007d02:	4604      	mov	r4, r0
 8007d04:	460d      	mov	r5, r1
 8007d06:	da10      	bge.n	8007d2a <scalbn+0x52>
 8007d08:	a32b      	add	r3, pc, #172	; (adr r3, 8007db8 <scalbn+0xe0>)
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	e03a      	b.n	8007d86 <scalbn+0xae>
 8007d10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007d14:	428a      	cmp	r2, r1
 8007d16:	d10c      	bne.n	8007d32 <scalbn+0x5a>
 8007d18:	ee10 2a10 	vmov	r2, s0
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	4629      	mov	r1, r5
 8007d20:	f7f8 fa58 	bl	80001d4 <__adddf3>
 8007d24:	4604      	mov	r4, r0
 8007d26:	460d      	mov	r5, r1
 8007d28:	e019      	b.n	8007d5e <scalbn+0x86>
 8007d2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007d2e:	460b      	mov	r3, r1
 8007d30:	3a36      	subs	r2, #54	; 0x36
 8007d32:	4432      	add	r2, r6
 8007d34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007d38:	428a      	cmp	r2, r1
 8007d3a:	dd08      	ble.n	8007d4e <scalbn+0x76>
 8007d3c:	2d00      	cmp	r5, #0
 8007d3e:	a120      	add	r1, pc, #128	; (adr r1, 8007dc0 <scalbn+0xe8>)
 8007d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d44:	da1c      	bge.n	8007d80 <scalbn+0xa8>
 8007d46:	a120      	add	r1, pc, #128	; (adr r1, 8007dc8 <scalbn+0xf0>)
 8007d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d4c:	e018      	b.n	8007d80 <scalbn+0xa8>
 8007d4e:	2a00      	cmp	r2, #0
 8007d50:	dd08      	ble.n	8007d64 <scalbn+0x8c>
 8007d52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d5e:	ec45 4b10 	vmov	d0, r4, r5
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007d68:	da19      	bge.n	8007d9e <scalbn+0xc6>
 8007d6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d6e:	429e      	cmp	r6, r3
 8007d70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007d74:	dd0a      	ble.n	8007d8c <scalbn+0xb4>
 8007d76:	a112      	add	r1, pc, #72	; (adr r1, 8007dc0 <scalbn+0xe8>)
 8007d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1e2      	bne.n	8007d46 <scalbn+0x6e>
 8007d80:	a30f      	add	r3, pc, #60	; (adr r3, 8007dc0 <scalbn+0xe8>)
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fbdb 	bl	8000540 <__aeabi_dmul>
 8007d8a:	e7cb      	b.n	8007d24 <scalbn+0x4c>
 8007d8c:	a10a      	add	r1, pc, #40	; (adr r1, 8007db8 <scalbn+0xe0>)
 8007d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0b8      	beq.n	8007d08 <scalbn+0x30>
 8007d96:	a10e      	add	r1, pc, #56	; (adr r1, 8007dd0 <scalbn+0xf8>)
 8007d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d9c:	e7b4      	b.n	8007d08 <scalbn+0x30>
 8007d9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007da2:	3236      	adds	r2, #54	; 0x36
 8007da4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007da8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007dac:	4620      	mov	r0, r4
 8007dae:	4b0c      	ldr	r3, [pc, #48]	; (8007de0 <scalbn+0x108>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	e7e8      	b.n	8007d86 <scalbn+0xae>
 8007db4:	f3af 8000 	nop.w
 8007db8:	c2f8f359 	.word	0xc2f8f359
 8007dbc:	01a56e1f 	.word	0x01a56e1f
 8007dc0:	8800759c 	.word	0x8800759c
 8007dc4:	7e37e43c 	.word	0x7e37e43c
 8007dc8:	8800759c 	.word	0x8800759c
 8007dcc:	fe37e43c 	.word	0xfe37e43c
 8007dd0:	c2f8f359 	.word	0xc2f8f359
 8007dd4:	81a56e1f 	.word	0x81a56e1f
 8007dd8:	43500000 	.word	0x43500000
 8007ddc:	ffff3cb0 	.word	0xffff3cb0
 8007de0:	3c900000 	.word	0x3c900000

08007de4 <_init>:
 8007de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de6:	bf00      	nop
 8007de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dea:	bc08      	pop	{r3}
 8007dec:	469e      	mov	lr, r3
 8007dee:	4770      	bx	lr

08007df0 <_fini>:
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df2:	bf00      	nop
 8007df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df6:	bc08      	pop	{r3}
 8007df8:	469e      	mov	lr, r3
 8007dfa:	4770      	bx	lr
